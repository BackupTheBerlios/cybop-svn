%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\Diplom\Ausarbeitung\Bilder\GesamtModell.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 848 561
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 848 561
%AI3_TileBox: 0 0 848 561
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  251.6412 509.2625 m
  305.4618 509.2625 L
  305.4618 521.7010 L
  251.6412 521.7010 L
  251.6412 509.2625 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  251.6412 521.7010 m
  305.4618 521.7010 L
  305.4618 534.3787 L
  251.6412 534.3787 L
  251.6412 521.7010 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  251.6412 534.3787 m
  305.4618 534.3787 L
  305.4618 550.6445 L
  251.6412 550.6445 L
  251.6412 534.3787 L
F
U
u
0.7500 w
1 J
  251.6412 534.3787 m
  305.4618 534.3787 L
  305.4618 550.6445 L
  251.6412 550.6445 L
  251.6412 534.3787 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 254.0332 538.9236 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Controller\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  216.4784 445.1561 m
  340.6246 445.1561 L
  340.6246 457.5947 L
  216.4784 457.5947 L
  216.4784 445.1561 L
B
U
u
  0.000 0.000 0.000 0.000 k
  216.4784 457.5947 m
  340.6246 457.5947 L
  340.6246 470.2724 L
  216.4784 470.2724 L
  216.4784 457.5947 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  216.4784 470.2724 m
  340.6246 470.2724 L
  340.6246 486.5382 L
  216.4784 486.5382 L
  216.4784 470.2724 L
F
U
u
0.7500 w
  216.4784 470.2724 m
  340.6246 470.2724 L
  340.6246 486.5382 L
  216.4784 486.5382 L
  216.4784 470.2724 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 217.4352 474.8173 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(AdvancedBasicController\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  243.2691 367.4153 m
  297.0897 367.4153 L
  297.0897 380.0930 L
  243.2691 380.0930 L
  243.2691 367.4153 L
B
U
u
  0.000 0.000 0.000 0.000 k
  243.2691 380.0930 m
  297.0897 380.0930 L
  297.0897 392.5316 L
  243.2691 392.5316 L
  243.2691 380.0930 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  243.2691 392.5316 m
  297.0897 392.5316 L
  297.0897 408.7973 L
  243.2691 408.7973 L
  243.2691 392.5316 L
F
U
u
0.7500 w
  243.2691 392.5316 m
  297.0897 392.5316 L
  297.0897 408.7973 L
  243.2691 408.7973 L
  243.2691 392.5316 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 250.9236 397.0764 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(ReForm\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  313.8339 367.4153 m
  367.6545 367.4153 L
  367.6545 380.0930 L
  313.8339 380.0930 L
  313.8339 367.4153 L
B
U
u
  0.000 0.000 0.000 0.000 k
  313.8339 380.0930 m
  367.6545 380.0930 L
  367.6545 392.5316 L
  313.8339 392.5316 L
  313.8339 380.0930 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  313.8339 392.5316 m
  367.6545 392.5316 L
  367.6545 408.7973 L
  313.8339 408.7973 L
  313.8339 392.5316 L
F
U
u
0.7500 w
  313.8339 392.5316 m
  367.6545 392.5316 L
  367.6545 408.7973 L
  313.8339 408.7973 L
  313.8339 392.5316 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 323.4020 397.0764 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Record\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  461.6611 509.2625 m
  515.4817 509.2625 L
  515.4817 521.7010 L
  461.6611 521.7010 L
  461.6611 509.2625 L
B
U
u
  0.000 0.000 0.000 0.000 k
  461.6611 521.7010 m
  515.4817 521.7010 L
  515.4817 534.3787 L
  461.6611 534.3787 L
  461.6611 521.7010 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  461.6611 534.3787 m
  515.4817 534.3787 L
  515.4817 550.6445 L
  461.6611 550.6445 L
  461.6611 534.3787 L
F
U
u
0.7500 w
  461.6611 534.3787 m
  515.4817 534.3787 L
  515.4817 550.6445 L
  461.6611 550.6445 L
  461.6611 534.3787 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 463.8140 538.9236 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Assembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  389.6611 445.1561 m
  478.1661 445.1561 L
  478.1661 457.5947 L
  389.6611 457.5947 L
  389.6611 445.1561 L
B
U
u
  0.000 0.000 0.000 0.000 k
  389.6611 457.5947 m
  478.1661 457.5947 L
  478.1661 470.2724 L
  389.6611 470.2724 L
  389.6611 457.5947 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  389.6611 470.2724 m
  478.1661 470.2724 L
  478.1661 486.5382 L
  389.6611 486.5382 L
  389.6611 470.2724 L
F
U
u
0.7500 w
  389.6611 470.2724 m
  478.1661 470.2724 L
  478.1661 486.5382 L
  389.6611 486.5382 L
  389.6611 470.2724 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 390.6179 474.8173 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RemoteAssembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  504.2392 445.1561 m
  608.7708 445.1561 L
  608.7708 457.5947 L
  504.2392 457.5947 L
  504.2392 445.1561 L
B
U
u
  0.000 0.000 0.000 0.000 k
  504.2392 457.5947 m
  608.7708 457.5947 L
  608.7708 470.2724 L
  504.2392 470.2724 L
  504.2392 457.5947 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  504.2392 470.2724 m
  608.7708 470.2724 L
  608.7708 486.5382 L
  504.2392 486.5382 L
  504.2392 470.2724 L
F
U
u
0.7500 w
  504.2392 470.2724 m
  608.7708 470.2724 L
  608.7708 486.5382 L
  504.2392 486.5382 L
  504.2392 470.2724 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 505.1960 474.8173 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(PersistanceAssembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  230.8306 316.9435 m
  326.7508 316.9435 L
  326.7508 329.6213 L
  230.8306 329.6213 L
  230.8306 316.9435 L
B
U
u
  0.000 0.000 0.000 0.000 k
  230.8306 329.6213 m
  326.7508 329.6213 L
  326.7508 342.0598 L
  230.8306 342.0598 L
  230.8306 329.6213 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  230.8306 342.0598 m
  326.7508 342.0598 L
  326.7508 358.5648 L
  230.8306 358.5648 L
  230.8306 342.0598 L
F
U
u
0.7500 w
  230.8306 342.0598 m
  326.7508 342.0598 L
  326.7508 358.5648 L
  230.8306 358.5648 L
  230.8306 342.0598 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 231.7874 346.6047 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(DataTransferObject\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  359.5216 256.9037 m
  433.6744 256.9037 L
  433.6744 269.3422 L
  359.5216 269.3422 L
  359.5216 256.9037 L
B
U
u
  0.000 0.000 0.000 0.000 k
  359.5216 269.3422 m
  433.6744 269.3422 L
  433.6744 282.0199 L
  359.5216 282.0199 L
  359.5216 269.3422 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  359.5216 282.0199 m
  433.6744 282.0199 L
  433.6744 298.2857 L
  359.5216 298.2857 L
  359.5216 282.0199 L
F
U
u
0.7500 w
  359.5216 282.0199 m
  433.6744 282.0199 L
  433.6744 298.2857 L
  359.5216 298.2857 L
  359.5216 282.0199 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 360.4784 286.5648 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIAssembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  219.8272 256.9037 m
  337.5150 256.9037 L
  337.5150 269.3422 L
  219.8272 269.3422 L
  219.8272 256.9037 L
B
U
u
  0.000 0.000 0.000 0.000 k
  219.8272 269.3422 m
  337.5150 269.3422 L
  337.5150 282.0199 L
  219.8272 282.0199 L
  219.8272 269.3422 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  219.8272 282.0199 m
  337.5150 282.0199 L
  337.5150 298.2857 L
  219.8272 298.2857 L
  219.8272 282.0199 L
F
U
u
0.7500 w
  219.8272 282.0199 m
  337.5150 282.0199 L
  337.5150 298.2857 L
  219.8272 298.2857 L
  219.8272 282.0199 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 220.7841 286.5648 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIDTO \(RMI-Model\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  445.6346 256.9037 m
  537.7276 256.9037 L
  537.7276 269.3422 L
  445.6346 269.3422 L
  445.6346 256.9037 L
B
U
u
  0.000 0.000 0.000 0.000 k
  445.6346 269.3422 m
  537.7276 269.3422 L
  537.7276 282.0199 L
  445.6346 282.0199 L
  445.6346 269.3422 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  445.6346 282.0199 m
  537.7276 282.0199 L
  537.7276 298.2857 L
  445.6346 298.2857 L
  445.6346 282.0199 L
F
U
u
0.7500 w
  445.6346 282.0199 m
  537.7276 282.0199 L
  537.7276 298.2857 L
  445.6346 298.2857 L
  445.6346 282.0199 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 446.5914 286.5648 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(CORBAAssembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  473.6213 367.4153 m
  551.3621 367.4153 L
  551.3621 380.0930 L
  473.6213 380.0930 L
  473.6213 367.4153 L
B
U
u
  0.000 0.000 0.000 0.000 k
  473.6213 380.0930 m
  551.3621 380.0930 L
  551.3621 392.5316 L
  473.6213 392.5316 L
  473.6213 380.0930 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  473.6213 392.5316 m
  551.3621 392.5316 L
  551.3621 408.7973 L
  473.6213 408.7973 L
  473.6213 392.5316 L
F
U
u
0.7500 w
  473.6213 392.5316 m
  551.3621 392.5316 L
  551.3621 408.7973 L
  473.6213 408.7973 L
  473.6213 392.5316 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 474.5781 397.0764 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(XMLAssembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  570.9767 367.4153 m
  637.7143 367.4153 L
  637.7143 380.0930 L
  570.9767 380.0930 L
  570.9767 367.4153 L
B
U
u
  0.000 0.000 0.000 0.000 k
  570.9767 380.0930 m
  637.7143 380.0930 L
  637.7143 392.5316 L
  570.9767 392.5316 L
  570.9767 380.0930 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  570.9767 392.5316 m
  637.7143 392.5316 L
  637.7143 408.7973 L
  570.9767 408.7973 L
  570.9767 392.5316 L
F
U
u
0.7500 w
  570.9767 392.5316 m
  637.7143 392.5316 L
  637.7143 408.7973 L
  570.9767 408.7973 L
  570.9767 392.5316 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 571.9336 397.0764 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(ERAssembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  524.3322 519.5482 m
  556.6246 519.5482 L
  556.6246 486.5382 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  524.3322 514.0465 m
  524.3322 525.2890 L
  515.4817 519.5482 L
  524.3322 514.0465 L
B
U
u
0.5000 w
  452.5714 519.5482 m
  433.9136 519.5482 L
  433.9136 486.5382 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  452.5714 525.2890 m
  452.5714 514.0465 L
  461.6611 519.5482 L
  452.5714 525.2890 L
B
U
u
0.5000 w
  278.4319 500.1728 m
  278.4319 486.5382 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  272.9302 500.1728 m
  284.1728 500.1728 L
  278.4319 509.2625 L
  272.9302 500.1728 L
B
U
u
0.5000 w
  455.9203 436.0664 m
  455.9203 332.0133 L
  468.8372 332.0133 L
  468.8372 298.2857 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  450.4186 436.0664 m
  461.6611 436.0664 L
  455.9203 445.1561 L
  450.4186 436.0664 L
B
U
u
0.5000 w
  359.5216 277.7143 m
  355.6944 277.7143 L
S
U
u
  353.3023 277.7143 m
  349.4751 277.7143 L
S
U
u
  347.0831 277.7143 m
  343.2558 277.7143 L
S
U
u
  340.8638 277.7143 m
  337.5150 277.7143 L
S
U
u
  342.0598 282.0199 m
  337.5150 277.7143 L
  342.0598 273.1694 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  661.3953 509.2625 m
  732.1993 509.2625 L
  732.1993 521.7010 L
  661.3953 521.7010 L
  661.3953 509.2625 L
B
U
u
  0.000 0.000 0.000 0.000 k
  661.3953 521.7010 m
  732.1993 521.7010 L
  732.1993 534.3787 L
  661.3953 534.3787 L
  661.3953 521.7010 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  661.3953 534.3787 m
  732.1993 534.3787 L
  732.1993 550.6445 L
  661.3953 550.6445 L
  661.3953 534.3787 L
F
U
u
0.7500 w
  661.3953 534.3787 m
  732.1993 534.3787 L
  732.1993 550.6445 L
  661.3953 550.6445 L
  661.3953 534.3787 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 662.3522 538.9236 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(DomainObject\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  662.8306 445.1561 m
  730.7641 445.1561 L
  730.7641 457.5947 L
  662.8306 457.5947 L
  662.8306 445.1561 L
B
U
u
  0.000 0.000 0.000 0.000 k
  662.8306 457.5947 m
  730.7641 457.5947 L
  730.7641 470.2724 L
  662.8306 470.2724 L
  662.8306 457.5947 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  662.8306 470.2724 m
  730.7641 470.2724 L
  730.7641 486.5382 L
  662.8306 486.5382 L
  662.8306 470.2724 L
F
U
u
0.7500 w
  662.8306 470.2724 m
  730.7641 470.2724 L
  730.7641 486.5382 L
  662.8306 486.5382 L
  662.8306 470.2724 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 663.7874 474.8173 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(HealthRecord\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  669.7674 367.4153 m
  723.5880 367.4153 L
  723.5880 380.0930 L
  669.7674 380.0930 L
  669.7674 367.4153 L
B
U
u
  0.000 0.000 0.000 0.000 k
  669.7674 380.0930 m
  723.5880 380.0930 L
  723.5880 392.5316 L
  669.7674 392.5316 L
  669.7674 380.0930 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  669.7674 392.5316 m
  723.5880 392.5316 L
  723.5880 408.7973 L
  669.7674 408.7973 L
  669.7674 392.5316 L
F
U
u
0.7500 w
  669.7674 392.5316 m
  723.5880 392.5316 L
  723.5880 408.7973 L
  669.7674 408.7973 L
  669.7674 392.5316 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 676.9435 397.0764 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Problem\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  669.7674 293.5017 m
  723.5880 293.5017 L
  723.5880 305.9402 L
  669.7674 305.9402 L
  669.7674 293.5017 L
B
U
u
  0.000 0.000 0.000 0.000 k
  669.7674 305.9402 m
  723.5880 305.9402 L
  723.5880 318.6179 L
  669.7674 318.6179 L
  669.7674 305.9402 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  669.7674 318.6179 m
  723.5880 318.6179 L
  723.5880 334.8837 L
  669.7674 334.8837 L
  669.7674 318.6179 L
F
U
u
0.7500 w
  669.7674 318.6179 m
  723.5880 318.6179 L
  723.5880 334.8837 L
  669.7674 334.8837 L
  669.7674 318.6179 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 677.6611 323.1628 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Episode\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  661.6346 212.4120 m
  731.7209 212.4120 L
  731.7209 225.0897 L
  661.6346 225.0897 L
  661.6346 212.4120 L
B
U
u
  0.000 0.000 0.000 0.000 k
  661.6346 225.0897 m
  731.7209 225.0897 L
  731.7209 237.5282 L
  661.6346 237.5282 L
  661.6346 225.0897 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  661.6346 237.5282 m
  731.7209 237.5282 L
  731.7209 254.0332 L
  661.6346 254.0332 L
  661.6346 237.5282 L
F
U
u
0.7500 w
  661.6346 237.5282 m
  731.7209 237.5282 L
  731.7209 254.0332 L
  661.6346 254.0332 L
  661.6346 237.5282 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 662.5914 242.3123 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(PartialContact\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  696.7973 500.1728 m
  696.7973 486.5382 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  691.0565 500.1728 m
  702.2990 500.1728 L
  696.7973 509.2625 L
  691.0565 500.1728 L
B
U
u
  0.000 0.000 0.000 0.000 k
  216.7176 190.6445 m
  373.6346 190.6445 L
  373.6346 203.3223 L
  216.7176 203.3223 L
  216.7176 190.6445 L
B
U
u
  0.000 0.000 0.000 0.000 k
  216.7176 203.3223 m
  373.6346 203.3223 L
  373.6346 216.0000 L
  216.7176 216.0000 L
  216.7176 203.3223 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  216.7176 216.0000 m
  373.6346 216.0000 L
  373.6346 232.2658 L
  216.7176 232.2658 L
  216.7176 216.0000 L
F
U
u
0.7500 w
  216.7176 216.0000 m
  373.6346 216.0000 L
  373.6346 232.2658 L
  216.7176 232.2658 L
  216.7176 216.0000 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 217.6744 220.5449 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(javax.rmi.PortableRemoteObject\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  138.4983 122.9502 m
  193.9934 122.9502 L
  193.9934 135.6279 L
  138.4983 135.6279 L
  138.4983 122.9502 L
B
U
u
  0.000 0.000 0.000 0.000 k
  138.4983 135.6279 m
  193.9934 135.6279 L
  193.9934 148.0664 L
  138.4983 148.0664 L
  138.4983 135.6279 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  138.4983 148.0664 m
  193.9934 148.0664 L
  193.9934 164.5714 L
  138.4983 164.5714 L
  138.4983 148.0664 L
F
U
u
0.7500 w
  138.4983 148.0664 m
  193.9934 148.0664 L
  193.9934 164.5714 L
  138.4983 164.5714 L
  138.4983 148.0664 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 139.4551 152.8505 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIServer\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  135.1495 177.7276 m
  197.3422 177.7276 L
  197.3422 190.1661 L
  135.1495 190.1661 L
  135.1495 177.7276 L
B
U
u
  0.000 0.000 0.000 0.000 k
  135.1495 190.1661 m
  197.3422 190.1661 L
  197.3422 202.8439 L
  135.1495 202.8439 L
  135.1495 190.1661 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  135.1495 202.8439 m
  197.3422 202.8439 L
  197.3422 219.1096 L
  135.1495 219.1096 L
  135.1495 202.8439 L
F
U
u
0.7500 w
  135.1495 202.8439 m
  197.3422 202.8439 L
  197.3422 219.1096 L
  135.1495 219.1096 L
  135.1495 202.8439 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 136.1063 207.3887 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(CorbaServer\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  485.8206 181.0764 m
  485.8206 176.5316 L
  481.2757 176.5316 L
  481.2757 165.2890 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  480.0797 181.0764 m
  491.3223 181.0764 L
  485.8206 189.9269 L
  480.0797 181.0764 L
B
U
u
  0.000 0.000 0.000 0.000 k
  445.6346 189.9269 m
  525.7674 189.9269 L
  525.7674 202.6047 L
  445.6346 202.6047 L
  445.6346 189.9269 L
B
U
u
  0.000 0.000 0.000 0.000 k
  445.6346 202.6047 m
  525.7674 202.6047 L
  525.7674 233.2226 L
  445.6346 233.2226 L
  445.6346 202.6047 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 451.1362 221.5017 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\253Schnittstelle\273\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 446.5914 207.1495 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(java.rmi.Remote\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  445.6346 122.2326 m
  516.9169 122.2326 L
  516.9169 134.6711 L
  445.6346 134.6711 L
  445.6346 122.2326 L
B
U
u
  0.000 0.000 0.000 0.000 k
  445.6346 134.6711 m
  516.9169 134.6711 L
  516.9169 165.2890 L
  445.6346 165.2890 L
  445.6346 134.6711 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 446.5914 153.5681 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\253Schnittstelle\273\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 450.1794 139.2159 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(RMIServices\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  515.4817 529.8339 m
  519.3090 529.8339 L
S
U
u
  521.7010 529.8339 m
  525.5282 529.8339 L
S
U
u
  527.9203 529.8339 m
  531.7475 529.8339 L
S
U
u
  534.1395 529.8339 m
  537.9668 529.8339 L
S
U
u
  540.3588 529.8339 m
  544.1860 529.8339 L
S
U
u
  546.5781 529.8339 m
  550.4053 529.8339 L
S
U
u
  552.7973 529.8339 m
  556.6246 529.8339 L
S
U
u
  559.0166 529.8339 m
  562.8439 529.8339 L
S
U
u
  565.2359 529.8339 m
  569.0631 529.8339 L
S
U
u
  571.4551 529.8339 m
  575.2824 529.8339 L
S
U
u
  577.6744 529.8339 m
  581.5017 529.8339 L
S
U
u
  583.8937 529.8339 m
  587.7209 529.8339 L
S
U
u
  590.1130 529.8339 m
  593.9402 529.8339 L
S
U
u
  596.3322 529.8339 m
  600.1595 529.8339 L
S
U
u
  602.5515 529.8339 m
  606.3787 529.8339 L
S
U
u
  608.7708 529.8339 m
  612.5980 529.8339 L
S
U
u
  614.9900 529.8339 m
  618.8173 529.8339 L
S
U
u
  621.2093 529.8339 m
  625.0365 529.8339 L
S
U
u
  627.4286 529.8339 m
  631.2558 529.8339 L
S
U
u
  633.6478 529.8339 m
  637.4751 529.8339 L
S
U
u
  639.8671 529.8339 m
  643.6944 529.8339 L
S
U
u
  646.0864 529.8339 m
  649.9136 529.8339 L
S
U
u
  652.3056 529.8339 m
  656.1329 529.8339 L
S
U
u
  658.5249 529.8339 m
  661.3953 529.8339 L
S
U
u
  656.8505 525.5282 m
  661.3953 529.8339 L
  656.8505 534.3787 L
S
U
u
  309.5282 486.5382 m
  309.5282 490.3654 L
S
U
u
  309.5282 492.7575 m
  309.5282 496.5847 L
S
U
u
  309.7674 498.7375 m
  313.5947 498.7375 L
S
U
u
  315.9867 498.7375 m
  319.8140 498.7375 L
S
U
u
  322.2060 498.7375 m
  326.0332 498.7375 L
S
U
u
  328.4252 498.7375 m
  332.2525 498.7375 L
S
U
u
  334.6445 498.7375 m
  338.4718 498.7375 L
S
U
u
  340.8638 498.7375 m
  344.6910 498.7375 L
S
U
u
  347.0831 498.7375 m
  350.9103 498.7375 L
S
U
u
  353.3023 498.7375 m
  357.1296 498.7375 L
S
U
u
  359.5216 498.7375 m
  363.3488 498.7375 L
S
U
u
  365.7409 498.7375 m
  369.5681 498.7375 L
S
U
u
  371.9601 498.7375 m
  375.7874 498.7375 L
S
U
u
  378.1794 498.7375 m
  382.0066 498.7375 L
S
U
u
  384.3987 498.7375 m
  388.2259 498.7375 L
S
U
u
  390.6179 498.7375 m
  394.4452 498.7375 L
S
U
u
  396.8372 498.7375 m
  400.6645 498.7375 L
S
U
u
  403.0565 498.7375 m
  406.8837 498.7375 L
S
U
u
  409.2757 498.7375 m
  413.1030 498.7375 L
S
U
u
  415.4950 498.7375 m
  419.3223 498.7375 L
S
U
u
  421.7143 498.7375 m
  425.5415 498.7375 L
S
U
u
  427.9336 498.7375 m
  430.8040 498.7375 L
S
U
u
  430.8040 498.7375 m
  431.0432 499.6944 L
S
U
u
  432.4784 501.3688 m
  433.9136 501.8472 L
S
U
u
  433.9136 501.8472 m
  435.3488 501.3688 L
S
U
u
  435.3488 501.3688 m
  436.0664 500.8904 L
S
U
u
  436.7841 498.7375 m
  440.6113 498.7375 L
S
U
u
  443.0033 498.7375 m
  446.8306 498.7375 L
S
U
u
  449.2226 498.7375 m
  453.0498 498.7375 L
S
U
u
  455.4419 498.7375 m
  459.2691 498.7375 L
S
U
u
  461.6611 498.7375 m
  465.4884 498.7375 L
S
U
u
  467.8804 498.7375 m
  471.7076 498.7375 L
S
U
u
  474.0997 498.7375 m
  477.9269 498.7375 L
S
U
u
  480.3189 498.7375 m
  484.1462 498.7375 L
S
U
u
  486.5382 498.7375 m
  490.3654 498.7375 L
S
U
u
  492.7575 498.7375 m
  496.5847 498.7375 L
S
U
u
  498.9767 498.7375 m
  502.8040 498.7375 L
S
U
u
  505.1960 498.7375 m
  509.0233 498.7375 L
S
U
u
  511.4153 498.7375 m
  515.2425 498.7375 L
S
U
u
  517.6346 498.7375 m
  521.4618 498.7375 L
S
U
u
  523.8538 498.7375 m
  527.6811 498.7375 L
S
U
u
  530.0731 498.7375 m
  533.9003 498.7375 L
S
U
u
  536.2924 498.7375 m
  540.1196 498.7375 L
S
U
u
  542.5116 498.7375 m
  546.3389 498.7375 L
S
U
u
  548.7309 498.7375 m
  552.5581 498.7375 L
S
U
u
  553.9934 500.1728 m
  553.9934 500.4120 L
S
U
u
  553.9934 500.4120 m
  554.9502 501.3688 L
S
U
u
  554.9502 501.3688 m
  556.6246 501.8472 L
S
U
u
  556.6246 501.8472 m
  557.1030 501.6080 L
S
U
u
  559.0166 500.4120 m
  559.4950 498.7375 L
S
U
u
  559.4950 498.7375 m
  561.6478 498.7375 L
S
U
u
  564.0399 498.7375 m
  567.8671 498.7375 L
S
U
u
  570.2591 498.7375 m
  574.0864 498.7375 L
S
U
u
  576.4784 498.7375 m
  580.3056 498.7375 L
S
U
u
  582.6977 498.7375 m
  586.5249 498.7375 L
S
U
u
  588.9169 498.7375 m
  592.7442 498.7375 L
S
U
u
  595.1362 498.7375 m
  598.9635 498.7375 L
S
U
u
  601.3555 498.7375 m
  605.1827 498.7375 L
S
U
u
  607.5748 498.7375 m
  611.4020 498.7375 L
S
U
u
  613.7940 498.7375 m
  617.6213 498.7375 L
S
U
u
  620.0133 498.7375 m
  623.8405 498.7375 L
S
U
u
  624.7973 497.3023 m
  624.7973 493.4751 L
S
U
u
  624.7973 491.0831 m
  624.7973 487.2558 L
S
U
u
  624.7973 484.8638 m
  624.7973 481.0365 L
S
U
u
  624.7973 478.6445 m
  624.7973 476.2525 L
S
U
u
  624.7973 476.2525 m
  626.2326 476.2525 L
S
U
u
  628.6246 476.2525 m
  632.4518 476.2525 L
S
U
u
  634.8439 476.2525 m
  638.6711 476.2525 L
S
U
u
  641.0631 476.2525 m
  644.8904 476.2525 L
S
U
u
  647.2824 476.2525 m
  651.1096 476.2525 L
S
U
u
  653.5017 476.2525 m
  657.3289 476.2525 L
S
U
u
  659.7209 476.2525 m
  662.8306 476.2525 L
S
U
u
  658.2857 471.7076 m
  662.8306 476.2525 L
  658.2857 480.5581 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  138.9767 234.1794 m
  193.7542 234.1794 L
  193.7542 246.6179 L
  138.9767 246.6179 L
  138.9767 234.1794 L
B
U
u
  0.000 0.000 0.000 0.000 k
  138.9767 246.6179 m
  193.7542 246.6179 L
  193.7542 259.2957 L
  138.9767 259.2957 L
  138.9767 246.6179 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  138.9767 259.2957 m
  193.7542 259.2957 L
  193.7542 275.5615 L
  138.9767 275.5615 L
  138.9767 259.2957 L
F
U
u
0.7500 w
  138.9767 259.2957 m
  193.7542 259.2957 L
  193.7542 275.5615 L
  138.9767 275.5615 L
  138.9767 259.2957 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 139.9336 263.8405 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(JMSServer\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  139.4551 287.7608 m
  193.2757 287.7608 L
  193.2757 300.1993 L
  139.4551 300.1993 L
  139.4551 287.7608 L
B
U
u
  0.000 0.000 0.000 0.000 k
  139.4551 300.1993 m
  193.2757 300.1993 L
  193.2757 312.8771 L
  139.4551 312.8771 L
  139.4551 300.1993 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  139.4551 312.8771 m
  193.2757 312.8771 L
  193.2757 329.1429 L
  139.4551 329.1429 L
  139.4551 312.8771 L
F
U
u
0.7500 w
  139.4551 312.8771 m
  193.2757 312.8771 L
  193.2757 329.1429 L
  139.4551 329.1429 L
  139.4551 312.8771 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 142.8040 317.4219 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(JiniServer\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  340.6246 476.2525 m
  344.4518 476.2525 L
S
U
u
  346.8439 476.2525 m
  350.6711 476.2525 L
S
U
u
  350.6711 478.6445 m
  350.6711 482.4718 L
S
U
u
  350.6711 484.8638 m
  350.6711 488.6910 L
S
U
u
  350.6711 491.0831 m
  350.6711 493.2359 L
S
U
u
  350.6711 493.2359 m
  352.3455 493.2359 L
S
U
u
  354.7375 493.2359 m
  358.5648 493.2359 L
S
U
u
  360.9568 493.2359 m
  364.7841 493.2359 L
S
U
u
  367.1761 493.2359 m
  371.0033 493.2359 L
S
U
u
  373.3953 493.2359 m
  377.2226 493.2359 L
S
U
u
  379.6146 493.2359 m
  383.4419 493.2359 L
S
U
u
  385.8339 493.2359 m
  389.6611 493.2359 L
S
U
u
  392.0532 493.2359 m
  395.8804 493.2359 L
S
U
u
  398.2724 493.2359 m
  402.0997 493.2359 L
S
U
u
  404.4917 493.2359 m
  408.3189 493.2359 L
S
U
u
  410.7110 493.2359 m
  414.5382 493.2359 L
S
U
u
  416.9302 493.2359 m
  420.7575 493.2359 L
S
U
u
  423.1495 493.2359 m
  426.9767 493.2359 L
S
U
u
  429.3688 493.2359 m
  430.8040 493.2359 L
S
U
u
  430.8040 493.2359 m
  431.2824 494.6711 L
S
U
u
  431.2824 494.6711 m
  432.0000 495.3887 L
S
U
u
  434.1528 496.1063 m
  435.3488 495.8671 L
S
U
u
  435.3488 495.8671 m
  436.5449 494.6711 L
S
U
u
  436.5449 494.6711 m
  436.7841 493.7143 L
S
U
u
  438.6977 493.2359 m
  442.5249 493.2359 L
S
U
u
  444.9169 493.2359 m
  448.7442 493.2359 L
S
U
u
  451.1362 493.2359 m
  454.9635 493.2359 L
S
U
u
  457.3555 493.2359 m
  461.1827 493.2359 L
S
U
u
  463.5748 493.2359 m
  467.4020 493.2359 L
S
U
u
  469.7940 493.2359 m
  473.6213 493.2359 L
S
U
u
  476.0133 493.2359 m
  479.8405 493.2359 L
S
U
u
  482.2326 493.2359 m
  486.0598 493.2359 L
S
U
u
  488.4518 493.2359 m
  490.8439 493.2359 L
S
U
u
  490.8439 493.2359 m
  490.8439 491.8007 L
S
U
u
  490.8439 489.4086 m
  490.8439 485.5814 L
S
U
u
  490.8439 483.1894 m
  490.8439 479.3621 L
S
U
u
  490.8439 476.9701 m
  490.8439 476.2525 L
S
U
u
  490.8439 476.2525 m
  493.9535 476.2525 L
S
U
u
  496.3455 476.2525 m
  500.1728 476.2525 L
S
U
u
  502.5648 476.2525 m
  504.2392 476.2525 L
S
U
u
  499.6944 471.7076 m
  504.2392 476.2525 L
  499.6944 480.5581 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 681.7276 272.4518 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  696.7973 282.2591 m
  696.7973 254.0332 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.7500 w
  693.2093 288.0000 m
  696.7973 293.5017 L
  700.3854 288.0000 L
  696.7973 282.2591 L
  693.2093 288.0000 L
B
U
u
  701.5814 262.8837 m
  696.7973 254.0332 L
S
U
u
  692.0133 262.8837 m
  696.7973 254.0332 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 680.7708 347.5615 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  696.7973 356.1728 m
  696.7973 334.8837 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.7500 w
  693.2093 361.9136 m
  696.7973 367.4153 L
  700.3854 361.9136 L
  696.7973 356.1728 L
  693.2093 361.9136 L
B
U
u
  701.5814 343.9734 m
  696.7973 334.8837 L
S
U
u
  692.0133 343.9734 m
  696.7973 334.8837 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 680.7708 425.0631 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  696.7973 433.9136 m
  696.7973 408.7973 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.7500 w
  693.2093 439.4153 m
  696.7973 445.1561 L
  700.3854 439.4153 L
  696.7973 433.9136 L
  693.2093 439.4153 L
B
U
u
  701.5814 417.8870 m
  696.7973 408.7973 L
S
U
u
  692.0133 417.8870 m
  696.7973 408.7973 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 643.9336 236.0930 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 591.0698 191.6013 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  650.3920 222.9369 m
  606.1395 222.9369 L
  606.1395 175.8140 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  656.1329 226.2857 m
  661.6346 222.9369 L
  656.1329 219.5880 L
  650.3920 222.9369 L
  656.1329 226.2857 L
B
U
u
  610.9236 184.6645 m
  606.1395 175.8140 L
S
U
u
  601.3555 184.6645 m
  606.1395 175.8140 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 663.3090 191.8405 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  679.3355 201.1694 m
  679.3355 193.7542 L
  662.5914 193.7542 L
  662.5914 175.8140 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  675.7475 206.9103 m
  679.3355 212.4120 L
  682.6844 206.9103 L
  679.3355 201.1694 L
  675.7475 206.9103 L
B
U
u
  667.3754 184.6645 m
  662.5914 175.8140 L
S
U
u
  658.0465 184.6645 m
  662.5914 175.8140 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 698.4718 192.0797 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  714.2591 201.1694 m
  714.2591 193.7542 L
  723.3488 193.7542 L
  723.3488 175.8140 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  710.9103 206.9103 m
  714.2591 212.4120 L
  717.6080 206.9103 L
  714.2591 201.1694 L
  710.9103 206.9103 L
B
U
u
  728.1329 184.6645 m
  723.3488 175.8140 L
S
U
u
  718.5648 184.6645 m
  723.3488 175.8140 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 743.4419 202.6047 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 766.4053 191.3621 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  742.9635 222.9369 m
  781.4751 222.9369 L
  781.4751 175.8140 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  737.4618 219.5880 m
  731.7209 222.9369 L
  737.4618 226.2857 L
  742.9635 222.9369 L
  737.4618 219.5880 L
B
U
u
  786.2591 184.6645 m
  781.4751 175.8140 L
S
U
u
  776.9302 184.6645 m
  781.4751 175.8140 L
S
U
u
0.5000 w
  411.6678 436.0664 m
  411.6678 332.0133 L
  396.5980 332.0133 L
  396.5980 298.2857 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  406.1661 436.0664 m
  417.4086 436.0664 L
  411.6678 445.1561 L
  406.1661 436.0664 L
B
U
u
0.5000 w
  278.6711 308.0930 m
  278.6711 298.2857 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  273.1694 308.0930 m
  284.4120 308.0930 L
  278.6711 316.9435 L
  273.1694 308.0930 L
B
U
u
0.5000 w
  436.7841 143.7608 m
  337.9934 143.7608 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  436.7841 149.2625 m
  436.7841 138.2591 L
  445.6346 143.7608 L
  436.7841 149.2625 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 346.8439 131.3223 0 Tp
TP
/_Times-Roman 9.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(<<implements>>\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  579.3488 134.4319 m
  633.1694 134.4319 L
  633.1694 146.8704 L
  579.3488 146.8704 L
  579.3488 134.4319 L
B
U
u
  0.000 0.000 0.000 0.000 k
  579.3488 146.8704 m
  633.1694 146.8704 L
  633.1694 159.5482 L
  579.3488 159.5482 L
  579.3488 146.8704 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  579.3488 159.5482 m
  633.1694 159.5482 L
  633.1694 175.8140 L
  579.3488 175.8140 L
  579.3488 159.5482 L
F
U
u
0.7500 w
  579.3488 159.5482 m
  633.1694 159.5482 L
  633.1694 175.8140 L
  579.3488 175.8140 L
  579.3488 159.5482 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 581.5017 164.0930 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Subjective\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  635.8007 134.4319 m
  689.6213 134.4319 L
  689.6213 146.8704 L
  635.8007 146.8704 L
  635.8007 134.4319 L
B
U
u
  0.000 0.000 0.000 0.000 k
  635.8007 146.8704 m
  689.6213 146.8704 L
  689.6213 159.5482 L
  635.8007 159.5482 L
  635.8007 146.8704 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  635.8007 159.5482 m
  689.6213 159.5482 L
  689.6213 175.8140 L
  635.8007 175.8140 L
  635.8007 159.5482 L
F
U
u
0.7500 w
  635.8007 159.5482 m
  689.6213 159.5482 L
  689.6213 175.8140 L
  635.8007 175.8140 L
  635.8007 159.5482 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 640.1063 164.0930 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Objective\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  694.6445 134.4319 m
  752.0532 134.4319 L
  752.0532 146.8704 L
  694.6445 146.8704 L
  694.6445 134.4319 L
B
U
u
  0.000 0.000 0.000 0.000 k
  694.6445 146.8704 m
  752.0532 146.8704 L
  752.0532 159.5482 L
  694.6445 159.5482 L
  694.6445 146.8704 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  694.6445 159.5482 m
  752.0532 159.5482 L
  752.0532 175.8140 L
  694.6445 175.8140 L
  694.6445 159.5482 L
F
U
u
0.7500 w
  694.6445 159.5482 m
  752.0532 159.5482 L
  752.0532 175.8140 L
  694.6445 175.8140 L
  694.6445 159.5482 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 695.6013 164.0930 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Assessment\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  754.6844 134.4319 m
  808.5050 134.4319 L
  808.5050 146.8704 L
  754.6844 146.8704 L
  754.6844 134.4319 L
B
U
u
  0.000 0.000 0.000 0.000 k
  754.6844 146.8704 m
  808.5050 146.8704 L
  808.5050 159.5482 L
  754.6844 159.5482 L
  754.6844 146.8704 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  754.6844 159.5482 m
  808.5050 159.5482 L
  808.5050 175.8140 L
  754.6844 175.8140 L
  754.6844 159.5482 L
F
U
u
0.7500 w
  754.6844 159.5482 m
  808.5050 159.5482 L
  808.5050 175.8140 L
  754.6844 175.8140 L
  754.6844 159.5482 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 771.1894 164.0930 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Plan\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  252.1196 122.9502 m
  337.9934 122.9502 L
  337.9934 135.6279 L
  252.1196 135.6279 L
  252.1196 122.9502 L
B
U
u
  0.000 0.000 0.000 0.000 k
  252.1196 135.6279 m
  337.9934 135.6279 L
  337.9934 148.0664 L
  252.1196 148.0664 L
  252.1196 135.6279 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  252.1196 148.0664 m
  337.9934 148.0664 L
  337.9934 164.5714 L
  252.1196 164.5714 L
  252.1196 148.0664 L
F
U
u
0.7500 w
  252.1196 148.0664 m
  337.9934 148.0664 L
  337.9934 164.5714 L
  252.1196 164.5714 L
  252.1196 148.0664 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 253.0764 152.8505 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIServicesImpl\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  295.1761 181.7940 m
  295.1761 164.5714 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  289.4352 181.7940 m
  300.6777 181.7940 L
  295.1761 190.6445 L
  289.4352 181.7940 L
B
U
u
0.5000 w
  193.9934 143.7608 m
  197.8206 143.7608 L
S
U
u
  200.2126 143.7608 m
  204.0399 143.7608 L
S
U
u
  206.4319 143.7608 m
  210.2591 143.7608 L
S
U
u
  212.6512 143.7608 m
  216.4784 143.7608 L
S
U
u
  218.8704 143.7608 m
  222.6977 143.7608 L
S
U
u
  225.0897 143.7608 m
  228.9169 143.7608 L
S
U
u
  231.3090 143.7608 m
  235.1362 143.7608 L
S
U
u
  237.5282 143.7608 m
  241.3555 143.7608 L
S
U
u
  243.7475 143.7608 m
  247.5748 143.7608 L
S
U
u
  249.9668 143.7608 m
  252.1196 143.7608 L
S
U
u
  247.8140 139.4551 m
  252.1196 143.7608 L
  247.8140 148.3056 L
S
U
u
  337.9934 154.0465 m
  341.8206 154.0465 L
S
U
u
  344.2126 154.0465 m
  348.0399 154.0465 L
S
U
u
  350.4319 154.0465 m
  354.2591 154.0465 L
S
U
u
  356.6512 154.0465 m
  360.4784 154.0465 L
S
U
u
  362.8704 154.0465 m
  366.6977 154.0465 L
S
U
u
  369.0897 154.0465 m
  372.9169 154.0465 L
S
U
u
  375.3090 154.0465 m
  379.1362 154.0465 L
S
U
u
  381.5282 154.0465 m
  385.3555 154.0465 L
S
U
u
  387.7475 154.0465 m
  391.5748 154.0465 L
S
U
u
  393.9668 154.0465 m
  396.5980 154.0465 L
S
U
u
  396.5980 154.0465 m
  396.5980 155.2425 L
S
U
u
  396.5980 157.6346 m
  396.5980 161.4618 L
S
U
u
  396.5980 163.8538 m
  396.5980 167.6811 L
S
U
u
  396.5980 170.0731 m
  396.5980 173.9003 L
S
U
u
  396.5980 176.2924 m
  396.5980 180.1196 L
S
U
u
  396.5980 182.5116 m
  396.5980 186.3389 L
S
U
u
  396.5980 188.7309 m
  396.5980 192.5581 L
S
U
u
  396.5980 194.9502 m
  396.5980 198.7774 L
S
U
u
  396.5980 201.1694 m
  396.5980 204.9967 L
S
U
u
  396.5980 207.3887 m
  396.5980 211.2159 L
S
U
u
  396.5980 213.6080 m
  396.5980 217.4352 L
S
U
u
  396.5980 219.8272 m
  396.5980 223.6545 L
S
U
u
  396.5980 226.0465 m
  396.5980 229.8738 L
S
U
u
  396.5980 232.2658 m
  396.5980 236.0930 L
S
U
u
  396.5980 238.4850 m
  396.5980 242.3123 L
S
U
u
  396.5980 244.7043 m
  396.5980 248.5316 L
S
U
u
  396.5980 250.9236 m
  396.5980 254.7508 L
S
U
u
  401.1429 252.3588 m
  396.5980 256.9037 L
  392.2924 252.3588 L
S
U
u
  309.5282 436.0664 m
  309.5282 430.0864 L
  327.4684 430.0864 L
  327.4684 408.7973 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  304.0266 436.0664 m
  315.2691 436.0664 L
  309.5282 445.1561 L
  304.0266 436.0664 L
B
U
u
  0.000 0.000 0.000 0.000 k
  139.4551 367.4153 m
  193.2757 367.4153 L
  193.2757 380.0930 L
  139.4551 380.0930 L
  139.4551 367.4153 L
B
U
u
  0.000 0.000 0.000 0.000 k
  139.4551 380.0930 m
  193.2757 380.0930 L
  193.2757 392.5316 L
  139.4551 392.5316 L
  139.4551 380.0930 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  139.4551 392.5316 m
  193.2757 392.5316 L
  193.2757 408.7973 L
  139.4551 408.7973 L
  139.4551 392.5316 L
F
U
u
0.7500 w
  139.4551 392.5316 m
  193.2757 392.5316 L
  193.2757 408.7973 L
  139.4551 408.7973 L
  139.4551 392.5316 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 150.6977 397.0764 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Server\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  38.9900 367.4153 m
  92.8106 367.4153 L
  92.8106 380.0930 L
  38.9900 380.0930 L
  38.9900 367.4153 L
B
U
u
  0.000 0.000 0.000 0.000 k
  38.9900 380.0930 m
  92.8106 380.0930 L
  92.8106 392.5316 L
  38.9900 392.5316 L
  38.9900 380.0930 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  38.9900 392.5316 m
  92.8106 392.5316 L
  92.8106 408.7973 L
  38.9900 408.7973 L
  38.9900 392.5316 L
F
U
u
0.7500 w
  38.9900 392.5316 m
  92.8106 392.5316 L
  92.8106 408.7973 L
  38.9900 408.7973 L
  38.9900 392.5316 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 51.9070 397.0764 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Client\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  216.4784 465.7276 m
  212.6512 465.7276 L
S
U
u
  210.2591 465.7276 m
  206.4319 465.7276 L
S
U
u
  204.0399 465.7276 m
  200.2126 465.7276 L
S
U
u
  197.8206 465.7276 m
  193.9934 465.7276 L
S
U
u
  191.6013 465.7276 m
  187.7741 465.7276 L
S
U
u
  185.3821 465.7276 m
  181.5548 465.7276 L
S
U
u
  179.1628 465.7276 m
  175.3355 465.7276 L
S
U
u
  172.9435 465.7276 m
  169.1163 465.7276 L
S
U
u
  166.7243 465.7276 m
  162.8970 465.7276 L
S
U
u
  160.5050 465.7276 m
  156.6777 465.7276 L
S
U
u
  154.2857 465.7276 m
  150.4585 465.7276 L
S
U
u
  148.0664 465.7276 m
  144.2392 465.7276 L
S
U
u
  141.8472 465.7276 m
  138.0199 465.7276 L
S
U
u
  135.6279 465.7276 m
  131.8007 465.7276 L
S
U
u
  129.4086 465.7276 m
  125.5814 465.7276 L
S
U
u
  123.1894 465.7276 m
  119.3621 465.7276 L
S
U
u
  116.9701 465.7276 m
  113.1429 465.7276 L
S
U
u
  110.7508 465.7276 m
  106.9236 465.7276 L
S
U
u
  104.5316 465.7276 m
  100.7043 465.7276 L
S
U
u
  98.3123 465.7276 m
  94.4850 465.7276 L
S
U
u
  92.0930 465.7276 m
  88.2658 465.7276 L
S
U
u
  85.8738 465.7276 m
  82.0465 465.7276 L
S
U
u
  79.6545 465.7276 m
  75.8272 465.7276 L
S
U
u
  73.4352 465.7276 m
  69.6080 465.7276 L
S
U
u
  67.2159 465.7276 m
  66.0199 465.7276 L
S
U
u
  66.0199 465.7276 m
  66.0199 463.0963 L
S
U
u
  66.0199 460.7043 m
  66.0199 456.8771 L
S
U
u
  66.0199 454.4850 m
  66.0199 450.6578 L
S
U
u
  66.0199 448.2658 m
  66.0199 444.4385 L
S
U
u
  66.0199 442.0465 m
  66.0199 438.2193 L
S
U
u
  66.0199 435.8272 m
  66.0199 432.0000 L
S
U
u
  66.0199 429.6080 m
  66.0199 425.7807 L
S
U
u
  66.0199 423.3887 m
  66.0199 419.5615 L
S
U
u
  66.0199 417.1694 m
  66.0199 413.3422 L
S
U
u
  66.0199 410.9502 m
  66.0199 408.7973 L
S
U
u
  61.4751 413.3422 m
  66.0199 408.7973 L
  70.3256 413.3422 L
S
U
u
  216.4784 455.4419 m
  212.6512 455.4419 L
S
U
u
  210.2591 455.4419 m
  206.4319 455.4419 L
S
U
u
  204.0399 455.4419 m
  200.2126 455.4419 L
S
U
u
  197.8206 455.4419 m
  193.9934 455.4419 L
S
U
u
  191.6013 455.4419 m
  187.7741 455.4419 L
S
U
u
  185.3821 455.4419 m
  181.5548 455.4419 L
S
U
u
  179.1628 455.4419 m
  175.3355 455.4419 L
S
U
u
  172.9435 455.4419 m
  169.1163 455.4419 L
S
U
u
  166.7243 455.4419 m
  166.2458 455.4419 L
S
U
u
  166.2458 455.4419 m
  166.2458 452.0930 L
S
U
u
  166.2458 449.7010 m
  166.2458 445.8738 L
S
U
u
  166.2458 443.4817 m
  166.2458 439.6545 L
S
U
u
  166.2458 437.2625 m
  166.2458 433.4352 L
S
U
u
  166.2458 431.0432 m
  166.2458 427.2159 L
S
U
u
  166.2458 424.8239 m
  166.2458 420.9967 L
S
U
u
  166.2458 418.6047 m
  166.2458 414.7774 L
S
U
u
  166.2458 412.3854 m
  166.2458 408.7973 L
S
U
u
  161.9402 413.3422 m
  166.2458 408.7973 L
  170.7907 413.3422 L
S
U
u
  582.6977 436.0664 m
  582.6977 431.5216 L
  604.4651 431.5216 L
  604.4651 408.7973 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  576.9568 436.0664 m
  588.1993 436.0664 L
  582.6977 445.1561 L
  576.9568 436.0664 L
B
U
u
0.5000 w
  530.3123 436.0664 m
  530.3123 431.5216 L
  512.3721 431.5216 L
  512.3721 408.7973 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  524.8106 436.0664 m
  536.0532 436.0664 L
  530.3123 445.1561 L
  524.8106 436.0664 L
B
U
u
0.5000 w
  278.4319 436.0664 m
  278.4319 431.5216 L
  256.6645 431.5216 L
  256.6645 408.7973 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  272.9302 436.0664 m
  284.1728 436.0664 L
  278.4319 445.1561 L
  272.9302 436.0664 L
B
U
u
  0.000 0.000 0.000 0.000 k
  39.9468 122.9502 m
  93.7674 122.9502 L
  93.7674 135.6279 L
  39.9468 135.6279 L
  39.9468 122.9502 L
B
U
u
  0.000 0.000 0.000 0.000 k
  39.9468 135.6279 m
  93.7674 135.6279 L
  93.7674 148.0664 L
  39.9468 148.0664 L
  39.9468 135.6279 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  39.9468 148.0664 m
  93.7674 148.0664 L
  93.7674 164.5714 L
  39.9468 164.5714 L
  39.9468 148.0664 L
F
U
u
0.7500 w
  39.9468 148.0664 m
  93.7674 148.0664 L
  93.7674 164.5714 L
  39.9468 164.5714 L
  39.9468 148.0664 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 41.3821 152.8505 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIClient\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  31.3355 178.6844 m
  102.1395 178.6844 L
  102.1395 191.1229 L
  31.3355 191.1229 L
  31.3355 178.6844 L
B
U
u
  0.000 0.000 0.000 0.000 k
  31.3355 191.1229 m
  102.1395 191.1229 L
  102.1395 203.8007 L
  31.3355 203.8007 L
  31.3355 191.1229 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  31.3355 203.8007 m
  102.1395 203.8007 L
  102.1395 220.0664 L
  31.3355 220.0664 L
  31.3355 203.8007 L
F
U
u
0.7500 w
  31.3355 203.8007 m
  102.1395 203.8007 L
  102.1395 220.0664 L
  31.3355 220.0664 L
  31.3355 203.8007 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 32.2924 208.3455 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(CORBAClient\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  39.9468 235.1362 m
  93.7674 235.1362 L
  93.7674 247.8140 L
  39.9468 247.8140 L
  39.9468 235.1362 L
B
U
u
  0.000 0.000 0.000 0.000 k
  39.9468 247.8140 m
  93.7674 247.8140 L
  93.7674 260.2525 L
  39.9468 260.2525 L
  39.9468 247.8140 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  39.9468 260.2525 m
  93.7674 260.2525 L
  93.7674 276.5183 L
  39.9468 276.5183 L
  39.9468 260.2525 L
F
U
u
0.7500 w
  39.9468 260.2525 m
  93.7674 260.2525 L
  93.7674 276.5183 L
  39.9468 276.5183 L
  39.9468 260.2525 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 41.6213 264.7973 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(JMSClient\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  39.9468 284.8904 m
  93.7674 284.8904 L
  93.7674 301.3953 L
  39.9468 301.3953 L
  39.9468 284.8904 L
B
U
u
  0.000 0.000 0.000 0.000 k
  39.9468 301.3953 m
  93.7674 301.3953 L
  93.7674 317.6611 L
  39.9468 317.6611 L
  39.9468 301.3953 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  39.9468 317.6611 m
  93.7674 317.6611 L
  93.7674 333.9269 L
  39.9468 333.9269 L
  39.9468 317.6611 L
F
U
u
0.7500 w
  39.9468 317.6611 m
  93.7674 317.6611 L
  93.7674 333.9269 L
  39.9468 333.9269 L
  39.9468 317.6611 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 44.4917 322.2060 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(JiniClient\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  30.1395 388.2259 m
  17.2226 388.2259 L
  17.2226 199.2558 L
  31.3355 199.2558 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  30.1395 393.7276 m
  30.1395 382.4850 L
  38.9900 388.2259 L
  30.1395 393.7276 L
B
U
u
0.5000 w
  66.0199 358.3256 m
  66.0199 354.0199 L
  66.7375 354.0199 L
  66.7375 333.9269 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  60.2791 358.3256 m
  71.5216 358.3256 L
  66.0199 367.4153 L
  60.2791 358.3256 L
B
U
u
0.5000 w
  30.1395 398.5116 m
  11.4817 398.5116 L
  11.4817 143.7608 L
  39.9468 143.7608 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  30.1395 404.0133 m
  30.1395 393.0100 L
  38.9900 398.5116 L
  30.1395 404.0133 L
B
U
u
0.5000 w
  30.1395 377.7010 m
  22.9635 377.7010 L
  22.9635 255.9468 L
  39.9468 255.9468 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  30.1395 383.4419 m
  30.1395 372.1993 L
  38.9900 377.7010 L
  30.1395 383.4419 L
B
U
u
0.5000 w
  166.2458 358.3256 m
  166.2458 329.1429 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  160.7442 358.3256 m
  171.9867 358.3256 L
  166.2458 367.4153 L
  160.7442 358.3256 L
B
U
u
0.5000 w
  130.3654 377.7010 m
  125.5814 377.7010 L
  125.5814 254.9900 L
  138.9767 254.9900 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  130.3654 383.4419 m
  130.3654 372.1993 L
  139.4551 377.7010 L
  130.3654 383.4419 L
B
U
u
0.5000 w
  130.3654 388.2259 m
  119.1229 388.2259 L
  119.1229 198.2990 L
  135.1495 198.2990 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  130.3654 393.7276 m
  130.3654 382.4850 L
  139.4551 388.2259 L
  130.3654 393.7276 L
B
U
u
0.5000 w
  130.3654 398.5116 m
  110.7508 398.5116 L
  110.7508 143.7608 L
  138.4983 143.7608 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  130.3654 404.0133 m
  130.3654 393.0100 L
  139.4551 398.5116 L
  130.3654 404.0133 L
B
U
u
  0.000 0.000 0.000 0.000 k
  537.4884 76.3056 m
  609.7276 76.3056 L
  609.7276 92.8106 L
  537.4884 92.8106 L
  537.4884 76.3056 L
B
U
u
  0.000 0.000 0.000 0.000 k
  537.4884 92.8106 m
  609.7276 92.8106 L
  609.7276 109.0764 L
  537.4884 109.0764 L
  537.4884 92.8106 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  537.4884 109.0764 m
  609.7276 109.0764 L
  609.7276 125.3422 L
  537.4884 125.3422 L
  537.4884 109.0764 L
F
U
u
0.7500 w
  537.4884 109.0764 m
  609.7276 109.0764 L
  609.7276 125.3422 L
  537.4884 125.3422 L
  537.4884 109.0764 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 538.4452 113.6213 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(SQLStatement\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  451.1362 1.9136 m
  504.9568 1.9136 L
  504.9568 18.4186 L
  451.1362 18.4186 L
  451.1362 1.9136 L
B
U
u
  0.000 0.000 0.000 0.000 k
  451.1362 18.4186 m
  504.9568 18.4186 L
  504.9568 34.6844 L
  451.1362 34.6844 L
  451.1362 18.4186 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  451.1362 34.6844 m
  504.9568 34.6844 L
  504.9568 50.9502 L
  451.1362 50.9502 L
  451.1362 34.6844 L
F
U
u
0.7500 w
  451.1362 34.6844 m
  504.9568 34.6844 L
  504.9568 50.9502 L
  451.1362 50.9502 L
  451.1362 34.6844 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 456.1595 39.2292 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(SQLFind\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  665.7010 1.9136 m
  729.3289 1.9136 L
  729.3289 18.4186 L
  665.7010 18.4186 L
  665.7010 1.9136 L
B
U
u
  0.000 0.000 0.000 0.000 k
  665.7010 18.4186 m
  729.3289 18.4186 L
  729.3289 34.6844 L
  665.7010 34.6844 L
  665.7010 18.4186 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  665.7010 34.6844 m
  729.3289 34.6844 L
  729.3289 50.9502 L
  665.7010 50.9502 L
  665.7010 34.6844 L
F
U
u
0.7500 w
  665.7010 34.6844 m
  729.3289 34.6844 L
  729.3289 50.9502 L
  665.7010 50.9502 L
  665.7010 34.6844 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 666.6578 39.2292 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(SQLRemove\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  572.1728 1.9136 m
  658.5249 1.9136 L
  658.5249 18.4186 L
  572.1728 18.4186 L
  572.1728 1.9136 L
B
U
u
  0.000 0.000 0.000 0.000 k
  572.1728 18.4186 m
  658.5249 18.4186 L
  658.5249 34.6844 L
  572.1728 34.6844 L
  572.1728 18.4186 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  572.1728 34.6844 m
  658.5249 34.6844 L
  658.5249 50.9502 L
  572.1728 50.9502 L
  572.1728 34.6844 L
F
U
u
0.7500 w
  572.1728 34.6844 m
  658.5249 34.6844 L
  658.5249 50.9502 L
  572.1728 50.9502 L
  572.1728 34.6844 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 573.1296 39.2292 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(SQLInsertUpdate\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  509.2625 1.9136 m
  564.9967 1.9136 L
  564.9967 18.4186 L
  509.2625 18.4186 L
  509.2625 1.9136 L
B
U
u
  0.000 0.000 0.000 0.000 k
  509.2625 18.4186 m
  564.9967 18.4186 L
  564.9967 34.6844 L
  509.2625 34.6844 L
  509.2625 18.4186 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  509.2625 34.6844 m
  564.9967 34.6844 L
  564.9967 50.9502 L
  509.2625 50.9502 L
  509.2625 34.6844 L
F
U
u
0.7500 w
  509.2625 34.6844 m
  564.9967 34.6844 L
  564.9967 50.9502 L
  509.2625 50.9502 L
  509.2625 34.6844 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 510.2193 39.2292 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(SQLCreate\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  618.5781 88.5050 m
  697.5150 88.5050 L
  697.5150 50.9502 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  618.5781 83.0033 m
  618.5781 94.2458 L
  609.7276 88.5050 L
  618.5781 83.0033 L
B
U
u
0.5000 w
  591.5482 67.4551 m
  591.5482 62.9103 L
  615.2292 62.9103 L
  615.2292 50.9502 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  586.0465 67.4551 m
  597.2890 67.4551 L
  591.5482 76.3056 L
  586.0465 67.4551 L
B
U
u
0.5000 w
  555.4286 67.4551 m
  555.4286 62.9103 L
  537.2492 62.9103 L
  537.2492 50.9502 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  549.9269 67.4551 m
  561.1694 67.4551 L
  555.4286 76.3056 L
  549.9269 67.4551 L
B
U
u
0.5000 w
  528.3987 88.5050 m
  477.9269 88.5050 L
  477.9269 50.9502 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  528.3987 94.2458 m
  528.3987 83.0033 L
  537.4884 88.5050 L
  528.3987 94.2458 L
B
U
u
0.5000 w
  587.7209 367.4153 m
  587.7209 363.5880 L
S
U
u
  587.7209 361.1960 m
  587.7209 357.3688 L
S
U
u
  587.7209 354.9767 m
  587.7209 351.1495 L
S
U
u
  587.7209 348.7575 m
  587.7209 344.9302 L
S
U
u
  587.7209 342.5382 m
  587.7209 338.7110 L
S
U
u
  587.7209 336.3189 m
  587.7209 332.4917 L
S
U
u
  585.8073 332.0133 m
  581.9801 332.0133 L
S
U
u
  579.5880 332.0133 m
  575.7608 332.0133 L
S
U
u
  573.3688 332.0133 m
  569.5415 332.0133 L
S
U
u
  567.1495 332.0133 m
  563.3223 332.0133 L
S
U
u
  560.9302 332.0133 m
  557.1030 332.0133 L
S
U
u
  555.4286 331.2957 m
  555.4286 327.4684 L
S
U
u
  555.4286 325.0764 m
  555.4286 321.2492 L
S
U
u
  555.4286 318.8571 m
  555.4286 315.0299 L
S
U
u
  555.4286 312.6379 m
  555.4286 308.8106 L
S
U
u
  555.4286 306.4186 m
  555.4286 302.5914 L
S
U
u
  555.4286 300.1993 m
  555.4286 296.3721 L
S
U
u
  555.4286 293.9801 m
  555.4286 290.1528 L
S
U
u
  555.4286 287.7608 m
  555.4286 283.9336 L
S
U
u
  555.4286 281.5415 m
  555.4286 277.7143 L
S
U
u
  555.4286 275.3223 m
  555.4286 271.4950 L
S
U
u
  555.4286 269.1030 m
  555.4286 265.2757 L
S
U
u
  555.4286 262.8837 m
  555.4286 259.0565 L
S
U
u
  555.4286 256.6645 m
  555.4286 252.8372 L
S
U
u
  555.4286 250.4452 m
  555.4286 246.6179 L
S
U
u
  555.4286 244.2259 m
  555.4286 240.3987 L
S
U
u
  555.4286 238.0066 m
  555.4286 234.1794 L
S
U
u
  555.4286 231.7874 m
  555.4286 227.9601 L
S
U
u
  555.4286 225.5681 m
  555.4286 221.7409 L
S
U
u
  555.4286 219.3488 m
  555.4286 215.5216 L
S
U
u
  555.4286 213.1296 m
  555.4286 209.3023 L
S
U
u
  555.4286 206.9103 m
  555.4286 203.0831 L
S
U
u
  555.4286 200.6910 m
  555.4286 196.8638 L
S
U
u
  555.4286 194.4718 m
  555.4286 190.6445 L
S
U
u
  555.4286 188.2525 m
  555.4286 184.4252 L
S
U
u
  555.4286 182.0332 m
  555.4286 178.2060 L
S
U
u
  555.4286 175.8140 m
  555.4286 171.9867 L
S
U
u
  555.4286 169.5947 m
  555.4286 165.7674 L
S
U
u
  555.4286 163.3754 m
  555.4286 159.5482 L
S
U
u
  555.4286 157.1561 m
  555.4286 153.3289 L
S
U
u
  555.4286 150.9369 m
  555.4286 147.1096 L
S
U
u
  555.4286 144.7176 m
  555.4286 140.8904 L
S
U
u
  555.4286 138.4983 m
  555.4286 134.6711 L
S
U
u
  555.4286 132.2791 m
  555.4286 128.4518 L
S
U
u
  555.4286 126.0598 m
  555.4286 125.3422 L
S
U
u
  551.1229 129.8870 m
  555.4286 125.3422 L
  559.9734 129.8870 L
S
U
u
  179.8804 408.7973 m
  179.8804 412.6246 L
S
U
u
  179.8804 415.0166 m
  179.8804 416.9302 L
S
U
u
  179.8804 416.9302 m
  181.7940 416.9302 L
S
U
u
  184.1860 416.9302 m
  188.0133 416.9302 L
S
U
u
  190.4053 416.9302 m
  194.2326 416.9302 L
S
U
u
  196.6246 416.9302 m
  200.4518 416.9302 L
S
U
u
  202.8439 416.9302 m
  206.6711 416.9302 L
S
U
u
  209.0631 416.9302 m
  212.8904 416.9302 L
S
U
u
  215.2824 416.9302 m
  219.1096 416.9302 L
S
U
u
  221.5017 416.9302 m
  225.3289 416.9302 L
S
U
u
  227.7209 416.9302 m
  231.5482 416.9302 L
S
U
u
  233.9402 416.9302 m
  237.7674 416.9302 L
S
U
u
  240.1595 416.9302 m
  243.9867 416.9302 L
S
U
u
  246.3787 416.9302 m
  250.2060 416.9302 L
S
U
u
  252.5980 416.9302 m
  253.7940 416.9302 L
S
U
u
  253.7940 416.9302 m
  254.2724 418.3654 L
S
U
u
  254.2724 418.3654 m
  254.9900 419.3223 L
S
U
u
  257.1429 419.8007 m
  258.3389 419.5615 L
S
U
u
  258.3389 419.5615 m
  259.2957 418.3654 L
S
U
u
  259.2957 418.3654 m
  259.5349 417.4086 L
S
U
u
  261.6877 416.9302 m
  265.5150 416.9302 L
S
U
u
  267.9070 416.9302 m
  271.7342 416.9302 L
S
U
u
  274.1262 416.9302 m
  277.9535 416.9302 L
S
U
u
  280.3455 416.9302 m
  284.1728 416.9302 L
S
U
u
  286.5648 416.9302 m
  290.3920 416.9302 L
S
U
u
  292.7841 416.9302 m
  296.6113 416.9302 L
S
U
u
  299.0033 416.9302 m
  302.8306 416.9302 L
S
U
u
  305.2226 416.9302 m
  309.0498 416.9302 L
S
U
u
  311.4419 416.9302 m
  315.2691 416.9302 L
S
U
u
  317.6611 416.9302 m
  321.4884 416.9302 L
S
U
u
  323.8804 416.9302 m
  324.3588 416.9302 L
S
U
u
  324.3588 416.9302 m
  324.8372 418.3654 L
S
U
u
  324.8372 418.3654 m
  325.7940 419.5615 L
S
U
u
  325.7940 419.5615 m
  326.0332 419.5615 L
S
U
u
  328.4252 419.5615 m
  328.9037 419.5615 L
S
U
u
  328.9037 419.5615 m
  330.0997 418.3654 L
S
U
u
  330.0997 418.3654 m
  330.3389 416.9302 L
S
U
u
  330.3389 416.9302 m
  330.5781 416.9302 L
S
U
u
  332.9701 416.9302 m
  336.7973 416.9302 L
S
U
u
  339.1894 416.9302 m
  343.0166 416.9302 L
S
U
u
  345.4086 416.9302 m
  349.2359 416.9302 L
S
U
u
  351.6279 416.9302 m
  355.4551 416.9302 L
S
U
u
  357.8472 416.9302 m
  361.6744 416.9302 L
S
U
u
  364.0664 416.9302 m
  367.8937 416.9302 L
S
U
u
  370.2857 416.9302 m
  374.1130 416.9302 L
S
U
u
  376.5050 416.9302 m
  378.8970 416.9302 L
S
U
u
  378.8970 416.9302 m
  378.8970 418.3654 L
S
U
u
  378.8970 420.7575 m
  378.8970 424.5847 L
S
U
u
  378.8970 426.9767 m
  378.8970 430.8040 L
S
U
u
  378.8970 433.1960 m
  378.8970 437.0233 L
S
U
u
  378.8970 439.4153 m
  378.8970 443.2425 L
S
U
u
  378.8970 445.6346 m
  378.8970 449.4618 L
S
U
u
  378.8970 451.8538 m
  378.8970 455.4419 L
S
U
u
  378.8970 455.4419 m
  379.1362 455.4419 L
S
U
u
  381.5282 455.4419 m
  385.3555 455.4419 L
S
U
u
  387.7475 455.4419 m
  389.6611 455.4419 L
S
U
u
  385.1163 451.1362 m
  389.6611 455.4419 L
  385.1163 459.9867 L
S
U
u
  79.4153 408.7973 m
  79.4153 412.6246 L
S
U
u
  79.4153 415.0166 m
  79.4153 418.8439 L
S
U
u
  79.4153 421.2359 m
  79.4153 425.0631 L
S
U
u
  81.5681 425.3023 m
  85.3953 425.3023 L
S
U
u
  87.7874 425.3023 m
  91.6146 425.3023 L
S
U
u
  94.0066 425.3023 m
  97.8339 425.3023 L
S
U
u
  100.2259 425.3023 m
  104.0532 425.3023 L
S
U
u
  106.4452 425.3023 m
  110.2724 425.3023 L
S
U
u
  112.6645 425.3023 m
  116.4917 425.3023 L
S
U
u
  118.8837 425.3023 m
  122.7110 425.3023 L
S
U
u
  125.1030 425.3023 m
  128.9302 425.3023 L
S
U
u
  131.3223 425.3023 m
  135.1495 425.3023 L
S
U
u
  137.5415 425.3023 m
  141.3688 425.3023 L
S
U
u
  143.7608 425.3023 m
  147.5880 425.3023 L
S
U
u
  149.9801 425.3023 m
  153.8073 425.3023 L
S
U
u
  156.1993 425.3023 m
  160.0266 425.3023 L
S
U
u
  162.4186 425.3023 m
  163.3754 425.3023 L
S
U
u
  163.3754 425.3023 m
  163.8538 426.9767 L
S
U
u
  163.8538 426.9767 m
  164.5714 427.6944 L
S
U
u
  166.7243 428.1728 m
  167.9203 427.9336 L
S
U
u
  167.9203 427.9336 m
  168.8771 426.9767 L
S
U
u
  168.8771 426.9767 m
  169.1163 425.7807 L
S
U
u
  171.2691 425.3023 m
  175.0963 425.3023 L
S
U
u
  177.4884 425.3023 m
  181.3156 425.3023 L
S
U
u
  183.7076 425.3023 m
  187.5349 425.3023 L
S
U
u
  189.9269 425.3023 m
  193.7542 425.3023 L
S
U
u
  196.1462 425.3023 m
  199.9734 425.3023 L
S
U
u
  202.3654 425.3023 m
  206.1927 425.3023 L
S
U
u
  208.5847 425.3023 m
  212.4120 425.3023 L
S
U
u
  214.8040 425.3023 m
  218.6312 425.3023 L
S
U
u
  221.0233 425.3023 m
  224.8505 425.3023 L
S
U
u
  227.2425 425.3023 m
  231.0698 425.3023 L
S
U
u
  233.4618 425.3023 m
  237.2890 425.3023 L
S
U
u
  239.6811 425.3023 m
  243.5083 425.3023 L
S
U
u
  245.9003 425.3023 m
  249.7276 425.3023 L
S
U
u
  252.1196 425.3023 m
  253.7940 425.3023 L
S
U
u
  253.7940 425.3023 m
  254.2724 426.9767 L
S
U
u
  254.2724 426.9767 m
  254.5116 427.2159 L
S
U
u
  256.4252 428.4120 m
  256.6645 428.4120 L
S
U
u
  256.6645 428.4120 m
  258.3389 427.9336 L
S
U
u
  258.3389 427.9336 m
  259.2957 426.9767 L
S
U
u
  259.2957 426.9767 m
  259.5349 426.4983 L
S
U
u
  260.9701 425.3023 m
  264.7973 425.3023 L
S
U
u
  267.1894 425.3023 m
  271.0166 425.3023 L
S
U
u
  273.4086 425.3023 m
  277.2359 425.3023 L
S
U
u
  279.6279 425.3023 m
  283.4551 425.3023 L
S
U
u
  285.8472 425.3023 m
  289.6744 425.3023 L
S
U
u
  292.0664 425.3023 m
  295.8937 425.3023 L
S
U
u
  298.2857 425.3023 m
  302.1130 425.3023 L
S
U
u
  304.5050 425.3023 m
  308.3322 425.3023 L
S
U
u
  310.7243 425.3023 m
  314.5515 425.3023 L
S
U
u
  316.9435 425.3023 m
  320.7708 425.3023 L
S
U
u
  323.1628 425.3023 m
  324.3588 425.3023 L
S
U
u
  324.3588 425.3023 m
  324.8372 426.9767 L
S
U
u
  324.8372 426.9767 m
  325.5548 427.6944 L
S
U
u
  327.7076 428.4120 m
  328.9037 427.9336 L
S
U
u
  328.9037 427.9336 m
  330.0997 426.9767 L
S
U
u
  330.0997 426.9767 m
  330.3389 426.0199 L
S
U
u
  332.0133 425.3023 m
  335.8405 425.3023 L
S
U
u
  338.2326 425.3023 m
  342.0598 425.3023 L
S
U
u
  344.4518 425.3023 m
  348.2791 425.3023 L
S
U
u
  350.6711 425.3023 m
  354.4983 425.3023 L
S
U
u
  356.8904 425.3023 m
  360.7176 425.3023 L
S
U
u
  363.1096 425.3023 m
  366.9369 425.3023 L
S
U
u
  369.3289 425.3023 m
  370.5249 425.3023 L
S
U
u
  370.5249 425.3023 m
  370.5249 427.9336 L
S
U
u
  370.5249 430.3256 m
  370.5249 434.1528 L
S
U
u
  370.5249 436.5449 m
  370.5249 440.3721 L
S
U
u
  370.5249 442.7641 m
  370.5249 446.5914 L
S
U
u
  370.5249 448.9834 m
  370.5249 452.8106 L
S
U
u
  370.5249 455.2027 m
  370.5249 459.0299 L
S
U
u
  370.5249 461.4219 m
  370.5249 465.2492 L
S
U
u
  372.4385 465.7276 m
  376.2658 465.7276 L
S
U
u
  378.6578 465.7276 m
  382.4850 465.7276 L
S
U
u
  384.8771 465.7276 m
  388.7043 465.7276 L
S
U
u
  385.1163 461.4219 m
  389.6611 465.7276 L
  385.1163 470.2724 L
S
U
u
  340.6246 465.7276 m
  344.4518 465.7276 L
S
U
u
  346.8439 465.7276 m
  350.6711 465.7276 L
S
U
u
  353.0631 465.7276 m
  356.8904 465.7276 L
S
U
u
  359.2824 465.7276 m
  361.9136 465.7276 L
S
U
u
  361.9136 465.7276 m
  361.9136 466.9236 L
S
U
u
  361.9136 469.3156 m
  361.9136 473.1429 L
S
U
u
  361.9136 475.5349 m
  361.9136 476.2525 L
S
U
u
  361.9136 476.2525 m
  365.0233 476.2525 L
S
U
u
  367.4153 476.2525 m
  371.2425 476.2525 L
S
U
u
  373.6346 476.2525 m
  377.4618 476.2525 L
S
U
u
  379.8538 476.2525 m
  383.6811 476.2525 L
S
U
u
  386.0731 476.2525 m
  389.6611 476.2525 L
S
U
u
  385.1163 471.7076 m
  389.6611 476.2525 L
  385.1163 480.5581 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 681.2492 257.8605 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(*\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 681.2492 334.1661 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(*\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 681.2492 407.6013 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(*\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 653.0233 181.5548 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(*\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 729.0897 181.5548 0 Tp
TP
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
