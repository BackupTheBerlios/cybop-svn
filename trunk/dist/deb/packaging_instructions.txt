#
# $RCSfile: packaging_instructions.txt,v $
#
# Copyright (c) 2004-2005. Christian Heller and the CYBOP developers.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# http://www.cybop.net
# - Cybernetics Oriented Programming -
#
# Version:
# $Revision: 1.7 $ $Date: 2005-08-31 20:39:39 $ $Author: christian $
#
# Authors:
# Andreas Tille <tille@debian.org>
# Dennis Reichenbach <dennis.reichenbach@gmx.net>
# Christian Heller <christian.heller@tuxtax.de>
#

Hmmm, es sieht so aus, als hättest Du Deine Upstream-Tarballs schon sehr
auf Debian-Pakete hin ausgerichtet.  Das ist vollkommen unnötig und eher
verwirrend.  Tut doch einfach mal so, als würdet Ihr ganz normal ein
Projekt entwickeln und tar.gz-Archive dafür bereitstellen.  Ihr seid
die Upstream-Autoren und stellt folgendes bereit:

    cybop-0.1.tar.gz
    cybol-1.0.tar.gz
    cyboi-0.5.tar.gz

(oder was auch immer noch).  Es ist ausgesprochen unüblich und vollkommen
unmotiviert, die Debian-typische bezeichnugsweise <name>_version.orig.tar.gz
zu verwenden.  Soweit zu der Upstream-Arbeit.  Mehr braucht auch eigentlich
nicht unter berlios.de zu liegen.

Anschließend setzt Ihr Euren Debian-Maintainer-Hut auf.  Zunächst wird nun
das Upstream-Archiv (ich mach's mal am Beispiel cyboi-0.5.tar.gz) umbenannt:

   mv cyboi-0.5.tar.gz cyboi_0.5.orig.tar.gz

Dann könnte man per dh_make ein debian/ Verzeichnis erzeugen:

   tar -xzf cyboi_0.5.orig.tar.gz
   cd cyboi-0.5
   dh_make

Dort sagt man dann multi-binary package und genau JETZT erst erfolgt das
aufsplitten in die Pakete

   cyboi, cyboi-dev, cyboi-doc, ???

Diese werden alle aus einem einzigen Upstream-Archiv erzeugt.  Es ist
schließlich ein Release (wie ich aus der Versionsnummer annehmen darf und
es gibt überheupt keinen Grund, daß Upstream auseinanderzufrickeln).
Mich interessiert anschließend nur das *.diff.gz und *.dsc, die Ihr
aber auch nicht auf berlios.de ablegen braucht.  Es reicht irgendein
web / ftp Server, wo ich mir das Zeug holen kann, zur Not auch diese
beiden Sachen per Mail.

> Sollte man diese beiden nicht auch besser archivieren, zumindest im CVS?

Die einzelnen Dateien im Debian-Verzeichnis könnten natürlich auch im
CVS liegen, aber in den Upstream Tarball gehören sie eigentlich nicht.

Seht Euch doch einfach mal die Quellen zu irgendeinem beliebigen
Debian-Paket Eurer Wahl an und macht es dann so wie in dem Beispiel.
Bitte schaut Euch UNBEDINGT Beispiele für sowas an, die es in Hülle und
Fülle gibt und lest debian-policy und developers-reference.  So richtig
weiß ich sonst gar nicht, was ich mit den Sachen machen soll, die Ihr
da auf berlios.de bereitstellt.

Die Quelle für ein Debian Paket besteht aus:

      *.orig.tar.gz  =  Upstream Tarball
      *.diff.gz      =  Diff mit Debian spezifischen Patches
      *.dsc

Letztere beiden werden beim Paket-Bauen automatisch erzeugt.  Diese
drei Dateien brauche ich, nicht die Debs.

> Frage: Wie fuegt man beim Debian-Paketbau einen Systempfad hinzu?
Man schreibt ein kleines Wrapper-Skript, das man in /usr/bin legt.

--

> Auf mentors.debian.net liegt aber kein Debian-Paket, sondern nur eine
> tgz-Datei.
Ja, und eine *.dsc Datei dazu.  Zum Debian-Paket kommt man durch:

     dpkg-source -x *.dsc          # Packt Tarfile aus
     cd <build-directory>
     debuild -k<Dein_GPG_Key>      # Baut das Paket

--

>>> Das Debian Paket "resmedicinae-apw" funktioniert. Allerdings sind
>>> apw.pdf und
>>> die HTML-Seiten nach dem Entpacken noch gzipped. Wäre es nicht besser,
>>> die
>>> PDF-Datei und die HTML-Seiten ungezipped in das Paket zu packen? Das
>>> Debian-Paket ist ja sowieso komprimiert.
>>
>> Schoen, danke fuer's Testen!
>>
>> Mir erscheint es fuer den Nutzer auch einfacher, die Dateien zu unzippen.
>Das Zippen wird beim Paketbauen durch dh_compress erledigt.  Wie man das
>für spezielle Dateien verhindert steht in der zugehörigen Manpage.
wie Andreas schon gesagt hatte, das Zippen wird beim Paketbauen durch
dh_compress erledigt.
Man kann das Zippen für spezielle Dateien verhindern, in dem man z.B.,
schreibt:
    dh_compress -X.pdf , dadurch werden keine *.pdf Dateien komprimiert

>> Ich weisz jedoch nicht genau, was Debian dazu vorschreibt.
>Naja, es ist üblich, große Dateien in /usr/share/doc zu packen.  Seht
>Euch ähnliche Pakete an, wie es dort gemacht wird.
Das habe ich auch gelesen. Das debhelper Programm dh_compress packt
alles Dateien, die ins /usr/share/doc Verzeichnis kommen und grösser als 4
kbyte sind.
Man kann das aber wie ober geschrieben unterbinden.

--

http://people.debian.org/~tille/cdd/ap-bts.en.html#s-howto_itp

I explained "How to ask for packages which are not yet included" especially
for the field of Custom Debian Distributions (Debian-Med is one of these).

--

New maintainer's reference:
http://www.debian.org/devel/join/newmaint

--

> 1 Muss ich die Dateien "files" und "install" erstellen oder werden
> diese erzeugt?

Soweit ich weiß, musst du die Dateien "files" und "install" nicht
zwingend erstellen, aber die Datei "install" finde ich sehr hilfreich.
Mit der Datei "install" kann man angeben, welche Dateien aus deinen
Quellen in das Debian Paket (auch wohin im Debian Paket) kopiert werden.
Aufgerufen wird dann diese Routine im Rules File durch den Befehl
dh_install.
Falls du die Datei "install" nicht verwendest, musst du die benötigten
Dateien im Rules File unter dem Punkt "install:" durch verwenden von
"cp..." usw. kopieren lassen.

--

> 2 Was soll der Fehler, dass "install" fehlt (siehe obige Meldungen)?
> Muss ich da was in der "rules" Datei drehen? Ich habe in Dennis' alten
> "rules" Dateien nachgeschaut, doch nichts geaendertes gefunden.
> Beachtet, dass die "rules" Datei nun etwas anders aussieht, weil ich
> "multi-binary" angegeben hatte! Wurde so generiert.
> Uebrigens muss fuer das "cybol" Paket nichts compiliert werden.
> Es handelt sich nur um Dokumentationen und XML-Beispiel-Dateien.

In deinem Rules File verwendest du die folgenden zwei Zeilen:
        -$(MAKE) clean
        ...
        $(MAKE) install DESTDIR=$(CURDIR)/debian/cybol.
Diese rufen die Routinen "clean" und "install" in einem Makefile
auf welches im Sourcecode vorhanden ist.
Da du aber kein Makefile beim Sourcecode von Cybol hast kannst
du auch nicht darauf zugreifen, deshalb musst du diese Zeilen entfernen.
Die Routine "clean" ist zum Reinigen der Verzeichnisse und
"install" zum installieren gedacht, welche du aber beim Paketbau
nicht brauchst, da du dies ja mit der Routine "dh_clean" und
"dh_install" machst.

--

> 3 In der "control" Datei gibt man nur eine Source an, kann aber
> mehrere Pakete hinzufuegen = multi-binary. So habe ich es getan.
> Leider kann man aber nur fuer die Source eine "Section" angeben, oder?
> Ich wuerde die Pakete aber gerne in verschiedenen "Sections" haben, z.B.:
> "cyboi" in "interpreters" und "cyboi-dev" in "devel".
> Kann man bei jedem Multi-Binary Paket eine eigene "Section" angeben?

Ja.

--

> Eine weitere Frage ist, was die folgende Zeile in der "control" Datei soll:
> Depends: ${shlibs:Depends}, ${misc:Depends}

das kannst du machen. Aber die Zeile:
"Depends: ${shlibs:Depends}, ${misc:Depends}" ist besser,
da dann die Abhängigkeiten durch den Befehl "dh_shlibdeps"
im Rules File automatisch bestimmt und gesetzt werden und es
zu keinen doppelten Abhängigkeiten kommt.

--

/usr/share/doc/debian-policy
/usr/share/doc/developers-reference
/usr/share/doc/maint-guide

--

> 1 Muss ich die Dateien "files" und "install" erstellen oder werden
> diese erzeugt?

Die Datei debian/files wird eigentlich automatisch erzeugt.  Was Du natürlich
selbst anlegen mußt ist debian/install.  Schließlich kan dh_make nicht
wissen, welche Dateien in welches Paket müssen.  Konkret sind das dann immer
     debian/<paket1>.install
     debian/<paket2>.install
     ...
     debian/<paketn>.install

--

> ich noch kein "dpkg-buildpackage -rfakeroot" aufgerufen habe.

Es hat nichts mit Deinem Problem zu tun, aber Du solltest es mal mit

      debuild

anstelle von "dpkg-buildpackage -rfakeroot" versuchen - das macht noch
etwas mehr und schreibt nebenbei einen build-log.

