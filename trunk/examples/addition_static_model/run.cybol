<model>
    <part name="create_domain" channel="inline" abstraction="operation/plain" model="create">
        <property name="name" channel="inline" abstraction="text/plain" model="domain"/>
        <property name="abstraction" channel="inline" abstraction="text/plain" model="compound"/>
        <property name="element" channel="inline" abstraction="text/plain" model="part"/>
    </part>
    <part name="initialise_domain" channel="inline" abstraction="operation/plain" model="receive">
        <property name="channel" channel="inline" abstraction="text/plain" model="file"/>
        <property name="language" channel="inline" abstraction="text/plain" model="text/cybol"/>
        <property name="message" channel="inline" abstraction="text/plain" model="addition_static_model/domain.cybol"/>
        <property name="model" channel="inline" abstraction="path/knowledge" model=".domain"/>
    </part>
    <part name="add" channel="inline" abstraction="operation/plain" model="add">
        <property name="abstraction" channel="inline" abstraction="text/plain" model="integer"/>
        <property name="summand_1" channel="inline" abstraction="path/knowledge" model=".domain.summand_1"/>
        <property name="summand_2" channel="inline" abstraction="path/knowledge" model=".domain.summand_2"/>
        <property name="sum" channel="inline" abstraction="path/knowledge" model=".domain.sum"/>
    </part>
    <part name="print_result" channel="inline" abstraction="operation/plain" model="send">
        <property name="channel" channel="inline" abstraction="text/plain" model="shell"/>
        <property name="language" channel="inline" abstraction="text/plain" model="integer"/>
        <property name="message" channel="inline" abstraction="path/knowledge" model=".domain.sum"/>
        <property name="new_line" channel="inline" abstraction="logicvalue/boolean" model="true"/>
    </part>
    <part name="exit_application" channel="inline" abstraction="operation/plain" model="exit"/>
</model>

<!--
    This example uses a small domain model that contains three integer values,
    which are needed for the addition operation.
    The domain model resides externally, in an own cybol file.
    It gets created and added to the runtime knowledge tree automatically,
    when using the "receive" operation and specifying "text/cybol" as data format.
    Then follows the addition and result printing on screen.
/-->

<!--
    Copyright (C) 1999-2011. Christian Heller.

    This file is part of the Cybernetics Oriented Interpreter (CYBOI).
    It represents an example knowledge model,
    and is written in the Cybernetics Oriented Language (CYBOL).

    CYBOI is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CYBOI is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CYBOI.  If not, see <http://www.gnu.org/licenses/>.

    Cybernetics Oriented Programming (CYBOP) <http://www.cybop.org>
    Christian Heller <christian.heller@tuxtax.de>

    @version $RCSfile: run.cybol,v $ $Revision: 1.18 $ $Date: 2009-01-03 01:24:53 $ $Author: christian $
    @author Christian Heller <christian.heller@tuxtax.de>
/-->
