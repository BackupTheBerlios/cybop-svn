
CYBOI-Java Comparison
=====================

Comparison
__________

MEMORISER

+ allocate: malloc, new, constructor, create, DDL CREATE TABLE
+ reallocate: trimToSize
+ deallocate: free, delete, destructor, destroy, DDL DROP TABLE

ACCESSOR (or COPIER?, since get/set are identical in just copying values)

--> cyboi works with references/pointers only
--> even for primitive values an array with just one element exists
--> after allocation, only references are passed around using set/get
--> set copies values
--> get returns only a reference

- get_element(container, index): element, elementAt, charAt, codePointAt, retrieve, getChildAt, firstElement, lastElement, peek, first, lowest, last, highest, SQL SELECT
- get_part_name(container, index)
- get_part_abstraction(container, index)
- get_part(container, index)
- get_part_by_name(container, name)
- get_part_details(container, index)
- get_container (fill destination container with elements of source container)

- set_value (assign value to value): assign, place, replace, copy, overwrite, SQL UPDATE
- set_element (assign element to container)
- set_container (assign container content to container)
--> set is the same as copy, since it copies values
- copy_value = allocate + loop + get[pointer](old container, index) + set[pointer](new container, index)
- copy_container_shallow = allocate + loop + get[pointer](old container, index) + set[pointer](new container, index)
- copy_container_deep: duplicate, copyValueOf, clone + set = allocate + loop + get(old container, index) + loop + get(child container, index) + set() etc.
--> copy_shallow might not be useful in cyboi
--> copying is the same as 1:1 conversion (decode/encode)

+ append(container, element): add, push, put, offer, concat; = set(container, count as index)
- append_content(destination container, source container): appendAll, putAll

MODIFIER

- insert_element(container, source element, index) = reallocate + set, SQL INSERT, DDL ALTER TABLE

- remove_element(index): delete, SQL DELETE, DDL ALTER TABLE
- remove_element_by_name(name)
- remove_area(start index, end index)
- remove_all(container): clear, empty

- sort_parts_by_name(destination container, source container)
- trim(character array): [delete all spaces preceding and following the string]
- reverse(character array) [reverse sequence]

FINDER

- find: links to "find_first" by default, same as "find_part"
- find_first_index(container, element): indexOf, contains, containsKey, containsValue, find, search
- find_last_index(container, element): lastIndexOf
- find_prefix (find that begins at index 0)
- find_suffix (find that begins at last index and counts backward)

- filter(regular expression): matches

COMPARATOR

- compare_equality_all(container, array): equals, ceiling, floor, higher, lower
- compare_equality_all_ignore_case: equalsIgnoreCase
- compare_equality_prefix: startsWith
- compare_equality_prefix_ignore_case
- compare_equality_suffix: endsWith
- compare_equality_suffix_ignore_case
- compare_equality_part(destination container, source container): containsAll
- compare_equality_part_ignore_case
- ??: compareTo (lexicographically, i.e. position in ASCII/Unicode table)

CONVERTER

- decode: valueOf
- encode: toString
- encode_capitalisation_lower: toLowerCase
- encode_capitalisation_upper: toUpperCase

Composition
___________

- remove_first_element(element) = find_first_index + remove_element
- remove_last_element(element) = find_last_index + remove_element
- pop = poll = take = get_first_element + remove_first_element
- replace_elements(container, old element, new element) = loop + find_first_index + set_element

- move: COMPOSITION? = get(old container, index) + set(new container, element, index at end) + remove(old container, index)
- move_element(destination container, source container, source element index)
- move_element_by_name(destination container, source container, source element name)
- move_area(destination container, source container, source start index, source end index): drainTo
- move_elements(destination container, source container): drainTo
- move_signals(destination container, source container): drainTo
- move_parts(destination container, source container): drainTo

Superfluous
___________

- hashCode:
  typically (e.g. in Java) implemented by converting the internal address of the object into an integer;
  CYBOI works with pointers anyway, so that distinct objects are identifiable

- getChildCount, length, capacity, isEmpty, size, setSize:
  elements are accompanied by a count and size by default

- subSequence, substring:
  it suffices to simply count up the pointer to the desired sub sequence of an array
