#
# $RCSfile: todo.txt,v $
#
# This file lists so-called "TODO" items, in other words open tasks
# to be worked on in the future.
#
# http://www.cybop.net
# - Cybernetics Oriented Programming -
#
# @version $Revision: 1.3 $ $Date: 2007-07-23 23:47:57 $ $Author: christian $
# @author Christian Heller <christian.heller@tuxtax.de>
#

- implement configure/ make setup (standard configure and make options),
for example using automake/autoconf
http://gnu.org/software/automake
there are various tutorials and examples around, such as GNU Hello:
http://gnu.org/software/hello
http://www.gnu.org/prep/standards/html_node/Configuration.html
http://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html

- the tarball should unpack into a single directory, like cybop-0.8.0/

- write an actual manual that is updated as necessary to reflect the current
state of cybop; just looking at the papers, it is hard to know what is
current and what is not; in the meantime, one thing that would help is some
kind of brief overview of the papers -- especially which ones should be read
first if someone was trying to use the system; also cautioning about ones
that are partly outdated, etc.; the list of purported "tutorials" doesn't
really make sense to beginners either

- the README file should explain where to report bugs, relevant mailing lists etc.

- include the sources of all documents into the tarball

- if parts exist, then a new part with the same name (stemming from the same
model or its super category) must NOT be created!
--> Prevent this in CYBOI, using conditions

- only one (super) category makes sense, because templates/ models
belong to a certain dimension like: TUI, GUI, WUI, domain model;
so the upper-most category for a tui model may be one that
provides ALL essential properties like "shape", "border", "background" etc.

- adapt "receive_file_system" function
- CAUTION! "create" operation and "receive" operation should be separate!
- always use a "create" operation to create a new knowledge node, since "receive" is NOT used for creation anymore
- the parts of a received knowledge model can later be processed in CYBOL, if their names are known
- parse HTML message header and message-body and add the entries to the knowledge model that was handed over
- the same principle is applicable not only to WUIs, but also to TUIs and GUIs
- CAUTION! The XML tag descriptions (part, property, constraint) in a CYBOL file are special cases with
    the exception that "create" and "receive" information are mixed, in order to serialise models easily;
--> rename "abstraction" attribute to "language" for all CYBOL tags!
--> rename "model" attribute to "message" for all CYBOL tags!
--> a "model" attribute (with new meaning as knowledge model to store received data) is not needed,
    as it gets created internally
--> an "element" attribute is not needed, as the CYBOL structure determines parts and properties
--> a "whole" attribute is not needed, as due to the CYBOL structure it is clear that
        parts belong to the compound in whose file they stand
--> a "receiver" attribute is not needed as it is clear that this cyboi system itself is the receiver

replace "0" with *NUMBER_0_INTEGER and "1" with *NUMBER_1_INTEGER, in all source code files
add correct LOG_LEVEL constant to all log messages of all source code files,
    so that the correct prefix (information, warning, error, debug) appears;
    delete "Information: " etc. which are written directly into log message
