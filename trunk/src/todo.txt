#
# $RCSfile: todo.txt,v $
#
# This file lists so-called "TODO" items, in other words open tasks
# to be worked on in the future.
#
# http://www.cybop.net
# - Cybernetics Oriented Programming -
#
# @version $Revision: 1.118 $ $Date: 2009-10-06 21:25:26 $ $Author: christian $
# @author Christian Heller <christian.heller@tuxtax.de>
#

        * Provide operation integer constants in "constant/model/memory/",
            similar to those in "constant/model/cybol/operation/"
        * Convert cybol operand abstraction given as parametre (model) into integer,
            by creating a special mime type, for faster processing within cyboi
        * Replace old abstractions with primitive abstractions OR (better) just rename constants
        * Add primitive integer constants as counterpart to ALL cybol model constants,
            for faster processing inside cyboi; think through categories first
        * Adapt function "startup_socket_get_host_address", variable "terminated address model"
            in file "socket_starter.c" to new model constants
        * Create new mime types for this, e.g. comparison/greater-or-equal etc.,
            once for cybol and once more for memory, and put these into constant/model/

        * Change year from 2011 to 2012 in comment block of all source code files
        * Delete comment line " * @version $RCSfile: ..." at beginning of all source code files,
            since "$" tags are specific to CVS but SVN is used since two years
            and does not replace them automatically

        * Move all operation handlers one directory up??
        * Adapt "*_operation_handler.c"

        * Move files of directory "executor/converter/selector/" into "executor/searcher/selector/"
        * Delete "executor/converter/decoder.c" and "executor/converter/encoder.c"??

        * Remove "size" parametre from all "deallocate" functions
        * Offer part deallocation shallow and deep
            (deep is not always wanted, if a child is referenced by many parts)

        * Adapt example applications to new operation cybol mime types and new comparison functions
        * Use MIME types to categorise operations in "abstraction" attribute, e.g.:
            <part name="compare_count" channel="inline" abstraction="comparison/greater_or_equal" model="">
                <property name="abstraction" channel="inline" abstraction="text/plain" model="integer"/>
                <property name="left" channel="inline" abstraction="path/knowledge" model=".counter.count"/>
                <property name="right" channel="inline" abstraction="path/knowledge" model=".counter.maximum"/>
                <property name="result" channel="inline" abstraction="path/knowledge" model=".counter.break"/>
            </part>

        * Try to increase performance by commenting out "memset" in array allocation
        * Optimise "replace_array" function by replacing offset with constantly growing variable (less addition in loop necessary)

        * Implement garbage collector ONLY in function "allocate_item" (simple counter);
            hold four fields: data, count, size, references;
            if zero (= no more reference), then delete item;
            CAUTION! It worsens programme performance and is difficult
            to set the "references" field every time some pointer references the item;
            possibly find another way to keep the memory clean without garbage collector

        * Remove model and details content of receiving compound for each new http request;
            otherwise, new commands are just added to the "action" part entry in "receive_socket.c";
            this fixes the errors caused by using "append" instead the "replace" function
            (e.g. html file http response was generated twice as long as wanted;
            only first action was received and added properly to uri internal model,
            all following actions were appended but only the first is considered)
        * Continue with example application "presence"
            (it already works for one client request, but due to the missing container function "replace_part"
            answers to following client request are appended to the same model leading to false results)

        * Use htons for socket transfer
        * Empty buffer with bzero(buffer, 300) in each socket transfer cycle? (See socket examples in tmp/)
        * Replace temporary workaround in file "percent_encoding_decoder.c" with proper decoder file
        * Figure out necessary LIMITATION of the socket receive buffer in function "communicate_receiving_socket" to 1024!
        * See: http://www.w3.org/TR/html5/urls.html#urls
        * See also file "resmedicinae/apps/residenz/logic/handler/handle_www_service.cybol"

        * Create three different sockets (local, inet, inet6)? distinguish at socket startup?
            and store as different entries in internal memory?
        * move and rename "set_new_signal_identification" to e.g. /globals/references/integer_references.c
            and name function e.g. "get_integer_reference"
        * Implement session on application level (Res Medicinae)

        * It was decided that "send" operations do NOT run in an own thread (for now and the near future, at least),
            also if querying a server via http, since this would mix up the signal handling mechanism

        * Use pointer "ptrdiff_t" and object size "size_t" data types, see:
            http://www.gnu.org/s/hello/manual/libc/Important-Data-Types.html

        * Add new cybol function "convert" or "translate"
        * Simplify send/receive functions by factoring out translation to steps before
        * Hand over already translated message to send/receive
        * Enable multiple abstractions like "character|UTF-32|gzip", separated by
            a "pipe" character and processed one-by-one, in the given order?
            --> not necessary, if all translation is done transparently in cybol models

        * Add one file with prefix "cyboi_" in parallel to each file containing
            standard xDT constants in directory "constant/name/xdt/" and below;
            e.g. a file "cyboi_field_xdt_name.c" with constants a la "CYBOI_KBV_TEST_NUMBER_FIELD_XDT_NAME"
            in addition to the file "field_xdt_name.c" with standard format constants a la "KBV_TEST_NUMBER_FIELD_XDT_NAME";
        * Merge all files using old naming schemes like "memory", "model", "compound" into new format
        * Rename old files "field_xdt_model_name.c" etc. to "cyboi_*"

        * Adapt "*_assigner.c" modules to new primitive types/ type sizes
        * Leave abstractions to only provide basic types like: character, integral, real, pointer
            and map these to the corresponding basic standard type, i.e.: wchar_t, signed int, double, void*
            (so that special types like "unsigned short int" are only used cyboi-internally, but not in cybol)
        * Adapt file "primitive_memory_abstraction.c" to actually necessary types
        * Adapt source code by using memory-efficient types wherever possible,
            e.g. "signed short int" instead of just "int" (as done up to now)
            or "signed char" for simple flags used for just two values

        * Adapt all places in source code where reallocation is used to new
            reallocation factor handling and also shrink memory structures appropriately

        * Rename "abstraction" into "type" in cybol and cyboi
        * Rename "details" into "properties" in cybol and cyboi
            ("meta" is unfavourable because it starts with "m" just like "model")
        * Separate files of directory "constant/abstraction/cybol/" into "state" and "logic"
        * Rename several things in CYBOL files and CYBOI:
            --> rename "abstraction" attribute to "language" for all CYBOL tags?!
            --> rename "model" attribute to "message" for all CYBOL tags?!

        * TUI: Check why the escape code sequence (e.g. ESC[B for arrow left) is added to the
            knowledge tree TEST_SHUTDOWN, instead of the decoded string "arrow_left"
        * stop thread if irq has already been set to 1; only continue sensing if irq is 0,
            e.g. in function "sense_gnu_linux_console"
        * possibly also wait some time while irq is 0, not only while irq is 1

        * Set "receive" model in internal memory to NULL in "interrupt" (stop sensing) function,
            but do NOT destroy, since it belongs to the knowledge model tree

        * Does the logger need an own mutex? ... because it is accessed by all threads!
            Alternative: Do NOT use the logger in sensing threads at all

        * Include the sources of all documents into the distributable tarball cybop-0.12.0/
            --> really? This will grow it up to 500 MB in size due to the images
        * Write an actual manual that is updated as necessary to reflect the current
            state of cybop; brief overview which ones should be read first
            if someone was trying to use the system

        * Use recursion instead of loop at several places in source code,
            in order to improve runtime speed

        * Search for "??" (places that are left TODO) and clean up source code

        * Check out handling of "super" property. Is it necessary at all?
            ==> use "prototype programming" paradigm-like behaviour, i.e.:
                templates are just templates for initial creation of a model at runtime;
                later on, each model has to keep ALL its parts with properties itself/ alone
            ==> therefore, multiple template inheritance should be possible, too
                (which would enable splitting of aspects like logging etc.)
                because runtime models do NOT reference their original template anymore,
                so that conflicts due to inter-dependencies as in OOP may not occur
            --> if parts exist, then a new part with the same name (stemming from the same
                model or its super category) must NOT be created!
            --> prevent this in CYBOI, using conditions
            --> only one (super) category makes sense, because templates/ models
                belong to a certain dimension like: TUI, GUI, WUI, domain model;
                so the upper-most category for a tui model may be one that
                provides ALL essential properties like "shape", "border", "background" etc.

        Q: Why should a tui knowledge template NOT be implemented with properties of abstraction "knowledge" or "encapsulated", as follows:

            <part name="apw_entry" channel="inline" abstraction="character" model="a - Starte Arztpraxis Wiegand (APW) im DOS Emulator (DOSemu)">
                <property name="position" channel="inline" abstraction="integer" model="1,3,0"/>
                <property name="size" channel="inline" abstraction="integer" model="68,1,1"/>
                <property name="shape" channel="inline" abstraction="knowledge" model=".revue.settings.tui.shape"/>
                <property name="layout" channel="inline" abstraction="knowledge" model=".revue.settings.tui.layout"/>
                <property name="background" channel="inline" abstraction="knowledge" model=".revue.settings.tui.menu_item_background"/>
                <property name="foreground" channel="inline" abstraction="knowledge" model=".revue.settings.tui.menu_item_foreground"/>
                <property name="bold" channel="inline" abstraction="knowledge" model=".revue.settings.tui.bold"/>
                <property name="previous" channel="inline" abstraction="character" model=".revue.tui.main_window.menu.exit_entry"/>
                <property name="next" channel="inline" abstraction="character" model=".revue.tui.main_window.menu.backup_entry"/>
                <property name="button_press_action" channel="inline" abstraction="character" model=".revue.logic.functionality.start_apw"/>
            </part>

        A1: Because the user interface logic "select_next_part.cybol" and "select_previous_part.cybol",
            and potentially other logic templates do access the properties, in order to set their value, for example:

            <part name="assemble_current_element_background" channel="inline" abstraction="operation" model="add">
                <property name="summand_1" channel="inline" abstraction="knowledge" model=".revue.tui.main_window.menu#focus"/>
                <property name="summand_2" channel="inline" abstraction="character" model="#background"/>
                <property name="sum" channel="inline" abstraction="knowledge" model=".revue.temporary.character"/>
                <property name="abstraction" channel="inline" abstraction="character" model="character"/>
            </part>
            <part name="unfocus_background" channel="inline" abstraction="operation" model="copy">
                <property name="source" channel="inline" abstraction="knowledge" model=".revue.settings.tui.menu_item_background"/>
                <property name="destination" channel="inline" abstraction="encapsulated" model=".revue.temporary.character"/>
                <property name="abstraction" channel="inline" abstraction="character" model="character"/>
            </part>

            This copies a new background colour value from ".revue.settings.tui.menu_item_background" to the
            destination element's property "#background", which is stored in ".revue.temporary.character".
            But by copying the colour value to the "#background" property, that property does not contain
            a knowledge path of the kind ".revue.settings.tui.menu_item_background" anymore, but rather
            a simple colour value like "blue". At that time, the abstraction "knowledge" would NOT be
            correct anymore, because the simple colour value is of abstraction "character" instead.

        A2: Even if CYBOI-internal procedures implemented a mechanism that tried to retrieve the
            real model that a knowledge model path pointed to, this would NOT solve the problem!
            The reason is that then not the actual value of the property would be set, but rather
            the value of the standard setting (!) that the knowledge path pointed to.

            --> RULE to avoid the problems described in A1 and A2:
            Single properties of a textual user interface (tui) should not be stored as knowledge path
            of abstraction "knowledge" or "encapsulated", but always as primitive values.
            To ease application development, however, there is the possibility to use the "super" property,
            which permits the inheritance of properties like colours etc. Following an example:

            <part name="main_window" channel="file" abstraction="compound" model="revue/tui/main_window/window.cybol">
                <property name="super" channel="inline" abstraction="knowledge" model=".revue.settings.tui.window"/>
                <property name="position" channel="inline" abstraction="integer" model="0,0,0"/>
                <property name="size" channel="inline" abstraction="integer" model="80,24,1"/>
            </part>

            A corresponding settings file may look like this:

            <model>
                <part name="shape" channel="inline" abstraction="character" model="rectangle"/>
                <part name="layout" channel="inline" abstraction="character" model="coordinates"/>
                <part name="background" channel="inline" abstraction="character" model="blue"/>
                <part name="foreground" channel="inline" abstraction="character" model="white"/>
                <part name="bold" channel="inline" abstraction="boolean" model="true"/>
            </model>

            CAUTION! The solution proposed above does not (yet) work satisfyingly.
            Only real properties of a knowledge template are created, but NOT those of a super model.
            In other words, a created runtime knowledge model that links to a super model does not
            own the properties of the super model itself. This causes a problem because logic templates
            like "select_next_part.cybol" try to access the properties of a model DIRECTLY, for example
            for setting a colour. But if the property does not exist in the model and only in its
            super model, then it cannot be set.

            --> TODO: For later versions of CYBOI, the super templates/ models must be handled better, either:
            1 at creation time in form of a super template whose properties would get instantiated for the model containing the super property
                it is important that the super template should only deliver the properties for the current template,
                but not be created (instantiated) itself (handle this in CYBOL parser or XML translator)
            2 at runtime, as it is done now in the tui, which gets the properties of a super model at runtime
                the problem here is that the model does not really itself contain the properties of its super model,
                as described above
            ==> solution 1 seems desirable, but would need some thinking on how to implement this in CYBOI;
                this is a kind of "prototype programming"-like approach
            ==> for now, as temporary solution, the properties are stored redundantly (twice) in the template
                that needs them (for example "menu_item" entries in the resmedicinae-revue menu) and in its super template

        * Implement an own solution for character set conversion, since the
            three function sets of the gnu C library all have their drawbacks
            (see comment at beginning of file "utf_8_unicode_character_converter.c")
