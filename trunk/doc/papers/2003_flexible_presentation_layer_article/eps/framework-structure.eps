%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\Studium\Diplomarbeit\JensPaper\eps\framework-structure.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 689 273
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 689 273
%AI3_TileBox: 0 0 689 273
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%%EndSetup

1 XR

0 XR

  0.000 0.000 0.000 1.000 k
 [] 0 d
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
*u
  36.9008 -54.6155 m
  42.1551 -54.6155 L
  42.1551 -54.6155 L
  42.3653 -54.6155  42.5154 -54.7656  42.5154 -54.9758 C
  42.5154 -55.1860  42.3653 -55.3661  42.1551 -55.3661 C
  42.1551 -55.3661 L
  36.9008 -55.3661 L
  36.9008 -55.3661 L
  36.6906 -55.3661  36.5104 -55.1860  36.5104 -54.9758 C
  36.5104 -54.7656  36.6906 -54.6155  36.9008 -54.6155 C
  36.9008 -54.6155 L
B
u
  45.1576 -54.6155 m
  50.4120 -54.6155 L
  50.4120 -54.6155 L
  50.6222 -54.6155  50.7723 -54.7656  50.7723 -54.9758 C
  50.7723 -55.1860  50.6222 -55.3661  50.4120 -55.3661 C
  50.4120 -55.3661 L
  45.1576 -55.3661 L
  45.1576 -55.3661 L
  44.9475 -55.3661  44.7673 -55.1860  44.7673 -54.9758 C
  44.7673 -54.7656  44.9475 -54.6155  45.1576 -54.6155 C
  45.1576 -54.6155 L
B
U
u
  53.4145 -54.6155 m
  58.6689 -54.6155 L
  58.6689 -54.6155 L
  58.8791 -54.6155  59.0292 -54.7656  59.0292 -54.9758 C
  59.0292 -55.1860  58.8791 -55.3661  58.6689 -55.3661 C
  58.6689 -55.3661 L
  53.4145 -55.3661 L
  53.4145 -55.3661 L
  53.2043 -55.3661  53.0242 -55.1860  53.0242 -54.9758 C
  53.0242 -54.7656  53.2043 -54.6155  53.4145 -54.6155 C
  53.4145 -54.6155 L
B
U
u
  61.6714 -54.6155 m
  66.9258 -54.6155 L
  66.9258 -54.6155 L
  67.1359 -54.6155  67.2861 -54.7656  67.2861 -54.9758 C
  67.2861 -55.1860  67.1359 -55.3661  66.9258 -55.3661 C
  66.9258 -55.3661 L
  61.6714 -55.3661 L
  61.6714 -55.3661 L
  61.4612 -55.3661  61.2811 -55.1860  61.2811 -54.9758 C
  61.2811 -54.7656  61.4612 -54.6155  61.6714 -54.6155 C
  61.6714 -54.6155 L
B
U
u
  69.9283 -54.6155 m
  75.1827 -54.6155 L
  75.1827 -54.6155 L
  75.3928 -54.6155  75.5430 -54.7656  75.5430 -54.9758 C
  75.5430 -55.1860  75.3928 -55.3661  75.1827 -55.3661 C
  75.1827 -55.3661 L
  69.9283 -55.3661 L
  69.9283 -55.3661 L
  69.7181 -55.3661  69.5379 -55.1860  69.5379 -54.9758 C
  69.5379 -54.7656  69.7181 -54.6155  69.9283 -54.6155 C
  69.9283 -54.6155 L
B
U
u
  78.1852 -54.6155 m
  83.4395 -54.6155 L
  83.4395 -54.6155 L
  83.6497 -54.6155  83.7998 -54.7656  83.7998 -54.9758 C
  83.7998 -55.1860  83.6497 -55.3661  83.4395 -55.3661 C
  83.4395 -55.3661 L
  78.1852 -55.3661 L
  78.1852 -55.3661 L
  77.9750 -55.3661  77.7948 -55.1860  77.7948 -54.9758 C
  77.7948 -54.7656  77.9750 -54.6155  78.1852 -54.6155 C
  78.1852 -54.6155 L
B
U
u
  86.4420 -54.6155 m
  91.6964 -54.6155 L
  91.6964 -54.6155 L
  91.9066 -54.6155  92.0567 -54.7656  92.0567 -54.9758 C
  92.0567 -55.1860  91.9066 -55.3661  91.6964 -55.3661 C
  91.6964 -55.3661 L
  86.4420 -55.3661 L
  86.4420 -55.3661 L
  86.2319 -55.3661  86.0517 -55.1860  86.0517 -54.9758 C
  86.0517 -54.7656  86.2319 -54.6155  86.4420 -54.6155 C
  86.4420 -54.6155 L
B
U
u
  94.6989 -54.6155 m
  99.9533 -54.6155 L
  99.9533 -54.6155 L
  100.1635 -54.6155  100.3136 -54.7656  100.3136 -54.9758 C
  100.3136 -55.1860  100.1635 -55.3661  99.9533 -55.3661 C
  99.9533 -55.3661 L
  94.6989 -55.3661 L
  94.6989 -55.3661 L
  94.4887 -55.3661  94.3086 -55.1860  94.3086 -54.9758 C
  94.3086 -54.7656  94.4887 -54.6155  94.6989 -54.6155 C
  94.6989 -54.6155 L
B
U
u
  102.9558 -54.6155 m
  108.2102 -54.6155 L
  108.2102 -54.6155 L
  108.4204 -54.6155  108.5705 -54.7656  108.5705 -54.9758 C
  108.5705 -55.1860  108.4204 -55.3661  108.2102 -55.3661 C
  108.2102 -55.3661 L
  102.9558 -55.3661 L
  102.9558 -55.3661 L
  102.7456 -55.3661  102.5655 -55.1860  102.5655 -54.9758 C
  102.5655 -54.7656  102.7456 -54.6155  102.9558 -54.6155 C
  102.9558 -54.6155 L
B
U
u
  111.2127 -54.6155 m
  116.4671 -54.6155 L
  116.4671 -54.6155 L
  116.6772 -54.6155  116.8274 -54.7656  116.8274 -54.9758 C
  116.8274 -55.1860  116.6772 -55.3661  116.4671 -55.3661 C
  116.4671 -55.3661 L
  111.2127 -55.3661 L
  111.2127 -55.3661 L
  111.0025 -55.3661  110.8224 -55.1860  110.8224 -54.9758 C
  110.8224 -54.7656  111.0025 -54.6155  111.2127 -54.6155 C
  111.2127 -54.6155 L
B
U
u
  119.4696 -54.6155 m
  124.7239 -54.6155 L
  124.7239 -54.6155 L
  124.9341 -54.6155  125.0842 -54.7656  125.0842 -54.9758 C
  125.0842 -55.1860  124.9341 -55.3661  124.7239 -55.3661 C
  124.7239 -55.3661 L
  119.4696 -55.3661 L
  119.4696 -55.3661 L
  119.2594 -55.3661  119.0792 -55.1860  119.0792 -54.9758 C
  119.0792 -54.7656  119.2594 -54.6155  119.4696 -54.6155 C
  119.4696 -54.6155 L
B
U
u
  127.7264 -54.6155 m
  132.9808 -54.6155 L
  132.9808 -54.6155 L
  133.1910 -54.6155  133.3411 -54.7656  133.3411 -54.9758 C
  133.3411 -55.1860  133.1910 -55.3661  132.9808 -55.3661 C
  132.9808 -55.3661 L
  127.7264 -55.3661 L
  127.7264 -55.3661 L
  127.5163 -55.3661  127.3361 -55.1860  127.3361 -54.9758 C
  127.3361 -54.7656  127.5163 -54.6155  127.7264 -54.6155 C
  127.7264 -54.6155 L
B
U
u
  135.9833 -54.6155 m
  141.2377 -54.6155 L
  141.2377 -54.6155 L
  141.4479 -54.6155  141.5980 -54.7656  141.5980 -54.9758 C
  141.5980 -55.1860  141.4479 -55.3661  141.2377 -55.3661 C
  141.2377 -55.3661 L
  135.9833 -55.3661 L
  135.9833 -55.3661 L
  135.7731 -55.3661  135.5930 -55.1860  135.5930 -54.9758 C
  135.5930 -54.7656  135.7731 -54.6155  135.9833 -54.6155 C
  135.9833 -54.6155 L
B
U
u
  144.2402 -54.6155 m
  149.4946 -54.6155 L
  149.4946 -54.6155 L
  149.7048 -54.6155  149.8549 -54.7656  149.8549 -54.9758 C
  149.8549 -55.1860  149.7048 -55.3661  149.4946 -55.3661 C
  149.4946 -55.3661 L
  144.2402 -55.3661 L
  144.2402 -55.3661 L
  144.0300 -55.3661  143.8499 -55.1860  143.8499 -54.9758 C
  143.8499 -54.7656  144.0300 -54.6155  144.2402 -54.6155 C
  144.2402 -54.6155 L
B
U
u
  152.4971 -54.6155 m
  157.7515 -54.6155 L
  157.7515 -54.6155 L
  157.9616 -54.6155  158.1118 -54.7656  158.1118 -54.9758 C
  158.1118 -55.1860  157.9616 -55.3661  157.7515 -55.3661 C
  157.7515 -55.3661 L
  152.4971 -55.3661 L
  152.4971 -55.3661 L
  152.2869 -55.3661  152.1068 -55.1860  152.1068 -54.9758 C
  152.1068 -54.7656  152.2869 -54.6155  152.4971 -54.6155 C
  152.4971 -54.6155 L
B
U
u
  160.7540 -54.6155 m
  166.0083 -54.6155 L
  166.0083 -54.6155 L
  166.2185 -54.6155  166.3686 -54.7656  166.3686 -54.9758 C
  166.3686 -55.1860  166.2185 -55.3661  166.0083 -55.3661 C
  166.0083 -55.3661 L
  160.7540 -55.3661 L
  160.7540 -55.3661 L
  160.5438 -55.3661  160.3636 -55.1860  160.3636 -54.9758 C
  160.3636 -54.7656  160.5438 -54.6155  160.7540 -54.6155 C
  160.7540 -54.6155 L
B
U
u
  169.0108 -54.6155 m
  174.2652 -54.6155 L
  174.2652 -54.6155 L
  174.4754 -54.6155  174.6255 -54.7656  174.6255 -54.9758 C
  174.6255 -55.1860  174.4754 -55.3661  174.2652 -55.3661 C
  174.2652 -55.3661 L
  169.0108 -55.3661 L
  169.0108 -55.3661 L
  168.8007 -55.3661  168.6205 -55.1860  168.6205 -54.9758 C
  168.6205 -54.7656  168.8007 -54.6155  169.0108 -54.6155 C
  169.0108 -54.6155 L
B
U
u
  177.2677 -54.6155 m
  182.5221 -54.6155 L
  182.5221 -54.6155 L
  182.7323 -54.6155  182.8824 -54.7656  182.8824 -54.9758 C
  182.8824 -55.1860  182.7323 -55.3661  182.5221 -55.3661 C
  182.5221 -55.3661 L
  177.2677 -55.3661 L
  177.2677 -55.3661 L
  177.0575 -55.3661  176.8774 -55.1860  176.8774 -54.9758 C
  176.8774 -54.7656  177.0575 -54.6155  177.2677 -54.6155 C
  177.2677 -54.6155 L
B
U
u
  185.5246 -54.6155 m
  190.7790 -54.6155 L
  190.7790 -54.6155 L
  190.9892 -54.6155  191.1393 -54.7656  191.1393 -54.9758 C
  191.1393 -55.1860  190.9892 -55.3661  190.7790 -55.3661 C
  190.7790 -55.3661 L
  185.5246 -55.3661 L
  185.5246 -55.3661 L
  185.3144 -55.3661  185.1343 -55.1860  185.1343 -54.9758 C
  185.1343 -54.7656  185.3144 -54.6155  185.5246 -54.6155 C
  185.5246 -54.6155 L
B
U
u
  193.7815 -54.6155 m
  199.0359 -54.6155 L
  199.0359 -54.6155 L
  199.2460 -54.6155  199.3962 -54.7656  199.3962 -54.9758 C
  199.3962 -55.1860  199.2460 -55.3661  199.0359 -55.3661 C
  199.0359 -55.3661 L
  193.7815 -55.3661 L
  193.7815 -55.3661 L
  193.5713 -55.3661  193.3912 -55.1860  193.3912 -54.9758 C
  193.3912 -54.7656  193.5713 -54.6155  193.7815 -54.6155 C
  193.7815 -54.6155 L
B
U
u
  202.0384 -54.6155 m
  207.2927 -54.6155 L
  207.2927 -54.6155 L
  207.5029 -54.6155  207.6530 -54.7656  207.6530 -54.9758 C
  207.6530 -55.1860  207.5029 -55.3661  207.2927 -55.3661 C
  207.2927 -55.3661 L
  202.0384 -55.3661 L
  202.0384 -55.3661 L
  201.8282 -55.3661  201.6480 -55.1860  201.6480 -54.9758 C
  201.6480 -54.7656  201.8282 -54.6155  202.0384 -54.6155 C
  202.0384 -54.6155 L
B
U
u
  210.2952 -54.6155 m
  215.5496 -54.6155 L
  215.5496 -54.6155 L
  215.7598 -54.6155  215.9099 -54.7656  215.9099 -54.9758 C
  215.9099 -55.1860  215.7598 -55.3661  215.5496 -55.3661 C
  215.5496 -55.3661 L
  210.2952 -55.3661 L
  210.2952 -55.3661 L
  210.0851 -55.3661  209.9049 -55.1860  209.9049 -54.9758 C
  209.9049 -54.7656  210.0851 -54.6155  210.2952 -54.6155 C
  210.2952 -54.6155 L
B
U
u
  218.5521 -54.6155 m
  223.8065 -54.6155 L
  223.8065 -54.6155 L
  224.0167 -54.6155  224.1668 -54.7656  224.1668 -54.9758 C
  224.1668 -55.1860  224.0167 -55.3661  223.8065 -55.3661 C
  223.8065 -55.3661 L
  218.5521 -55.3661 L
  218.5521 -55.3661 L
  218.3420 -55.3661  218.1618 -55.1860  218.1618 -54.9758 C
  218.1618 -54.7656  218.3420 -54.6155  218.5521 -54.6155 C
  218.5521 -54.6155 L
B
U
u
  226.8090 -54.6155 m
  232.0634 -54.6155 L
  232.0634 -54.6155 L
  232.2736 -54.6155  232.4237 -54.7656  232.4237 -54.9758 C
  232.4237 -55.1860  232.2736 -55.3661  232.0634 -55.3661 C
  232.0634 -55.3661 L
  226.8090 -55.3661 L
  226.8090 -55.3661 L
  226.5988 -55.3661  226.4187 -55.1860  226.4187 -54.9758 C
  226.4187 -54.7656  226.5988 -54.6155  226.8090 -54.6155 C
  226.8090 -54.6155 L
B
U
u
  235.0659 -54.6155 m
  240.3203 -54.6155 L
  240.3203 -54.6155 L
  240.5304 -54.6155  240.6806 -54.7656  240.6806 -54.9758 C
  240.6806 -55.1860  240.5304 -55.3661  240.3203 -55.3661 C
  240.3203 -55.3661 L
  235.0659 -55.3661 L
  235.0659 -55.3661 L
  234.8557 -55.3661  234.6756 -55.1860  234.6756 -54.9758 C
  234.6756 -54.7656  234.8557 -54.6155  235.0659 -54.6155 C
  235.0659 -54.6155 L
B
U
u
  243.3228 -54.6155 m
  248.5771 -54.6155 L
  248.5771 -54.6155 L
  248.7873 -54.6155  248.9374 -54.7656  248.9374 -54.9758 C
  248.9374 -55.1860  248.7873 -55.3661  248.5771 -55.3661 C
  248.5771 -55.3661 L
  243.3228 -55.3661 L
  243.3228 -55.3661 L
  243.1126 -55.3661  242.9324 -55.1860  242.9324 -54.9758 C
  242.9324 -54.7656  243.1126 -54.6155  243.3228 -54.6155 C
  243.3228 -54.6155 L
B
U
u
  251.5796 -54.6155 m
  256.8340 -54.6155 L
  256.8340 -54.6155 L
  257.0442 -54.6155  257.1943 -54.7656  257.1943 -54.9758 C
  257.1943 -55.1860  257.0442 -55.3661  256.8340 -55.3661 C
  256.8340 -55.3661 L
  251.5796 -55.3661 L
  251.5796 -55.3661 L
  251.3695 -55.3661  251.1893 -55.1860  251.1893 -54.9758 C
  251.1893 -54.7656  251.3695 -54.6155  251.5796 -54.6155 C
  251.5796 -54.6155 L
B
U
u
  259.8365 -54.6155 m
  265.0909 -54.6155 L
  265.0909 -54.6155 L
  265.3011 -54.6155  265.4512 -54.7656  265.4512 -54.9758 C
  265.4512 -55.1860  265.3011 -55.3661  265.0909 -55.3661 C
  265.0909 -55.3661 L
  259.8365 -55.3661 L
  259.8365 -55.3661 L
  259.6264 -55.3661  259.4462 -55.1860  259.4462 -54.9758 C
  259.4462 -54.7656  259.6264 -54.6155  259.8365 -54.6155 C
  259.8365 -54.6155 L
B
U
u
  268.0934 -54.6155 m
  273.3478 -54.6155 L
  273.3478 -54.6155 L
  273.5580 -54.6155  273.7081 -54.7656  273.7081 -54.9758 C
  273.7081 -55.1860  273.5580 -55.3661  273.3478 -55.3661 C
  273.3478 -55.3661 L
  268.0934 -55.3661 L
  268.0934 -55.3661 L
  267.8832 -55.3661  267.7031 -55.1860  267.7031 -54.9758 C
  267.7031 -54.7656  267.8832 -54.6155  268.0934 -54.6155 C
  268.0934 -54.6155 L
B
U
u
  276.3503 -54.6155 m
  281.6047 -54.6155 L
  281.6047 -54.6155 L
  281.8148 -54.6155  281.9650 -54.7656  281.9650 -54.9758 C
  281.9650 -55.1860  281.8148 -55.3661  281.6047 -55.3661 C
  281.6047 -55.3661 L
  276.3503 -55.3661 L
  276.3503 -55.3661 L
  276.1401 -55.3661  275.9600 -55.1860  275.9600 -54.9758 C
  275.9600 -54.7656  276.1401 -54.6155  276.3503 -54.6155 C
  276.3503 -54.6155 L
B
U
u
  284.6072 -54.6155 m
  289.8616 -54.6155 L
  289.8616 -54.6155 L
  290.0717 -54.6155  290.2219 -54.7656  290.2219 -54.9758 C
  290.2219 -55.1860  290.0717 -55.3661  289.8616 -55.3661 C
  289.8616 -55.3661 L
  284.6072 -55.3661 L
  284.6072 -55.3661 L
  284.3970 -55.3661  284.2168 -55.1860  284.2168 -54.9758 C
  284.2168 -54.7656  284.3970 -54.6155  284.6072 -54.6155 C
  284.6072 -54.6155 L
B
U
u
  292.8641 -54.6155 m
  298.1184 -54.6155 L
  298.1184 -54.6155 L
  298.3286 -54.6155  298.4787 -54.7656  298.4787 -54.9758 C
  298.4787 -55.1860  298.3286 -55.3661  298.1184 -55.3661 C
  298.1184 -55.3661 L
  292.8641 -55.3661 L
  292.8641 -55.3661 L
  292.6539 -55.3661  292.4737 -55.1860  292.4737 -54.9758 C
  292.4737 -54.7656  292.6539 -54.6155  292.8641 -54.6155 C
  292.8641 -54.6155 L
B
U
u
  301.1209 -54.6155 m
  306.3753 -54.6155 L
  306.3753 -54.6155 L
  306.5855 -54.6155  306.7356 -54.7656  306.7356 -54.9758 C
  306.7356 -55.1860  306.5855 -55.3661  306.3753 -55.3661 C
  306.3753 -55.3661 L
  301.1209 -55.3661 L
  301.1209 -55.3661 L
  300.9108 -55.3661  300.7306 -55.1860  300.7306 -54.9758 C
  300.7306 -54.7656  300.9108 -54.6155  301.1209 -54.6155 C
  301.1209 -54.6155 L
B
U
u
  309.3778 -54.6155 m
  314.6322 -54.6155 L
  314.6322 -54.6155 L
  314.8424 -54.6155  314.9925 -54.7656  314.9925 -54.9758 C
  314.9925 -55.1860  314.8424 -55.3661  314.6322 -55.3661 C
  314.6322 -55.3661 L
  309.3778 -55.3661 L
  309.3778 -55.3661 L
  309.1676 -55.3661  308.9875 -55.1860  308.9875 -54.9758 C
  308.9875 -54.7656  309.1676 -54.6155  309.3778 -54.6155 C
  309.3778 -54.6155 L
B
U
u
  317.6347 -54.6155 m
  322.8891 -54.6155 L
  322.8891 -54.6155 L
  323.0992 -54.6155  323.2494 -54.7656  323.2494 -54.9758 C
  323.2494 -55.1860  323.0992 -55.3661  322.8891 -55.3661 C
  322.8891 -55.3661 L
  317.6347 -55.3661 L
  317.6347 -55.3661 L
  317.4245 -55.3661  317.2444 -55.1860  317.2444 -54.9758 C
  317.2444 -54.7656  317.4245 -54.6155  317.6347 -54.6155 C
  317.6347 -54.6155 L
B
U
u
  325.8916 -54.6155 m
  331.1460 -54.6155 L
  331.1460 -54.6155 L
  331.3561 -54.6155  331.5063 -54.7656  331.5063 -54.9758 C
  331.5063 -55.1860  331.3561 -55.3661  331.1460 -55.3661 C
  331.1460 -55.3661 L
  325.8916 -55.3661 L
  325.8916 -55.3661 L
  325.6814 -55.3661  325.5013 -55.1860  325.5013 -54.9758 C
  325.5013 -54.7656  325.6814 -54.6155  325.8916 -54.6155 C
  325.8916 -54.6155 L
B
U
u
  334.1485 -54.6155 m
  339.4028 -54.6155 L
  339.4028 -54.6155 L
  339.6130 -54.6155  339.7631 -54.7656  339.7631 -54.9758 C
  339.7631 -55.1860  339.6130 -55.3661  339.4028 -55.3661 C
  339.4028 -55.3661 L
  334.1485 -55.3661 L
  334.1485 -55.3661 L
  333.9383 -55.3661  333.7581 -55.1860  333.7581 -54.9758 C
  333.7581 -54.7656  333.9383 -54.6155  334.1485 -54.6155 C
  334.1485 -54.6155 L
B
U
u
  342.4053 -54.6155 m
  347.6597 -54.6155 L
  347.6597 -54.6155 L
  347.8699 -54.6155  348.0200 -54.7656  348.0200 -54.9758 C
  348.0200 -55.1860  347.8699 -55.3661  347.6597 -55.3661 C
  347.6597 -55.3661 L
  342.4053 -55.3661 L
  342.4053 -55.3661 L
  342.1952 -55.3661  342.0150 -55.1860  342.0150 -54.9758 C
  342.0150 -54.7656  342.1952 -54.6155  342.4053 -54.6155 C
  342.4053 -54.6155 L
B
U
u
  350.6622 -54.6155 m
  355.9166 -54.6155 L
  355.9166 -54.6155 L
  356.1268 -54.6155  356.2769 -54.7656  356.2769 -54.9758 C
  356.2769 -55.1860  356.1268 -55.3661  355.9166 -55.3661 C
  355.9166 -55.3661 L
  350.6622 -55.3661 L
  350.6622 -55.3661 L
  350.4520 -55.3661  350.2719 -55.1860  350.2719 -54.9758 C
  350.2719 -54.7656  350.4520 -54.6155  350.6622 -54.6155 C
  350.6622 -54.6155 L
B
U
u
  358.9191 -54.6155 m
  364.1735 -54.6155 L
  364.1735 -54.6155 L
  364.3837 -54.6155  364.5338 -54.7656  364.5338 -54.9758 C
  364.5338 -55.1860  364.3837 -55.3661  364.1735 -55.3661 C
  364.1735 -55.3661 L
  358.9191 -55.3661 L
  358.9191 -55.3661 L
  358.7089 -55.3661  358.5288 -55.1860  358.5288 -54.9758 C
  358.5288 -54.7656  358.7089 -54.6155  358.9191 -54.6155 C
  358.9191 -54.6155 L
B
U
u
  367.1760 -54.6155 m
  372.4304 -54.6155 L
  372.4304 -54.6155 L
  372.6405 -54.6155  372.7907 -54.7656  372.7907 -54.9758 C
  372.7907 -55.1860  372.6405 -55.3661  372.4304 -55.3661 C
  372.4304 -55.3661 L
  367.1760 -55.3661 L
  367.1760 -55.3661 L
  366.9658 -55.3661  366.7857 -55.1860  366.7857 -54.9758 C
  366.7857 -54.7656  366.9658 -54.6155  367.1760 -54.6155 C
  367.1760 -54.6155 L
B
U
u
  375.4329 -54.6155 m
  380.6872 -54.6155 L
  380.6872 -54.6155 L
  380.8974 -54.6155  381.0475 -54.7656  381.0475 -54.9758 C
  381.0475 -55.1860  380.8974 -55.3661  380.6872 -55.3661 C
  380.6872 -55.3661 L
  375.4329 -55.3661 L
  375.4329 -55.3661 L
  375.2227 -55.3661  375.0425 -55.1860  375.0425 -54.9758 C
  375.0425 -54.7656  375.2227 -54.6155  375.4329 -54.6155 C
  375.4329 -54.6155 L
B
U
u
  383.6897 -54.6155 m
  388.9441 -54.6155 L
  388.9441 -54.6155 L
  389.1543 -54.6155  389.3044 -54.7656  389.3044 -54.9758 C
  389.3044 -55.1860  389.1543 -55.3661  388.9441 -55.3661 C
  388.9441 -55.3661 L
  383.6897 -55.3661 L
  383.6897 -55.3661 L
  383.4796 -55.3661  383.2994 -55.1860  383.2994 -54.9758 C
  383.2994 -54.7656  383.4796 -54.6155  383.6897 -54.6155 C
  383.6897 -54.6155 L
B
U
u
  391.9466 -54.6155 m
  397.2010 -54.6155 L
  397.2010 -54.6155 L
  397.4112 -54.6155  397.5613 -54.7656  397.5613 -54.9758 C
  397.5613 -55.1860  397.4112 -55.3661  397.2010 -55.3661 C
  397.2010 -55.3661 L
  391.9466 -55.3661 L
  391.9466 -55.3661 L
  391.7364 -55.3661  391.5563 -55.1860  391.5563 -54.9758 C
  391.5563 -54.7656  391.7364 -54.6155  391.9466 -54.6155 C
  391.9466 -54.6155 L
B
U
u
  400.2035 -54.6155 m
  405.4579 -54.6155 L
  405.4579 -54.6155 L
  405.6681 -54.6155  405.8182 -54.7656  405.8182 -54.9758 C
  405.8182 -55.1860  405.6681 -55.3661  405.4579 -55.3661 C
  405.4579 -55.3661 L
  400.2035 -55.3661 L
  400.2035 -55.3661 L
  399.9933 -55.3661  399.8132 -55.1860  399.8132 -54.9758 C
  399.8132 -54.7656  399.9933 -54.6155  400.2035 -54.6155 C
  400.2035 -54.6155 L
B
U
u
  408.4604 -54.6155 m
  413.7148 -54.6155 L
  413.7148 -54.6155 L
  413.9249 -54.6155  414.0751 -54.7656  414.0751 -54.9758 C
  414.0751 -55.1860  413.9249 -55.3661  413.7148 -55.3661 C
  413.7148 -55.3661 L
  408.4604 -55.3661 L
  408.4604 -55.3661 L
  408.2502 -55.3661  408.0701 -55.1860  408.0701 -54.9758 C
  408.0701 -54.7656  408.2502 -54.6155  408.4604 -54.6155 C
  408.4604 -54.6155 L
B
U
u
  416.7173 -54.6155 m
  421.9716 -54.6155 L
  421.9716 -54.6155 L
  422.1818 -54.6155  422.3319 -54.7656  422.3319 -54.9758 C
  422.3319 -55.1860  422.1818 -55.3661  421.9716 -55.3661 C
  421.9716 -55.3661 L
  416.7173 -55.3661 L
  416.7173 -55.3661 L
  416.5071 -55.3661  416.3269 -55.1860  416.3269 -54.9758 C
  416.3269 -54.7656  416.5071 -54.6155  416.7173 -54.6155 C
  416.7173 -54.6155 L
B
U
u
  424.9741 -54.6155 m
  430.2285 -54.6155 L
  430.2285 -54.6155 L
  430.4387 -54.6155  430.5888 -54.7656  430.5888 -54.9758 C
  430.5888 -55.1860  430.4387 -55.3661  430.2285 -55.3661 C
  430.2285 -55.3661 L
  424.9741 -55.3661 L
  424.9741 -55.3661 L
  424.7640 -55.3661  424.5838 -55.1860  424.5838 -54.9758 C
  424.5838 -54.7656  424.7640 -54.6155  424.9741 -54.6155 C
  424.9741 -54.6155 L
B
U
u
  433.2310 -54.6155 m
  438.4854 -54.6155 L
  438.4854 -54.6155 L
  438.6956 -54.6155  438.8457 -54.7656  438.8457 -54.9758 C
  438.8457 -55.1860  438.6956 -55.3661  438.4854 -55.3661 C
  438.4854 -55.3661 L
  433.2310 -55.3661 L
  433.2310 -55.3661 L
  433.0209 -55.3661  432.8407 -55.1860  432.8407 -54.9758 C
  432.8407 -54.7656  433.0209 -54.6155  433.2310 -54.6155 C
  433.2310 -54.6155 L
B
U
u
  441.4879 -54.6155 m
  446.7423 -54.6155 L
  446.7423 -54.6155 L
  446.9525 -54.6155  447.1026 -54.7656  447.1026 -54.9758 C
  447.1026 -55.1860  446.9525 -55.3661  446.7423 -55.3661 C
  446.7423 -55.3661 L
  441.4879 -55.3661 L
  441.4879 -55.3661 L
  441.2777 -55.3661  441.0976 -55.1860  441.0976 -54.9758 C
  441.0976 -54.7656  441.2777 -54.6155  441.4879 -54.6155 C
  441.4879 -54.6155 L
B
U
u
  449.7448 -54.6155 m
  454.9992 -54.6155 L
  454.9992 -54.6155 L
  455.2093 -54.6155  455.3595 -54.7656  455.3595 -54.9758 C
  455.3595 -55.1860  455.2093 -55.3661  454.9992 -55.3661 C
  454.9992 -55.3661 L
  449.7448 -55.3661 L
  449.7448 -55.3661 L
  449.5346 -55.3661  449.3545 -55.1860  449.3545 -54.9758 C
  449.3545 -54.7656  449.5346 -54.6155  449.7448 -54.6155 C
  449.7448 -54.6155 L
B
U
u
  458.0017 -54.6155 m
  463.2560 -54.6155 L
  463.2560 -54.6155 L
  463.4662 -54.6155  463.6163 -54.7656  463.6163 -54.9758 C
  463.6163 -55.1860  463.4662 -55.3661  463.2560 -55.3661 C
  463.2560 -55.3661 L
  458.0017 -55.3661 L
  458.0017 -55.3661 L
  457.7915 -55.3661  457.6113 -55.1860  457.6113 -54.9758 C
  457.6113 -54.7656  457.7915 -54.6155  458.0017 -54.6155 C
  458.0017 -54.6155 L
B
U
u
  466.2585 -54.6155 m
  471.5129 -54.6155 L
  471.5129 -54.6155 L
  471.7231 -54.6155  471.8732 -54.7656  471.8732 -54.9758 C
  471.8732 -55.1860  471.7231 -55.3661  471.5129 -55.3661 C
  471.5129 -55.3661 L
  466.2585 -55.3661 L
  466.2585 -55.3661 L
  466.0484 -55.3661  465.8682 -55.1860  465.8682 -54.9758 C
  465.8682 -54.7656  466.0484 -54.6155  466.2585 -54.6155 C
  466.2585 -54.6155 L
B
U
u
  474.5154 -54.6155 m
  479.7698 -54.6155 L
  479.7698 -54.6155 L
  479.9800 -54.6155  480.1301 -54.7656  480.1301 -54.9758 C
  480.1301 -55.1860  479.9800 -55.3661  479.7698 -55.3661 C
  479.7698 -55.3661 L
  474.5154 -55.3661 L
  474.5154 -55.3661 L
  474.3053 -55.3661  474.1251 -55.1860  474.1251 -54.9758 C
  474.1251 -54.7656  474.3053 -54.6155  474.5154 -54.6155 C
  474.5154 -54.6155 L
B
U
u
  482.7723 -54.6155 m
  488.0267 -54.6155 L
  488.0267 -54.6155 L
  488.2369 -54.6155  488.3870 -54.7656  488.3870 -54.9758 C
  488.3870 -55.1860  488.2369 -55.3661  488.0267 -55.3661 C
  488.0267 -55.3661 L
  482.7723 -55.3661 L
  482.7723 -55.3661 L
  482.5621 -55.3661  482.3820 -55.1860  482.3820 -54.9758 C
  482.3820 -54.7656  482.5621 -54.6155  482.7723 -54.6155 C
  482.7723 -54.6155 L
B
U
u
  491.0292 -54.6155 m
  496.2836 -54.6155 L
  496.2836 -54.6155 L
  496.4937 -54.6155  496.6439 -54.7656  496.6439 -54.9758 C
  496.6439 -55.1860  496.4937 -55.3661  496.2836 -55.3661 C
  496.2836 -55.3661 L
  491.0292 -55.3661 L
  491.0292 -55.3661 L
  490.8190 -55.3661  490.6389 -55.1860  490.6389 -54.9758 C
  490.6389 -54.7656  490.8190 -54.6155  491.0292 -54.6155 C
  491.0292 -54.6155 L
B
U
u
  499.2861 -54.6155 m
  504.5405 -54.6155 L
  504.5405 -54.6155 L
  504.7506 -54.6155  504.9008 -54.7656  504.9008 -54.9758 C
  504.9008 -55.1860  504.7506 -55.3661  504.5405 -55.3661 C
  504.5405 -55.3661 L
  499.2861 -55.3661 L
  499.2861 -55.3661 L
  499.0759 -55.3661  498.8957 -55.1860  498.8957 -54.9758 C
  498.8957 -54.7656  499.0759 -54.6155  499.2861 -54.6155 C
  499.2861 -54.6155 L
B
U
u
  507.5430 -54.6155 m
  512.7973 -54.6155 L
  512.7973 -54.6155 L
  513.0075 -54.6155  513.1576 -54.7656  513.1576 -54.9758 C
  513.1576 -55.1860  513.0075 -55.3661  512.7973 -55.3661 C
  512.7973 -55.3661 L
  507.5430 -55.3661 L
  507.5430 -55.3661 L
  507.3328 -55.3661  507.1526 -55.1860  507.1526 -54.9758 C
  507.1526 -54.7656  507.3328 -54.6155  507.5430 -54.6155 C
  507.5430 -54.6155 L
B
U
u
  515.7998 -54.6155 m
  521.0542 -54.6155 L
  521.0542 -54.6155 L
  521.2644 -54.6155  521.4145 -54.7656  521.4145 -54.9758 C
  521.4145 -55.1860  521.2644 -55.3661  521.0542 -55.3661 C
  521.0542 -55.3661 L
  515.7998 -55.3661 L
  515.7998 -55.3661 L
  515.5897 -55.3661  515.4095 -55.1860  515.4095 -54.9758 C
  515.4095 -54.7656  515.5897 -54.6155  515.7998 -54.6155 C
  515.7998 -54.6155 L
B
U
u
  524.0567 -54.6155 m
  529.3111 -54.6155 L
  529.3111 -54.6155 L
  529.5213 -54.6155  529.6714 -54.7656  529.6714 -54.9758 C
  529.6714 -55.1860  529.5213 -55.3661  529.3111 -55.3661 C
  529.3111 -55.3661 L
  524.0567 -55.3661 L
  524.0567 -55.3661 L
  523.8465 -55.3661  523.6664 -55.1860  523.6664 -54.9758 C
  523.6664 -54.7656  523.8465 -54.6155  524.0567 -54.6155 C
  524.0567 -54.6155 L
B
U
u
  532.3136 -54.6155 m
  537.5680 -54.6155 L
  537.5680 -54.6155 L
  537.7781 -54.6155  537.9283 -54.7656  537.9283 -54.9758 C
  537.9283 -55.1860  537.7781 -55.3661  537.5680 -55.3661 C
  537.5680 -55.3661 L
  532.3136 -55.3661 L
  532.3136 -55.3661 L
  532.1034 -55.3661  531.9233 -55.1860  531.9233 -54.9758 C
  531.9233 -54.7656  532.1034 -54.6155  532.3136 -54.6155 C
  532.3136 -54.6155 L
B
U
u
  540.5705 -54.6155 m
  545.8249 -54.6155 L
  545.8249 -54.6155 L
  546.0350 -54.6155  546.1852 -54.7656  546.1852 -54.9758 C
  546.1852 -55.1860  546.0350 -55.3661  545.8249 -55.3661 C
  545.8249 -55.3661 L
  540.5705 -55.3661 L
  540.5705 -55.3661 L
  540.3603 -55.3661  540.1802 -55.1860  540.1802 -54.9758 C
  540.1802 -54.7656  540.3603 -54.6155  540.5705 -54.6155 C
  540.5705 -54.6155 L
B
U
u
  548.8274 -54.6155 m
  554.0817 -54.6155 L
  554.0817 -54.6155 L
  554.2919 -54.6155  554.4420 -54.7656  554.4420 -54.9758 C
  554.4420 -55.1860  554.2919 -55.3661  554.0817 -55.3661 C
  554.0817 -55.3661 L
  548.8274 -55.3661 L
  548.8274 -55.3661 L
  548.6172 -55.3661  548.4370 -55.1860  548.4370 -54.9758 C
  548.4370 -54.7656  548.6172 -54.6155  548.8274 -54.6155 C
  548.8274 -54.6155 L
B
U
u
  557.0842 -54.6155 m
  562.3386 -54.6155 L
  562.3386 -54.6155 L
  562.5488 -54.6155  562.6989 -54.7656  562.6989 -54.9758 C
  562.6989 -55.1860  562.5488 -55.3661  562.3386 -55.3661 C
  562.3386 -55.3661 L
  557.0842 -55.3661 L
  557.0842 -55.3661 L
  556.8741 -55.3661  556.6939 -55.1860  556.6939 -54.9758 C
  556.6939 -54.7656  556.8741 -54.6155  557.0842 -54.6155 C
  557.0842 -54.6155 L
B
U
u
  565.3411 -54.6155 m
  570.5955 -54.6155 L
  570.5955 -54.6155 L
  570.8057 -54.6155  570.9558 -54.7656  570.9558 -54.9758 C
  570.9558 -55.1860  570.8057 -55.3661  570.5955 -55.3661 C
  570.5955 -55.3661 L
  565.3411 -55.3661 L
  565.3411 -55.3661 L
  565.1309 -55.3661  564.9508 -55.1860  564.9508 -54.9758 C
  564.9508 -54.7656  565.1309 -54.6155  565.3411 -54.6155 C
  565.3411 -54.6155 L
B
U
u
  573.5980 -54.6155 m
  578.8524 -54.6155 L
  578.8524 -54.6155 L
  579.0626 -54.6155  579.2127 -54.7656  579.2127 -54.9758 C
  579.2127 -55.1860  579.0626 -55.3661  578.8524 -55.3661 C
  578.8524 -55.3661 L
  573.5980 -55.3661 L
  573.5980 -55.3661 L
  573.3878 -55.3661  573.2077 -55.1860  573.2077 -54.9758 C
  573.2077 -54.7656  573.3878 -54.6155  573.5980 -54.6155 C
  573.5980 -54.6155 L
B
U
u
  581.8549 -54.6155 m
  587.1093 -54.6155 L
  587.1093 -54.6155 L
  587.3194 -54.6155  587.4696 -54.7656  587.4696 -54.9758 C
  587.4696 -55.1860  587.3194 -55.3661  587.1093 -55.3661 C
  587.1093 -55.3661 L
  581.8549 -55.3661 L
  581.8549 -55.3661 L
  581.6447 -55.3661  581.4646 -55.1860  581.4646 -54.9758 C
  581.4646 -54.7656  581.6447 -54.6155  581.8549 -54.6155 C
  581.8549 -54.6155 L
B
U
u
  590.1118 -54.6155 m
  595.3661 -54.6155 L
  595.3661 -54.6155 L
  595.5763 -54.6155  595.7264 -54.7656  595.7264 -54.9758 C
  595.7264 -55.1860  595.5763 -55.3661  595.3661 -55.3661 C
  595.3661 -55.3661 L
  590.1118 -55.3661 L
  590.1118 -55.3661 L
  589.9016 -55.3661  589.7214 -55.1860  589.7214 -54.9758 C
  589.7214 -54.7656  589.9016 -54.6155  590.1118 -54.6155 C
  590.1118 -54.6155 L
B
U
u
  598.3686 -54.6155 m
  603.6230 -54.6155 L
  603.6230 -54.6155 L
  603.8332 -54.6155  603.9833 -54.7656  603.9833 -54.9758 C
  603.9833 -55.1860  603.8332 -55.3661  603.6230 -55.3661 C
  603.6230 -55.3661 L
  598.3686 -55.3661 L
  598.3686 -55.3661 L
  598.1585 -55.3661  597.9783 -55.1860  597.9783 -54.9758 C
  597.9783 -54.7656  598.1585 -54.6155  598.3686 -54.6155 C
  598.3686 -54.6155 L
B
U
u
  606.6255 -54.6155 m
  611.8799 -54.6155 L
  611.8799 -54.6155 L
  612.0901 -54.6155  612.2402 -54.7656  612.2402 -54.9758 C
  612.2402 -55.1860  612.0901 -55.3661  611.8799 -55.3661 C
  611.8799 -55.3661 L
  606.6255 -55.3661 L
  606.6255 -55.3661 L
  606.4153 -55.3661  606.2352 -55.1860  606.2352 -54.9758 C
  606.2352 -54.7656  606.4153 -54.6155  606.6255 -54.6155 C
  606.6255 -54.6155 L
B
U
u
  614.8824 -54.6155 m
  620.1368 -54.6155 L
  620.1368 -54.6155 L
  620.3470 -54.6155  620.4971 -54.7656  620.4971 -54.9758 C
  620.4971 -55.1860  620.3470 -55.3661  620.1368 -55.3661 C
  620.1368 -55.3661 L
  614.8824 -55.3661 L
  614.8824 -55.3661 L
  614.6722 -55.3661  614.4921 -55.1860  614.4921 -54.9758 C
  614.4921 -54.7656  614.6722 -54.6155  614.8824 -54.6155 C
  614.8824 -54.6155 L
B
U
u
  623.1393 -54.6155 m
  628.3937 -54.6155 L
  628.3937 -54.6155 L
  628.6038 -54.6155  628.7540 -54.7656  628.7540 -54.9758 C
  628.7540 -55.1860  628.6038 -55.3661  628.3937 -55.3661 C
  628.3937 -55.3661 L
  623.1393 -55.3661 L
  623.1393 -55.3661 L
  622.9291 -55.3661  622.7490 -55.1860  622.7490 -54.9758 C
  622.7490 -54.7656  622.9291 -54.6155  623.1393 -54.6155 C
  623.1393 -54.6155 L
B
U
u
  631.3962 -54.6155 m
  636.6505 -54.6155 L
  636.6505 -54.6155 L
  636.8607 -54.6155  637.0108 -54.7656  637.0108 -54.9758 C
  637.0108 -55.1860  636.8607 -55.3661  636.6505 -55.3661 C
  636.6505 -55.3661 L
  631.3962 -55.3661 L
  631.3962 -55.3661 L
  631.1860 -55.3661  631.0058 -55.1860  631.0058 -54.9758 C
  631.0058 -54.7656  631.1860 -54.6155  631.3962 -54.6155 C
  631.3962 -54.6155 L
B
U
u
  639.6530 -54.6155 m
  644.9074 -54.6155 L
  644.9074 -54.6155 L
  645.1176 -54.6155  645.2677 -54.7656  645.2677 -54.9758 C
  645.2677 -55.1860  645.1176 -55.3661  644.9074 -55.3661 C
  644.9074 -55.3661 L
  639.6530 -55.3661 L
  639.6530 -55.3661 L
  639.4429 -55.3661  639.2627 -55.1860  639.2627 -54.9758 C
  639.2627 -54.7656  639.4429 -54.6155  639.6530 -54.6155 C
  639.6530 -54.6155 L
B
U
u
  647.9099 -54.6155 m
  653.1643 -54.6155 L
  653.1643 -54.6155 L
  653.3745 -54.6155  653.5246 -54.7656  653.5246 -54.9758 C
  653.5246 -55.1860  653.3745 -55.3661  653.1643 -55.3661 C
  653.1643 -55.3661 L
  647.9099 -55.3661 L
  647.9099 -55.3661 L
  647.6997 -55.3661  647.5196 -55.1860  647.5196 -54.9758 C
  647.5196 -54.7656  647.6997 -54.6155  647.9099 -54.6155 C
  647.9099 -54.6155 L
B
U
u
  656.1668 -54.6155 m
  661.4212 -54.6155 L
  661.4212 -54.6155 L
  661.6314 -54.6155  661.7815 -54.7656  661.7815 -54.9758 C
  661.7815 -55.1860  661.6314 -55.3661  661.4212 -55.3661 C
  661.4212 -55.3661 L
  656.1668 -55.3661 L
  656.1668 -55.3661 L
  655.9566 -55.3661  655.7765 -55.1860  655.7765 -54.9758 C
  655.7765 -54.7656  655.9566 -54.6155  656.1668 -54.6155 C
  656.1668 -54.6155 L
B
U
u
  664.4237 -54.6155 m
  669.6781 -54.6155 L
  669.6781 -54.6155 L
  669.8882 -54.6155  670.0384 -54.7656  670.0384 -54.9758 C
  670.0384 -55.1860  669.8882 -55.3661  669.6781 -55.3661 C
  669.6781 -55.3661 L
  664.4237 -55.3661 L
  664.4237 -55.3661 L
  664.2135 -55.3661  664.0334 -55.1860  664.0334 -54.9758 C
  664.0334 -54.7656  664.2135 -54.6155  664.4237 -54.6155 C
  664.4237 -54.6155 L
B
U
u
  672.6806 -54.6155 m
  677.9349 -54.6155 L
  677.9349 -54.6155 L
  678.1451 -54.6155  678.2952 -54.7656  678.2952 -54.9758 C
  678.2952 -55.1860  678.1451 -55.3661  677.9349 -55.3661 C
  677.9349 -55.3661 L
  672.6806 -55.3661 L
  672.6806 -55.3661 L
  672.4704 -55.3661  672.2902 -55.1860  672.2902 -54.9758 C
  672.2902 -54.7656  672.4704 -54.6155  672.6806 -54.6155 C
  672.6806 -54.6155 L
B
U
*U
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
*u
  36.9008 -162.4354 m
  42.1551 -162.4354 L
  42.1551 -162.4354 L
  42.3653 -162.4354  42.5154 -162.6155  42.5154 -162.8257 C
  42.5154 -163.0359  42.3653 -163.1860  42.1551 -163.1860 C
  42.1551 -163.1860 L
  36.9008 -163.1860 L
  36.9008 -163.1860 L
  36.6906 -163.1860  36.5104 -163.0359  36.5104 -162.8257 C
  36.5104 -162.6155  36.6906 -162.4354  36.9008 -162.4354 C
  36.9008 -162.4354 L
B
u
  45.1576 -162.4354 m
  50.4120 -162.4354 L
  50.4120 -162.4354 L
  50.6222 -162.4354  50.7723 -162.6155  50.7723 -162.8257 C
  50.7723 -163.0359  50.6222 -163.1860  50.4120 -163.1860 C
  50.4120 -163.1860 L
  45.1576 -163.1860 L
  45.1576 -163.1860 L
  44.9475 -163.1860  44.7673 -163.0359  44.7673 -162.8257 C
  44.7673 -162.6155  44.9475 -162.4354  45.1576 -162.4354 C
  45.1576 -162.4354 L
B
U
u
  53.4145 -162.4354 m
  58.6689 -162.4354 L
  58.6689 -162.4354 L
  58.8791 -162.4354  59.0292 -162.6155  59.0292 -162.8257 C
  59.0292 -163.0359  58.8791 -163.1860  58.6689 -163.1860 C
  58.6689 -163.1860 L
  53.4145 -163.1860 L
  53.4145 -163.1860 L
  53.2043 -163.1860  53.0242 -163.0359  53.0242 -162.8257 C
  53.0242 -162.6155  53.2043 -162.4354  53.4145 -162.4354 C
  53.4145 -162.4354 L
B
U
u
  61.6714 -162.4354 m
  66.9258 -162.4354 L
  66.9258 -162.4354 L
  67.1359 -162.4354  67.2861 -162.6155  67.2861 -162.8257 C
  67.2861 -163.0359  67.1359 -163.1860  66.9258 -163.1860 C
  66.9258 -163.1860 L
  61.6714 -163.1860 L
  61.6714 -163.1860 L
  61.4612 -163.1860  61.2811 -163.0359  61.2811 -162.8257 C
  61.2811 -162.6155  61.4612 -162.4354  61.6714 -162.4354 C
  61.6714 -162.4354 L
B
U
u
  69.9283 -162.4354 m
  75.1827 -162.4354 L
  75.1827 -162.4354 L
  75.3928 -162.4354  75.5430 -162.6155  75.5430 -162.8257 C
  75.5430 -163.0359  75.3928 -163.1860  75.1827 -163.1860 C
  75.1827 -163.1860 L
  69.9283 -163.1860 L
  69.9283 -163.1860 L
  69.7181 -163.1860  69.5379 -163.0359  69.5379 -162.8257 C
  69.5379 -162.6155  69.7181 -162.4354  69.9283 -162.4354 C
  69.9283 -162.4354 L
B
U
u
  78.1852 -162.4354 m
  83.4395 -162.4354 L
  83.4395 -162.4354 L
  83.6497 -162.4354  83.7998 -162.6155  83.7998 -162.8257 C
  83.7998 -163.0359  83.6497 -163.1860  83.4395 -163.1860 C
  83.4395 -163.1860 L
  78.1852 -163.1860 L
  78.1852 -163.1860 L
  77.9750 -163.1860  77.7948 -163.0359  77.7948 -162.8257 C
  77.7948 -162.6155  77.9750 -162.4354  78.1852 -162.4354 C
  78.1852 -162.4354 L
B
U
u
  86.4420 -162.4354 m
  91.6964 -162.4354 L
  91.6964 -162.4354 L
  91.9066 -162.4354  92.0567 -162.6155  92.0567 -162.8257 C
  92.0567 -163.0359  91.9066 -163.1860  91.6964 -163.1860 C
  91.6964 -163.1860 L
  86.4420 -163.1860 L
  86.4420 -163.1860 L
  86.2319 -163.1860  86.0517 -163.0359  86.0517 -162.8257 C
  86.0517 -162.6155  86.2319 -162.4354  86.4420 -162.4354 C
  86.4420 -162.4354 L
B
U
u
  94.6989 -162.4354 m
  99.9533 -162.4354 L
  99.9533 -162.4354 L
  100.1635 -162.4354  100.3136 -162.6155  100.3136 -162.8257 C
  100.3136 -163.0359  100.1635 -163.1860  99.9533 -163.1860 C
  99.9533 -163.1860 L
  94.6989 -163.1860 L
  94.6989 -163.1860 L
  94.4887 -163.1860  94.3086 -163.0359  94.3086 -162.8257 C
  94.3086 -162.6155  94.4887 -162.4354  94.6989 -162.4354 C
  94.6989 -162.4354 L
B
U
u
  102.9558 -162.4354 m
  108.2102 -162.4354 L
  108.2102 -162.4354 L
  108.4204 -162.4354  108.5705 -162.6155  108.5705 -162.8257 C
  108.5705 -163.0359  108.4204 -163.1860  108.2102 -163.1860 C
  108.2102 -163.1860 L
  102.9558 -163.1860 L
  102.9558 -163.1860 L
  102.7456 -163.1860  102.5655 -163.0359  102.5655 -162.8257 C
  102.5655 -162.6155  102.7456 -162.4354  102.9558 -162.4354 C
  102.9558 -162.4354 L
B
U
u
  111.2127 -162.4354 m
  116.4671 -162.4354 L
  116.4671 -162.4354 L
  116.6772 -162.4354  116.8274 -162.6155  116.8274 -162.8257 C
  116.8274 -163.0359  116.6772 -163.1860  116.4671 -163.1860 C
  116.4671 -163.1860 L
  111.2127 -163.1860 L
  111.2127 -163.1860 L
  111.0025 -163.1860  110.8224 -163.0359  110.8224 -162.8257 C
  110.8224 -162.6155  111.0025 -162.4354  111.2127 -162.4354 C
  111.2127 -162.4354 L
B
U
u
  119.4696 -162.4354 m
  124.7239 -162.4354 L
  124.7239 -162.4354 L
  124.9341 -162.4354  125.0842 -162.6155  125.0842 -162.8257 C
  125.0842 -163.0359  124.9341 -163.1860  124.7239 -163.1860 C
  124.7239 -163.1860 L
  119.4696 -163.1860 L
  119.4696 -163.1860 L
  119.2594 -163.1860  119.0792 -163.0359  119.0792 -162.8257 C
  119.0792 -162.6155  119.2594 -162.4354  119.4696 -162.4354 C
  119.4696 -162.4354 L
B
U
u
  127.7264 -162.4354 m
  132.9808 -162.4354 L
  132.9808 -162.4354 L
  133.1910 -162.4354  133.3411 -162.6155  133.3411 -162.8257 C
  133.3411 -163.0359  133.1910 -163.1860  132.9808 -163.1860 C
  132.9808 -163.1860 L
  127.7264 -163.1860 L
  127.7264 -163.1860 L
  127.5163 -163.1860  127.3361 -163.0359  127.3361 -162.8257 C
  127.3361 -162.6155  127.5163 -162.4354  127.7264 -162.4354 C
  127.7264 -162.4354 L
B
U
u
  135.9833 -162.4354 m
  141.2377 -162.4354 L
  141.2377 -162.4354 L
  141.4479 -162.4354  141.5980 -162.6155  141.5980 -162.8257 C
  141.5980 -163.0359  141.4479 -163.1860  141.2377 -163.1860 C
  141.2377 -163.1860 L
  135.9833 -163.1860 L
  135.9833 -163.1860 L
  135.7731 -163.1860  135.5930 -163.0359  135.5930 -162.8257 C
  135.5930 -162.6155  135.7731 -162.4354  135.9833 -162.4354 C
  135.9833 -162.4354 L
B
U
u
  144.2402 -162.4354 m
  149.4946 -162.4354 L
  149.4946 -162.4354 L
  149.7048 -162.4354  149.8549 -162.6155  149.8549 -162.8257 C
  149.8549 -163.0359  149.7048 -163.1860  149.4946 -163.1860 C
  149.4946 -163.1860 L
  144.2402 -163.1860 L
  144.2402 -163.1860 L
  144.0300 -163.1860  143.8499 -163.0359  143.8499 -162.8257 C
  143.8499 -162.6155  144.0300 -162.4354  144.2402 -162.4354 C
  144.2402 -162.4354 L
B
U
u
  152.4971 -162.4354 m
  157.7515 -162.4354 L
  157.7515 -162.4354 L
  157.9616 -162.4354  158.1118 -162.6155  158.1118 -162.8257 C
  158.1118 -163.0359  157.9616 -163.1860  157.7515 -163.1860 C
  157.7515 -163.1860 L
  152.4971 -163.1860 L
  152.4971 -163.1860 L
  152.2869 -163.1860  152.1068 -163.0359  152.1068 -162.8257 C
  152.1068 -162.6155  152.2869 -162.4354  152.4971 -162.4354 C
  152.4971 -162.4354 L
B
U
u
  160.7540 -162.4354 m
  166.0083 -162.4354 L
  166.0083 -162.4354 L
  166.2185 -162.4354  166.3686 -162.6155  166.3686 -162.8257 C
  166.3686 -163.0359  166.2185 -163.1860  166.0083 -163.1860 C
  166.0083 -163.1860 L
  160.7540 -163.1860 L
  160.7540 -163.1860 L
  160.5438 -163.1860  160.3636 -163.0359  160.3636 -162.8257 C
  160.3636 -162.6155  160.5438 -162.4354  160.7540 -162.4354 C
  160.7540 -162.4354 L
B
U
u
  169.0108 -162.4354 m
  174.2652 -162.4354 L
  174.2652 -162.4354 L
  174.4754 -162.4354  174.6255 -162.6155  174.6255 -162.8257 C
  174.6255 -163.0359  174.4754 -163.1860  174.2652 -163.1860 C
  174.2652 -163.1860 L
  169.0108 -163.1860 L
  169.0108 -163.1860 L
  168.8007 -163.1860  168.6205 -163.0359  168.6205 -162.8257 C
  168.6205 -162.6155  168.8007 -162.4354  169.0108 -162.4354 C
  169.0108 -162.4354 L
B
U
u
  177.2677 -162.4354 m
  182.5221 -162.4354 L
  182.5221 -162.4354 L
  182.7323 -162.4354  182.8824 -162.6155  182.8824 -162.8257 C
  182.8824 -163.0359  182.7323 -163.1860  182.5221 -163.1860 C
  182.5221 -163.1860 L
  177.2677 -163.1860 L
  177.2677 -163.1860 L
  177.0575 -163.1860  176.8774 -163.0359  176.8774 -162.8257 C
  176.8774 -162.6155  177.0575 -162.4354  177.2677 -162.4354 C
  177.2677 -162.4354 L
B
U
u
  185.5246 -162.4354 m
  190.7790 -162.4354 L
  190.7790 -162.4354 L
  190.9892 -162.4354  191.1393 -162.6155  191.1393 -162.8257 C
  191.1393 -163.0359  190.9892 -163.1860  190.7790 -163.1860 C
  190.7790 -163.1860 L
  185.5246 -163.1860 L
  185.5246 -163.1860 L
  185.3144 -163.1860  185.1343 -163.0359  185.1343 -162.8257 C
  185.1343 -162.6155  185.3144 -162.4354  185.5246 -162.4354 C
  185.5246 -162.4354 L
B
U
u
  193.7815 -162.4354 m
  199.0359 -162.4354 L
  199.0359 -162.4354 L
  199.2460 -162.4354  199.3962 -162.6155  199.3962 -162.8257 C
  199.3962 -163.0359  199.2460 -163.1860  199.0359 -163.1860 C
  199.0359 -163.1860 L
  193.7815 -163.1860 L
  193.7815 -163.1860 L
  193.5713 -163.1860  193.3912 -163.0359  193.3912 -162.8257 C
  193.3912 -162.6155  193.5713 -162.4354  193.7815 -162.4354 C
  193.7815 -162.4354 L
B
U
u
  202.0384 -162.4354 m
  207.2927 -162.4354 L
  207.2927 -162.4354 L
  207.5029 -162.4354  207.6530 -162.6155  207.6530 -162.8257 C
  207.6530 -163.0359  207.5029 -163.1860  207.2927 -163.1860 C
  207.2927 -163.1860 L
  202.0384 -163.1860 L
  202.0384 -163.1860 L
  201.8282 -163.1860  201.6480 -163.0359  201.6480 -162.8257 C
  201.6480 -162.6155  201.8282 -162.4354  202.0384 -162.4354 C
  202.0384 -162.4354 L
B
U
u
  210.2952 -162.4354 m
  215.5496 -162.4354 L
  215.5496 -162.4354 L
  215.7598 -162.4354  215.9099 -162.6155  215.9099 -162.8257 C
  215.9099 -163.0359  215.7598 -163.1860  215.5496 -163.1860 C
  215.5496 -163.1860 L
  210.2952 -163.1860 L
  210.2952 -163.1860 L
  210.0851 -163.1860  209.9049 -163.0359  209.9049 -162.8257 C
  209.9049 -162.6155  210.0851 -162.4354  210.2952 -162.4354 C
  210.2952 -162.4354 L
B
U
u
  218.5521 -162.4354 m
  223.8065 -162.4354 L
  223.8065 -162.4354 L
  224.0167 -162.4354  224.1668 -162.6155  224.1668 -162.8257 C
  224.1668 -163.0359  224.0167 -163.1860  223.8065 -163.1860 C
  223.8065 -163.1860 L
  218.5521 -163.1860 L
  218.5521 -163.1860 L
  218.3420 -163.1860  218.1618 -163.0359  218.1618 -162.8257 C
  218.1618 -162.6155  218.3420 -162.4354  218.5521 -162.4354 C
  218.5521 -162.4354 L
B
U
u
  226.8090 -162.4354 m
  232.0634 -162.4354 L
  232.0634 -162.4354 L
  232.2736 -162.4354  232.4237 -162.6155  232.4237 -162.8257 C
  232.4237 -163.0359  232.2736 -163.1860  232.0634 -163.1860 C
  232.0634 -163.1860 L
  226.8090 -163.1860 L
  226.8090 -163.1860 L
  226.5988 -163.1860  226.4187 -163.0359  226.4187 -162.8257 C
  226.4187 -162.6155  226.5988 -162.4354  226.8090 -162.4354 C
  226.8090 -162.4354 L
B
U
u
  235.0659 -162.4354 m
  240.3203 -162.4354 L
  240.3203 -162.4354 L
  240.5304 -162.4354  240.6806 -162.6155  240.6806 -162.8257 C
  240.6806 -163.0359  240.5304 -163.1860  240.3203 -163.1860 C
  240.3203 -163.1860 L
  235.0659 -163.1860 L
  235.0659 -163.1860 L
  234.8557 -163.1860  234.6756 -163.0359  234.6756 -162.8257 C
  234.6756 -162.6155  234.8557 -162.4354  235.0659 -162.4354 C
  235.0659 -162.4354 L
B
U
u
  243.3228 -162.4354 m
  248.5771 -162.4354 L
  248.5771 -162.4354 L
  248.7873 -162.4354  248.9374 -162.6155  248.9374 -162.8257 C
  248.9374 -163.0359  248.7873 -163.1860  248.5771 -163.1860 C
  248.5771 -163.1860 L
  243.3228 -163.1860 L
  243.3228 -163.1860 L
  243.1126 -163.1860  242.9324 -163.0359  242.9324 -162.8257 C
  242.9324 -162.6155  243.1126 -162.4354  243.3228 -162.4354 C
  243.3228 -162.4354 L
B
U
u
  251.5796 -162.4354 m
  256.8340 -162.4354 L
  256.8340 -162.4354 L
  257.0442 -162.4354  257.1943 -162.6155  257.1943 -162.8257 C
  257.1943 -163.0359  257.0442 -163.1860  256.8340 -163.1860 C
  256.8340 -163.1860 L
  251.5796 -163.1860 L
  251.5796 -163.1860 L
  251.3695 -163.1860  251.1893 -163.0359  251.1893 -162.8257 C
  251.1893 -162.6155  251.3695 -162.4354  251.5796 -162.4354 C
  251.5796 -162.4354 L
B
U
u
  259.8365 -162.4354 m
  265.0909 -162.4354 L
  265.0909 -162.4354 L
  265.3011 -162.4354  265.4512 -162.6155  265.4512 -162.8257 C
  265.4512 -163.0359  265.3011 -163.1860  265.0909 -163.1860 C
  265.0909 -163.1860 L
  259.8365 -163.1860 L
  259.8365 -163.1860 L
  259.6264 -163.1860  259.4462 -163.0359  259.4462 -162.8257 C
  259.4462 -162.6155  259.6264 -162.4354  259.8365 -162.4354 C
  259.8365 -162.4354 L
B
U
u
  268.0934 -162.4354 m
  273.3478 -162.4354 L
  273.3478 -162.4354 L
  273.5580 -162.4354  273.7081 -162.6155  273.7081 -162.8257 C
  273.7081 -163.0359  273.5580 -163.1860  273.3478 -163.1860 C
  273.3478 -163.1860 L
  268.0934 -163.1860 L
  268.0934 -163.1860 L
  267.8832 -163.1860  267.7031 -163.0359  267.7031 -162.8257 C
  267.7031 -162.6155  267.8832 -162.4354  268.0934 -162.4354 C
  268.0934 -162.4354 L
B
U
u
  276.3503 -162.4354 m
  281.6047 -162.4354 L
  281.6047 -162.4354 L
  281.8148 -162.4354  281.9650 -162.6155  281.9650 -162.8257 C
  281.9650 -163.0359  281.8148 -163.1860  281.6047 -163.1860 C
  281.6047 -163.1860 L
  276.3503 -163.1860 L
  276.3503 -163.1860 L
  276.1401 -163.1860  275.9600 -163.0359  275.9600 -162.8257 C
  275.9600 -162.6155  276.1401 -162.4354  276.3503 -162.4354 C
  276.3503 -162.4354 L
B
U
u
  284.6072 -162.4354 m
  289.8616 -162.4354 L
  289.8616 -162.4354 L
  290.0717 -162.4354  290.2219 -162.6155  290.2219 -162.8257 C
  290.2219 -163.0359  290.0717 -163.1860  289.8616 -163.1860 C
  289.8616 -163.1860 L
  284.6072 -163.1860 L
  284.6072 -163.1860 L
  284.3970 -163.1860  284.2168 -163.0359  284.2168 -162.8257 C
  284.2168 -162.6155  284.3970 -162.4354  284.6072 -162.4354 C
  284.6072 -162.4354 L
B
U
u
  292.8641 -162.4354 m
  298.1184 -162.4354 L
  298.1184 -162.4354 L
  298.3286 -162.4354  298.4787 -162.6155  298.4787 -162.8257 C
  298.4787 -163.0359  298.3286 -163.1860  298.1184 -163.1860 C
  298.1184 -163.1860 L
  292.8641 -163.1860 L
  292.8641 -163.1860 L
  292.6539 -163.1860  292.4737 -163.0359  292.4737 -162.8257 C
  292.4737 -162.6155  292.6539 -162.4354  292.8641 -162.4354 C
  292.8641 -162.4354 L
B
U
u
  301.1209 -162.4354 m
  306.3753 -162.4354 L
  306.3753 -162.4354 L
  306.5855 -162.4354  306.7356 -162.6155  306.7356 -162.8257 C
  306.7356 -163.0359  306.5855 -163.1860  306.3753 -163.1860 C
  306.3753 -163.1860 L
  301.1209 -163.1860 L
  301.1209 -163.1860 L
  300.9108 -163.1860  300.7306 -163.0359  300.7306 -162.8257 C
  300.7306 -162.6155  300.9108 -162.4354  301.1209 -162.4354 C
  301.1209 -162.4354 L
B
U
u
  309.3778 -162.4354 m
  314.6322 -162.4354 L
  314.6322 -162.4354 L
  314.8424 -162.4354  314.9925 -162.6155  314.9925 -162.8257 C
  314.9925 -163.0359  314.8424 -163.1860  314.6322 -163.1860 C
  314.6322 -163.1860 L
  309.3778 -163.1860 L
  309.3778 -163.1860 L
  309.1676 -163.1860  308.9875 -163.0359  308.9875 -162.8257 C
  308.9875 -162.6155  309.1676 -162.4354  309.3778 -162.4354 C
  309.3778 -162.4354 L
B
U
u
  317.6347 -162.4354 m
  322.8891 -162.4354 L
  322.8891 -162.4354 L
  323.0992 -162.4354  323.2494 -162.6155  323.2494 -162.8257 C
  323.2494 -163.0359  323.0992 -163.1860  322.8891 -163.1860 C
  322.8891 -163.1860 L
  317.6347 -163.1860 L
  317.6347 -163.1860 L
  317.4245 -163.1860  317.2444 -163.0359  317.2444 -162.8257 C
  317.2444 -162.6155  317.4245 -162.4354  317.6347 -162.4354 C
  317.6347 -162.4354 L
B
U
u
  325.8916 -162.4354 m
  331.1460 -162.4354 L
  331.1460 -162.4354 L
  331.3561 -162.4354  331.5063 -162.6155  331.5063 -162.8257 C
  331.5063 -163.0359  331.3561 -163.1860  331.1460 -163.1860 C
  331.1460 -163.1860 L
  325.8916 -163.1860 L
  325.8916 -163.1860 L
  325.6814 -163.1860  325.5013 -163.0359  325.5013 -162.8257 C
  325.5013 -162.6155  325.6814 -162.4354  325.8916 -162.4354 C
  325.8916 -162.4354 L
B
U
u
  334.1485 -162.4354 m
  339.4028 -162.4354 L
  339.4028 -162.4354 L
  339.6130 -162.4354  339.7631 -162.6155  339.7631 -162.8257 C
  339.7631 -163.0359  339.6130 -163.1860  339.4028 -163.1860 C
  339.4028 -163.1860 L
  334.1485 -163.1860 L
  334.1485 -163.1860 L
  333.9383 -163.1860  333.7581 -163.0359  333.7581 -162.8257 C
  333.7581 -162.6155  333.9383 -162.4354  334.1485 -162.4354 C
  334.1485 -162.4354 L
B
U
u
  342.4053 -162.4354 m
  347.6597 -162.4354 L
  347.6597 -162.4354 L
  347.8699 -162.4354  348.0200 -162.6155  348.0200 -162.8257 C
  348.0200 -163.0359  347.8699 -163.1860  347.6597 -163.1860 C
  347.6597 -163.1860 L
  342.4053 -163.1860 L
  342.4053 -163.1860 L
  342.1952 -163.1860  342.0150 -163.0359  342.0150 -162.8257 C
  342.0150 -162.6155  342.1952 -162.4354  342.4053 -162.4354 C
  342.4053 -162.4354 L
B
U
u
  350.6622 -162.4354 m
  355.9166 -162.4354 L
  355.9166 -162.4354 L
  356.1268 -162.4354  356.2769 -162.6155  356.2769 -162.8257 C
  356.2769 -163.0359  356.1268 -163.1860  355.9166 -163.1860 C
  355.9166 -163.1860 L
  350.6622 -163.1860 L
  350.6622 -163.1860 L
  350.4520 -163.1860  350.2719 -163.0359  350.2719 -162.8257 C
  350.2719 -162.6155  350.4520 -162.4354  350.6622 -162.4354 C
  350.6622 -162.4354 L
B
U
u
  358.9191 -162.4354 m
  364.1735 -162.4354 L
  364.1735 -162.4354 L
  364.3837 -162.4354  364.5338 -162.6155  364.5338 -162.8257 C
  364.5338 -163.0359  364.3837 -163.1860  364.1735 -163.1860 C
  364.1735 -163.1860 L
  358.9191 -163.1860 L
  358.9191 -163.1860 L
  358.7089 -163.1860  358.5288 -163.0359  358.5288 -162.8257 C
  358.5288 -162.6155  358.7089 -162.4354  358.9191 -162.4354 C
  358.9191 -162.4354 L
B
U
u
  367.1760 -162.4354 m
  372.4304 -162.4354 L
  372.4304 -162.4354 L
  372.6405 -162.4354  372.7907 -162.6155  372.7907 -162.8257 C
  372.7907 -163.0359  372.6405 -163.1860  372.4304 -163.1860 C
  372.4304 -163.1860 L
  367.1760 -163.1860 L
  367.1760 -163.1860 L
  366.9658 -163.1860  366.7857 -163.0359  366.7857 -162.8257 C
  366.7857 -162.6155  366.9658 -162.4354  367.1760 -162.4354 C
  367.1760 -162.4354 L
B
U
u
  375.4329 -162.4354 m
  380.6872 -162.4354 L
  380.6872 -162.4354 L
  380.8974 -162.4354  381.0475 -162.6155  381.0475 -162.8257 C
  381.0475 -163.0359  380.8974 -163.1860  380.6872 -163.1860 C
  380.6872 -163.1860 L
  375.4329 -163.1860 L
  375.4329 -163.1860 L
  375.2227 -163.1860  375.0425 -163.0359  375.0425 -162.8257 C
  375.0425 -162.6155  375.2227 -162.4354  375.4329 -162.4354 C
  375.4329 -162.4354 L
B
U
u
  383.6897 -162.4354 m
  388.9441 -162.4354 L
  388.9441 -162.4354 L
  389.1543 -162.4354  389.3044 -162.6155  389.3044 -162.8257 C
  389.3044 -163.0359  389.1543 -163.1860  388.9441 -163.1860 C
  388.9441 -163.1860 L
  383.6897 -163.1860 L
  383.6897 -163.1860 L
  383.4796 -163.1860  383.2994 -163.0359  383.2994 -162.8257 C
  383.2994 -162.6155  383.4796 -162.4354  383.6897 -162.4354 C
  383.6897 -162.4354 L
B
U
u
  391.9466 -162.4354 m
  397.2010 -162.4354 L
  397.2010 -162.4354 L
  397.4112 -162.4354  397.5613 -162.6155  397.5613 -162.8257 C
  397.5613 -163.0359  397.4112 -163.1860  397.2010 -163.1860 C
  397.2010 -163.1860 L
  391.9466 -163.1860 L
  391.9466 -163.1860 L
  391.7364 -163.1860  391.5563 -163.0359  391.5563 -162.8257 C
  391.5563 -162.6155  391.7364 -162.4354  391.9466 -162.4354 C
  391.9466 -162.4354 L
B
U
u
  400.2035 -162.4354 m
  405.4579 -162.4354 L
  405.4579 -162.4354 L
  405.6681 -162.4354  405.8182 -162.6155  405.8182 -162.8257 C
  405.8182 -163.0359  405.6681 -163.1860  405.4579 -163.1860 C
  405.4579 -163.1860 L
  400.2035 -163.1860 L
  400.2035 -163.1860 L
  399.9933 -163.1860  399.8132 -163.0359  399.8132 -162.8257 C
  399.8132 -162.6155  399.9933 -162.4354  400.2035 -162.4354 C
  400.2035 -162.4354 L
B
U
u
  408.4604 -162.4354 m
  413.7148 -162.4354 L
  413.7148 -162.4354 L
  413.9249 -162.4354  414.0751 -162.6155  414.0751 -162.8257 C
  414.0751 -163.0359  413.9249 -163.1860  413.7148 -163.1860 C
  413.7148 -163.1860 L
  408.4604 -163.1860 L
  408.4604 -163.1860 L
  408.2502 -163.1860  408.0701 -163.0359  408.0701 -162.8257 C
  408.0701 -162.6155  408.2502 -162.4354  408.4604 -162.4354 C
  408.4604 -162.4354 L
B
U
u
  416.7173 -162.4354 m
  421.9716 -162.4354 L
  421.9716 -162.4354 L
  422.1818 -162.4354  422.3319 -162.6155  422.3319 -162.8257 C
  422.3319 -163.0359  422.1818 -163.1860  421.9716 -163.1860 C
  421.9716 -163.1860 L
  416.7173 -163.1860 L
  416.7173 -163.1860 L
  416.5071 -163.1860  416.3269 -163.0359  416.3269 -162.8257 C
  416.3269 -162.6155  416.5071 -162.4354  416.7173 -162.4354 C
  416.7173 -162.4354 L
B
U
u
  424.9741 -162.4354 m
  430.2285 -162.4354 L
  430.2285 -162.4354 L
  430.4387 -162.4354  430.5888 -162.6155  430.5888 -162.8257 C
  430.5888 -163.0359  430.4387 -163.1860  430.2285 -163.1860 C
  430.2285 -163.1860 L
  424.9741 -163.1860 L
  424.9741 -163.1860 L
  424.7640 -163.1860  424.5838 -163.0359  424.5838 -162.8257 C
  424.5838 -162.6155  424.7640 -162.4354  424.9741 -162.4354 C
  424.9741 -162.4354 L
B
U
u
  433.2310 -162.4354 m
  438.4854 -162.4354 L
  438.4854 -162.4354 L
  438.6956 -162.4354  438.8457 -162.6155  438.8457 -162.8257 C
  438.8457 -163.0359  438.6956 -163.1860  438.4854 -163.1860 C
  438.4854 -163.1860 L
  433.2310 -163.1860 L
  433.2310 -163.1860 L
  433.0209 -163.1860  432.8407 -163.0359  432.8407 -162.8257 C
  432.8407 -162.6155  433.0209 -162.4354  433.2310 -162.4354 C
  433.2310 -162.4354 L
B
U
u
  441.4879 -162.4354 m
  446.7423 -162.4354 L
  446.7423 -162.4354 L
  446.9525 -162.4354  447.1026 -162.6155  447.1026 -162.8257 C
  447.1026 -163.0359  446.9525 -163.1860  446.7423 -163.1860 C
  446.7423 -163.1860 L
  441.4879 -163.1860 L
  441.4879 -163.1860 L
  441.2777 -163.1860  441.0976 -163.0359  441.0976 -162.8257 C
  441.0976 -162.6155  441.2777 -162.4354  441.4879 -162.4354 C
  441.4879 -162.4354 L
B
U
u
  449.7448 -162.4354 m
  454.9992 -162.4354 L
  454.9992 -162.4354 L
  455.2093 -162.4354  455.3595 -162.6155  455.3595 -162.8257 C
  455.3595 -163.0359  455.2093 -163.1860  454.9992 -163.1860 C
  454.9992 -163.1860 L
  449.7448 -163.1860 L
  449.7448 -163.1860 L
  449.5346 -163.1860  449.3545 -163.0359  449.3545 -162.8257 C
  449.3545 -162.6155  449.5346 -162.4354  449.7448 -162.4354 C
  449.7448 -162.4354 L
B
U
u
  458.0017 -162.4354 m
  463.2560 -162.4354 L
  463.2560 -162.4354 L
  463.4662 -162.4354  463.6163 -162.6155  463.6163 -162.8257 C
  463.6163 -163.0359  463.4662 -163.1860  463.2560 -163.1860 C
  463.2560 -163.1860 L
  458.0017 -163.1860 L
  458.0017 -163.1860 L
  457.7915 -163.1860  457.6113 -163.0359  457.6113 -162.8257 C
  457.6113 -162.6155  457.7915 -162.4354  458.0017 -162.4354 C
  458.0017 -162.4354 L
B
U
u
  466.2585 -162.4354 m
  471.5129 -162.4354 L
  471.5129 -162.4354 L
  471.7231 -162.4354  471.8732 -162.6155  471.8732 -162.8257 C
  471.8732 -163.0359  471.7231 -163.1860  471.5129 -163.1860 C
  471.5129 -163.1860 L
  466.2585 -163.1860 L
  466.2585 -163.1860 L
  466.0484 -163.1860  465.8682 -163.0359  465.8682 -162.8257 C
  465.8682 -162.6155  466.0484 -162.4354  466.2585 -162.4354 C
  466.2585 -162.4354 L
B
U
u
  474.5154 -162.4354 m
  479.7698 -162.4354 L
  479.7698 -162.4354 L
  479.9800 -162.4354  480.1301 -162.6155  480.1301 -162.8257 C
  480.1301 -163.0359  479.9800 -163.1860  479.7698 -163.1860 C
  479.7698 -163.1860 L
  474.5154 -163.1860 L
  474.5154 -163.1860 L
  474.3053 -163.1860  474.1251 -163.0359  474.1251 -162.8257 C
  474.1251 -162.6155  474.3053 -162.4354  474.5154 -162.4354 C
  474.5154 -162.4354 L
B
U
u
  482.7723 -162.4354 m
  488.0267 -162.4354 L
  488.0267 -162.4354 L
  488.2369 -162.4354  488.3870 -162.6155  488.3870 -162.8257 C
  488.3870 -163.0359  488.2369 -163.1860  488.0267 -163.1860 C
  488.0267 -163.1860 L
  482.7723 -163.1860 L
  482.7723 -163.1860 L
  482.5621 -163.1860  482.3820 -163.0359  482.3820 -162.8257 C
  482.3820 -162.6155  482.5621 -162.4354  482.7723 -162.4354 C
  482.7723 -162.4354 L
B
U
u
  491.0292 -162.4354 m
  496.2836 -162.4354 L
  496.2836 -162.4354 L
  496.4937 -162.4354  496.6439 -162.6155  496.6439 -162.8257 C
  496.6439 -163.0359  496.4937 -163.1860  496.2836 -163.1860 C
  496.2836 -163.1860 L
  491.0292 -163.1860 L
  491.0292 -163.1860 L
  490.8190 -163.1860  490.6389 -163.0359  490.6389 -162.8257 C
  490.6389 -162.6155  490.8190 -162.4354  491.0292 -162.4354 C
  491.0292 -162.4354 L
B
U
u
  499.2861 -162.4354 m
  504.5405 -162.4354 L
  504.5405 -162.4354 L
  504.7506 -162.4354  504.9008 -162.6155  504.9008 -162.8257 C
  504.9008 -163.0359  504.7506 -163.1860  504.5405 -163.1860 C
  504.5405 -163.1860 L
  499.2861 -163.1860 L
  499.2861 -163.1860 L
  499.0759 -163.1860  498.8957 -163.0359  498.8957 -162.8257 C
  498.8957 -162.6155  499.0759 -162.4354  499.2861 -162.4354 C
  499.2861 -162.4354 L
B
U
u
  507.5430 -162.4354 m
  512.7973 -162.4354 L
  512.7973 -162.4354 L
  513.0075 -162.4354  513.1576 -162.6155  513.1576 -162.8257 C
  513.1576 -163.0359  513.0075 -163.1860  512.7973 -163.1860 C
  512.7973 -163.1860 L
  507.5430 -163.1860 L
  507.5430 -163.1860 L
  507.3328 -163.1860  507.1526 -163.0359  507.1526 -162.8257 C
  507.1526 -162.6155  507.3328 -162.4354  507.5430 -162.4354 C
  507.5430 -162.4354 L
B
U
u
  515.7998 -162.4354 m
  521.0542 -162.4354 L
  521.0542 -162.4354 L
  521.2644 -162.4354  521.4145 -162.6155  521.4145 -162.8257 C
  521.4145 -163.0359  521.2644 -163.1860  521.0542 -163.1860 C
  521.0542 -163.1860 L
  515.7998 -163.1860 L
  515.7998 -163.1860 L
  515.5897 -163.1860  515.4095 -163.0359  515.4095 -162.8257 C
  515.4095 -162.6155  515.5897 -162.4354  515.7998 -162.4354 C
  515.7998 -162.4354 L
B
U
u
  524.0567 -162.4354 m
  529.3111 -162.4354 L
  529.3111 -162.4354 L
  529.5213 -162.4354  529.6714 -162.6155  529.6714 -162.8257 C
  529.6714 -163.0359  529.5213 -163.1860  529.3111 -163.1860 C
  529.3111 -163.1860 L
  524.0567 -163.1860 L
  524.0567 -163.1860 L
  523.8465 -163.1860  523.6664 -163.0359  523.6664 -162.8257 C
  523.6664 -162.6155  523.8465 -162.4354  524.0567 -162.4354 C
  524.0567 -162.4354 L
B
U
u
  532.3136 -162.4354 m
  537.5680 -162.4354 L
  537.5680 -162.4354 L
  537.7781 -162.4354  537.9283 -162.6155  537.9283 -162.8257 C
  537.9283 -163.0359  537.7781 -163.1860  537.5680 -163.1860 C
  537.5680 -163.1860 L
  532.3136 -163.1860 L
  532.3136 -163.1860 L
  532.1034 -163.1860  531.9233 -163.0359  531.9233 -162.8257 C
  531.9233 -162.6155  532.1034 -162.4354  532.3136 -162.4354 C
  532.3136 -162.4354 L
B
U
u
  540.5705 -162.4354 m
  545.8249 -162.4354 L
  545.8249 -162.4354 L
  546.0350 -162.4354  546.1852 -162.6155  546.1852 -162.8257 C
  546.1852 -163.0359  546.0350 -163.1860  545.8249 -163.1860 C
  545.8249 -163.1860 L
  540.5705 -163.1860 L
  540.5705 -163.1860 L
  540.3603 -163.1860  540.1802 -163.0359  540.1802 -162.8257 C
  540.1802 -162.6155  540.3603 -162.4354  540.5705 -162.4354 C
  540.5705 -162.4354 L
B
U
u
  548.8274 -162.4354 m
  554.0817 -162.4354 L
  554.0817 -162.4354 L
  554.2919 -162.4354  554.4420 -162.6155  554.4420 -162.8257 C
  554.4420 -163.0359  554.2919 -163.1860  554.0817 -163.1860 C
  554.0817 -163.1860 L
  548.8274 -163.1860 L
  548.8274 -163.1860 L
  548.6172 -163.1860  548.4370 -163.0359  548.4370 -162.8257 C
  548.4370 -162.6155  548.6172 -162.4354  548.8274 -162.4354 C
  548.8274 -162.4354 L
B
U
u
  557.0842 -162.4354 m
  562.3386 -162.4354 L
  562.3386 -162.4354 L
  562.5488 -162.4354  562.6989 -162.6155  562.6989 -162.8257 C
  562.6989 -163.0359  562.5488 -163.1860  562.3386 -163.1860 C
  562.3386 -163.1860 L
  557.0842 -163.1860 L
  557.0842 -163.1860 L
  556.8741 -163.1860  556.6939 -163.0359  556.6939 -162.8257 C
  556.6939 -162.6155  556.8741 -162.4354  557.0842 -162.4354 C
  557.0842 -162.4354 L
B
U
u
  565.3411 -162.4354 m
  570.5955 -162.4354 L
  570.5955 -162.4354 L
  570.8057 -162.4354  570.9558 -162.6155  570.9558 -162.8257 C
  570.9558 -163.0359  570.8057 -163.1860  570.5955 -163.1860 C
  570.5955 -163.1860 L
  565.3411 -163.1860 L
  565.3411 -163.1860 L
  565.1309 -163.1860  564.9508 -163.0359  564.9508 -162.8257 C
  564.9508 -162.6155  565.1309 -162.4354  565.3411 -162.4354 C
  565.3411 -162.4354 L
B
U
u
  573.5980 -162.4354 m
  578.8524 -162.4354 L
  578.8524 -162.4354 L
  579.0626 -162.4354  579.2127 -162.6155  579.2127 -162.8257 C
  579.2127 -163.0359  579.0626 -163.1860  578.8524 -163.1860 C
  578.8524 -163.1860 L
  573.5980 -163.1860 L
  573.5980 -163.1860 L
  573.3878 -163.1860  573.2077 -163.0359  573.2077 -162.8257 C
  573.2077 -162.6155  573.3878 -162.4354  573.5980 -162.4354 C
  573.5980 -162.4354 L
B
U
u
  581.8549 -162.4354 m
  587.1093 -162.4354 L
  587.1093 -162.4354 L
  587.3194 -162.4354  587.4696 -162.6155  587.4696 -162.8257 C
  587.4696 -163.0359  587.3194 -163.1860  587.1093 -163.1860 C
  587.1093 -163.1860 L
  581.8549 -163.1860 L
  581.8549 -163.1860 L
  581.6447 -163.1860  581.4646 -163.0359  581.4646 -162.8257 C
  581.4646 -162.6155  581.6447 -162.4354  581.8549 -162.4354 C
  581.8549 -162.4354 L
B
U
u
  590.1118 -162.4354 m
  595.3661 -162.4354 L
  595.3661 -162.4354 L
  595.5763 -162.4354  595.7264 -162.6155  595.7264 -162.8257 C
  595.7264 -163.0359  595.5763 -163.1860  595.3661 -163.1860 C
  595.3661 -163.1860 L
  590.1118 -163.1860 L
  590.1118 -163.1860 L
  589.9016 -163.1860  589.7214 -163.0359  589.7214 -162.8257 C
  589.7214 -162.6155  589.9016 -162.4354  590.1118 -162.4354 C
  590.1118 -162.4354 L
B
U
u
  598.3686 -162.4354 m
  603.6230 -162.4354 L
  603.6230 -162.4354 L
  603.8332 -162.4354  603.9833 -162.6155  603.9833 -162.8257 C
  603.9833 -163.0359  603.8332 -163.1860  603.6230 -163.1860 C
  603.6230 -163.1860 L
  598.3686 -163.1860 L
  598.3686 -163.1860 L
  598.1585 -163.1860  597.9783 -163.0359  597.9783 -162.8257 C
  597.9783 -162.6155  598.1585 -162.4354  598.3686 -162.4354 C
  598.3686 -162.4354 L
B
U
u
  606.6255 -162.4354 m
  611.8799 -162.4354 L
  611.8799 -162.4354 L
  612.0901 -162.4354  612.2402 -162.6155  612.2402 -162.8257 C
  612.2402 -163.0359  612.0901 -163.1860  611.8799 -163.1860 C
  611.8799 -163.1860 L
  606.6255 -163.1860 L
  606.6255 -163.1860 L
  606.4153 -163.1860  606.2352 -163.0359  606.2352 -162.8257 C
  606.2352 -162.6155  606.4153 -162.4354  606.6255 -162.4354 C
  606.6255 -162.4354 L
B
U
u
  614.8824 -162.4354 m
  620.1368 -162.4354 L
  620.1368 -162.4354 L
  620.3470 -162.4354  620.4971 -162.6155  620.4971 -162.8257 C
  620.4971 -163.0359  620.3470 -163.1860  620.1368 -163.1860 C
  620.1368 -163.1860 L
  614.8824 -163.1860 L
  614.8824 -163.1860 L
  614.6722 -163.1860  614.4921 -163.0359  614.4921 -162.8257 C
  614.4921 -162.6155  614.6722 -162.4354  614.8824 -162.4354 C
  614.8824 -162.4354 L
B
U
u
  623.1393 -162.4354 m
  628.3937 -162.4354 L
  628.3937 -162.4354 L
  628.6038 -162.4354  628.7540 -162.6155  628.7540 -162.8257 C
  628.7540 -163.0359  628.6038 -163.1860  628.3937 -163.1860 C
  628.3937 -163.1860 L
  623.1393 -163.1860 L
  623.1393 -163.1860 L
  622.9291 -163.1860  622.7490 -163.0359  622.7490 -162.8257 C
  622.7490 -162.6155  622.9291 -162.4354  623.1393 -162.4354 C
  623.1393 -162.4354 L
B
U
u
  631.3962 -162.4354 m
  636.6505 -162.4354 L
  636.6505 -162.4354 L
  636.8607 -162.4354  637.0108 -162.6155  637.0108 -162.8257 C
  637.0108 -163.0359  636.8607 -163.1860  636.6505 -163.1860 C
  636.6505 -163.1860 L
  631.3962 -163.1860 L
  631.3962 -163.1860 L
  631.1860 -163.1860  631.0058 -163.0359  631.0058 -162.8257 C
  631.0058 -162.6155  631.1860 -162.4354  631.3962 -162.4354 C
  631.3962 -162.4354 L
B
U
u
  639.6530 -162.4354 m
  644.9074 -162.4354 L
  644.9074 -162.4354 L
  645.1176 -162.4354  645.2677 -162.6155  645.2677 -162.8257 C
  645.2677 -163.0359  645.1176 -163.1860  644.9074 -163.1860 C
  644.9074 -163.1860 L
  639.6530 -163.1860 L
  639.6530 -163.1860 L
  639.4429 -163.1860  639.2627 -163.0359  639.2627 -162.8257 C
  639.2627 -162.6155  639.4429 -162.4354  639.6530 -162.4354 C
  639.6530 -162.4354 L
B
U
u
  647.9099 -162.4354 m
  653.1643 -162.4354 L
  653.1643 -162.4354 L
  653.3745 -162.4354  653.5246 -162.6155  653.5246 -162.8257 C
  653.5246 -163.0359  653.3745 -163.1860  653.1643 -163.1860 C
  653.1643 -163.1860 L
  647.9099 -163.1860 L
  647.9099 -163.1860 L
  647.6997 -163.1860  647.5196 -163.0359  647.5196 -162.8257 C
  647.5196 -162.6155  647.6997 -162.4354  647.9099 -162.4354 C
  647.9099 -162.4354 L
B
U
u
  656.1668 -162.4354 m
  661.4212 -162.4354 L
  661.4212 -162.4354 L
  661.6314 -162.4354  661.7815 -162.6155  661.7815 -162.8257 C
  661.7815 -163.0359  661.6314 -163.1860  661.4212 -163.1860 C
  661.4212 -163.1860 L
  656.1668 -163.1860 L
  656.1668 -163.1860 L
  655.9566 -163.1860  655.7765 -163.0359  655.7765 -162.8257 C
  655.7765 -162.6155  655.9566 -162.4354  656.1668 -162.4354 C
  656.1668 -162.4354 L
B
U
u
  664.4237 -162.4354 m
  669.6781 -162.4354 L
  669.6781 -162.4354 L
  669.8882 -162.4354  670.0384 -162.6155  670.0384 -162.8257 C
  670.0384 -163.0359  669.8882 -163.1860  669.6781 -163.1860 C
  669.6781 -163.1860 L
  664.4237 -163.1860 L
  664.4237 -163.1860 L
  664.2135 -163.1860  664.0334 -163.0359  664.0334 -162.8257 C
  664.0334 -162.6155  664.2135 -162.4354  664.4237 -162.4354 C
  664.4237 -162.4354 L
B
U
u
  672.6806 -162.4354 m
  677.9349 -162.4354 L
  677.9349 -162.4354 L
  678.1451 -162.4354  678.2952 -162.6155  678.2952 -162.8257 C
  678.2952 -163.0359  678.1451 -163.1860  677.9349 -163.1860 C
  677.9349 -163.1860 L
  672.6806 -163.1860 L
  672.6806 -163.1860 L
  672.4704 -163.1860  672.2902 -163.0359  672.2902 -162.8257 C
  672.2902 -162.6155  672.4704 -162.4354  672.6806 -162.4354 C
  672.6806 -162.4354 L
B
U
*U
0 To
1.0000 0.0000 0.0000 1.0000 9.4495 242.7617 0 Tp
TP
/_Times-Roman 24.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  1.000 0.980 0.922 0.000 K
0 j
1 XR

  1.000 0.980 0.922 0.000 k
(Layer\r) Tx
TO
  1.000 0.980 0.922 0.000 K
0 To
1.0000 0.0000 0.0000 1.0000 74.9714 242.7617 0 Tp
TP
/_Times-Roman 24.0000 Tf
0.0000 Tc
 0 Tr
  1.000 0.980 0.922 0.000 K
  1.000 0.980 0.922 0.000 k
(1\r) Tx
TO
  1.000 0.980 0.922 0.000 K
0 To
1.0000 0.0000 0.0000 1.0000 9.4495 140.6137 0 Tp
TP
/_Times-Roman 24.0000 Tf
0.0000 Tc
 0 Tr
  1.000 0.980 0.922 0.000 k
(Layer\r) Tx
TO
  1.000 0.980 0.922 0.000 K
0 To
1.0000 0.0000 0.0000 1.0000 74.9714 140.6137 0 Tp
TP
/_Times-Roman 24.0000 Tf
0.0000 Tc
 0 Tr
  1.000 0.980 0.922 0.000 k
(2\r) Tx
TO
  1.000 0.980 0.922 0.000 K
0 To
1.0000 0.0000 0.0000 1.0000 9.4495 38.3454 0 Tp
TP
/_Times-Roman 24.0000 Tf
0.0000 Tc
 0 Tr
  1.000 0.980 0.922 0.000 k
(Layer\r) Tx
TO
  1.000 0.980 0.922 0.000 K
0 To
1.0000 0.0000 0.0000 1.0000 74.9714 38.3454 0 Tp
TP
/_Times-Roman 24.0000 Tf
0.0000 Tc
 0 Tr
  1.000 0.980 0.922 0.000 k
(3\r) Tx
TO
  1.000 0.980 0.922 0.000 K
0 XR

  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
*u
  36.9008 -258.9058 m
  42.1551 -258.9058 L
  42.1551 -258.9058 L
  42.3653 -258.9058  42.5154 -259.0559  42.5154 -259.2661 C
  42.5154 -259.4762  42.3653 -259.6564  42.1551 -259.6564 C
  42.1551 -259.6564 L
  36.9008 -259.6564 L
  36.9008 -259.6564 L
  36.6906 -259.6564  36.5104 -259.4762  36.5104 -259.2661 C
  36.5104 -259.0559  36.6906 -258.9058  36.9008 -258.9058 C
  36.9008 -258.9058 L
B
u
  45.1576 -258.9058 m
  50.4120 -258.9058 L
  50.4120 -258.9058 L
  50.6222 -258.9058  50.7723 -259.0559  50.7723 -259.2661 C
  50.7723 -259.4762  50.6222 -259.6564  50.4120 -259.6564 C
  50.4120 -259.6564 L
  45.1576 -259.6564 L
  45.1576 -259.6564 L
  44.9475 -259.6564  44.7673 -259.4762  44.7673 -259.2661 C
  44.7673 -259.0559  44.9475 -258.9058  45.1576 -258.9058 C
  45.1576 -258.9058 L
B
U
u
  53.4145 -258.9058 m
  58.6689 -258.9058 L
  58.6689 -258.9058 L
  58.8791 -258.9058  59.0292 -259.0559  59.0292 -259.2661 C
  59.0292 -259.4762  58.8791 -259.6564  58.6689 -259.6564 C
  58.6689 -259.6564 L
  53.4145 -259.6564 L
  53.4145 -259.6564 L
  53.2043 -259.6564  53.0242 -259.4762  53.0242 -259.2661 C
  53.0242 -259.0559  53.2043 -258.9058  53.4145 -258.9058 C
  53.4145 -258.9058 L
B
U
u
  61.6714 -258.9058 m
  66.9258 -258.9058 L
  66.9258 -258.9058 L
  67.1359 -258.9058  67.2861 -259.0559  67.2861 -259.2661 C
  67.2861 -259.4762  67.1359 -259.6564  66.9258 -259.6564 C
  66.9258 -259.6564 L
  61.6714 -259.6564 L
  61.6714 -259.6564 L
  61.4612 -259.6564  61.2811 -259.4762  61.2811 -259.2661 C
  61.2811 -259.0559  61.4612 -258.9058  61.6714 -258.9058 C
  61.6714 -258.9058 L
B
U
u
  69.9283 -258.9058 m
  75.1827 -258.9058 L
  75.1827 -258.9058 L
  75.3928 -258.9058  75.5430 -259.0559  75.5430 -259.2661 C
  75.5430 -259.4762  75.3928 -259.6564  75.1827 -259.6564 C
  75.1827 -259.6564 L
  69.9283 -259.6564 L
  69.9283 -259.6564 L
  69.7181 -259.6564  69.5379 -259.4762  69.5379 -259.2661 C
  69.5379 -259.0559  69.7181 -258.9058  69.9283 -258.9058 C
  69.9283 -258.9058 L
B
U
u
  78.1852 -258.9058 m
  83.4395 -258.9058 L
  83.4395 -258.9058 L
  83.6497 -258.9058  83.7998 -259.0559  83.7998 -259.2661 C
  83.7998 -259.4762  83.6497 -259.6564  83.4395 -259.6564 C
  83.4395 -259.6564 L
  78.1852 -259.6564 L
  78.1852 -259.6564 L
  77.9750 -259.6564  77.7948 -259.4762  77.7948 -259.2661 C
  77.7948 -259.0559  77.9750 -258.9058  78.1852 -258.9058 C
  78.1852 -258.9058 L
B
U
u
  86.4420 -258.9058 m
  91.6964 -258.9058 L
  91.6964 -258.9058 L
  91.9066 -258.9058  92.0567 -259.0559  92.0567 -259.2661 C
  92.0567 -259.4762  91.9066 -259.6564  91.6964 -259.6564 C
  91.6964 -259.6564 L
  86.4420 -259.6564 L
  86.4420 -259.6564 L
  86.2319 -259.6564  86.0517 -259.4762  86.0517 -259.2661 C
  86.0517 -259.0559  86.2319 -258.9058  86.4420 -258.9058 C
  86.4420 -258.9058 L
B
U
u
  94.6989 -258.9058 m
  99.9533 -258.9058 L
  99.9533 -258.9058 L
  100.1635 -258.9058  100.3136 -259.0559  100.3136 -259.2661 C
  100.3136 -259.4762  100.1635 -259.6564  99.9533 -259.6564 C
  99.9533 -259.6564 L
  94.6989 -259.6564 L
  94.6989 -259.6564 L
  94.4887 -259.6564  94.3086 -259.4762  94.3086 -259.2661 C
  94.3086 -259.0559  94.4887 -258.9058  94.6989 -258.9058 C
  94.6989 -258.9058 L
B
U
u
  102.9558 -258.9058 m
  108.2102 -258.9058 L
  108.2102 -258.9058 L
  108.4204 -258.9058  108.5705 -259.0559  108.5705 -259.2661 C
  108.5705 -259.4762  108.4204 -259.6564  108.2102 -259.6564 C
  108.2102 -259.6564 L
  102.9558 -259.6564 L
  102.9558 -259.6564 L
  102.7456 -259.6564  102.5655 -259.4762  102.5655 -259.2661 C
  102.5655 -259.0559  102.7456 -258.9058  102.9558 -258.9058 C
  102.9558 -258.9058 L
B
U
u
  111.2127 -258.9058 m
  116.4671 -258.9058 L
  116.4671 -258.9058 L
  116.6772 -258.9058  116.8274 -259.0559  116.8274 -259.2661 C
  116.8274 -259.4762  116.6772 -259.6564  116.4671 -259.6564 C
  116.4671 -259.6564 L
  111.2127 -259.6564 L
  111.2127 -259.6564 L
  111.0025 -259.6564  110.8224 -259.4762  110.8224 -259.2661 C
  110.8224 -259.0559  111.0025 -258.9058  111.2127 -258.9058 C
  111.2127 -258.9058 L
B
U
u
  119.4696 -258.9058 m
  124.7239 -258.9058 L
  124.7239 -258.9058 L
  124.9341 -258.9058  125.0842 -259.0559  125.0842 -259.2661 C
  125.0842 -259.4762  124.9341 -259.6564  124.7239 -259.6564 C
  124.7239 -259.6564 L
  119.4696 -259.6564 L
  119.4696 -259.6564 L
  119.2594 -259.6564  119.0792 -259.4762  119.0792 -259.2661 C
  119.0792 -259.0559  119.2594 -258.9058  119.4696 -258.9058 C
  119.4696 -258.9058 L
B
U
u
  127.7264 -258.9058 m
  132.9808 -258.9058 L
  132.9808 -258.9058 L
  133.1910 -258.9058  133.3411 -259.0559  133.3411 -259.2661 C
  133.3411 -259.4762  133.1910 -259.6564  132.9808 -259.6564 C
  132.9808 -259.6564 L
  127.7264 -259.6564 L
  127.7264 -259.6564 L
  127.5163 -259.6564  127.3361 -259.4762  127.3361 -259.2661 C
  127.3361 -259.0559  127.5163 -258.9058  127.7264 -258.9058 C
  127.7264 -258.9058 L
B
U
u
  135.9833 -258.9058 m
  141.2377 -258.9058 L
  141.2377 -258.9058 L
  141.4479 -258.9058  141.5980 -259.0559  141.5980 -259.2661 C
  141.5980 -259.4762  141.4479 -259.6564  141.2377 -259.6564 C
  141.2377 -259.6564 L
  135.9833 -259.6564 L
  135.9833 -259.6564 L
  135.7731 -259.6564  135.5930 -259.4762  135.5930 -259.2661 C
  135.5930 -259.0559  135.7731 -258.9058  135.9833 -258.9058 C
  135.9833 -258.9058 L
B
U
u
  144.2402 -258.9058 m
  149.4946 -258.9058 L
  149.4946 -258.9058 L
  149.7048 -258.9058  149.8549 -259.0559  149.8549 -259.2661 C
  149.8549 -259.4762  149.7048 -259.6564  149.4946 -259.6564 C
  149.4946 -259.6564 L
  144.2402 -259.6564 L
  144.2402 -259.6564 L
  144.0300 -259.6564  143.8499 -259.4762  143.8499 -259.2661 C
  143.8499 -259.0559  144.0300 -258.9058  144.2402 -258.9058 C
  144.2402 -258.9058 L
B
U
u
  152.4971 -258.9058 m
  157.7515 -258.9058 L
  157.7515 -258.9058 L
  157.9616 -258.9058  158.1118 -259.0559  158.1118 -259.2661 C
  158.1118 -259.4762  157.9616 -259.6564  157.7515 -259.6564 C
  157.7515 -259.6564 L
  152.4971 -259.6564 L
  152.4971 -259.6564 L
  152.2869 -259.6564  152.1068 -259.4762  152.1068 -259.2661 C
  152.1068 -259.0559  152.2869 -258.9058  152.4971 -258.9058 C
  152.4971 -258.9058 L
B
U
u
  160.7540 -258.9058 m
  166.0083 -258.9058 L
  166.0083 -258.9058 L
  166.2185 -258.9058  166.3686 -259.0559  166.3686 -259.2661 C
  166.3686 -259.4762  166.2185 -259.6564  166.0083 -259.6564 C
  166.0083 -259.6564 L
  160.7540 -259.6564 L
  160.7540 -259.6564 L
  160.5438 -259.6564  160.3636 -259.4762  160.3636 -259.2661 C
  160.3636 -259.0559  160.5438 -258.9058  160.7540 -258.9058 C
  160.7540 -258.9058 L
B
U
u
  169.0108 -258.9058 m
  174.2652 -258.9058 L
  174.2652 -258.9058 L
  174.4754 -258.9058  174.6255 -259.0559  174.6255 -259.2661 C
  174.6255 -259.4762  174.4754 -259.6564  174.2652 -259.6564 C
  174.2652 -259.6564 L
  169.0108 -259.6564 L
  169.0108 -259.6564 L
  168.8007 -259.6564  168.6205 -259.4762  168.6205 -259.2661 C
  168.6205 -259.0559  168.8007 -258.9058  169.0108 -258.9058 C
  169.0108 -258.9058 L
B
U
u
  177.2677 -258.9058 m
  182.5221 -258.9058 L
  182.5221 -258.9058 L
  182.7323 -258.9058  182.8824 -259.0559  182.8824 -259.2661 C
  182.8824 -259.4762  182.7323 -259.6564  182.5221 -259.6564 C
  182.5221 -259.6564 L
  177.2677 -259.6564 L
  177.2677 -259.6564 L
  177.0575 -259.6564  176.8774 -259.4762  176.8774 -259.2661 C
  176.8774 -259.0559  177.0575 -258.9058  177.2677 -258.9058 C
  177.2677 -258.9058 L
B
U
u
  185.5246 -258.9058 m
  190.7790 -258.9058 L
  190.7790 -258.9058 L
  190.9892 -258.9058  191.1393 -259.0559  191.1393 -259.2661 C
  191.1393 -259.4762  190.9892 -259.6564  190.7790 -259.6564 C
  190.7790 -259.6564 L
  185.5246 -259.6564 L
  185.5246 -259.6564 L
  185.3144 -259.6564  185.1343 -259.4762  185.1343 -259.2661 C
  185.1343 -259.0559  185.3144 -258.9058  185.5246 -258.9058 C
  185.5246 -258.9058 L
B
U
u
  193.7815 -258.9058 m
  199.0359 -258.9058 L
  199.0359 -258.9058 L
  199.2460 -258.9058  199.3962 -259.0559  199.3962 -259.2661 C
  199.3962 -259.4762  199.2460 -259.6564  199.0359 -259.6564 C
  199.0359 -259.6564 L
  193.7815 -259.6564 L
  193.7815 -259.6564 L
  193.5713 -259.6564  193.3912 -259.4762  193.3912 -259.2661 C
  193.3912 -259.0559  193.5713 -258.9058  193.7815 -258.9058 C
  193.7815 -258.9058 L
B
U
u
  202.0384 -258.9058 m
  207.2927 -258.9058 L
  207.2927 -258.9058 L
  207.5029 -258.9058  207.6530 -259.0559  207.6530 -259.2661 C
  207.6530 -259.4762  207.5029 -259.6564  207.2927 -259.6564 C
  207.2927 -259.6564 L
  202.0384 -259.6564 L
  202.0384 -259.6564 L
  201.8282 -259.6564  201.6480 -259.4762  201.6480 -259.2661 C
  201.6480 -259.0559  201.8282 -258.9058  202.0384 -258.9058 C
  202.0384 -258.9058 L
B
U
u
  210.2952 -258.9058 m
  215.5496 -258.9058 L
  215.5496 -258.9058 L
  215.7598 -258.9058  215.9099 -259.0559  215.9099 -259.2661 C
  215.9099 -259.4762  215.7598 -259.6564  215.5496 -259.6564 C
  215.5496 -259.6564 L
  210.2952 -259.6564 L
  210.2952 -259.6564 L
  210.0851 -259.6564  209.9049 -259.4762  209.9049 -259.2661 C
  209.9049 -259.0559  210.0851 -258.9058  210.2952 -258.9058 C
  210.2952 -258.9058 L
B
U
u
  218.5521 -258.9058 m
  223.8065 -258.9058 L
  223.8065 -258.9058 L
  224.0167 -258.9058  224.1668 -259.0559  224.1668 -259.2661 C
  224.1668 -259.4762  224.0167 -259.6564  223.8065 -259.6564 C
  223.8065 -259.6564 L
  218.5521 -259.6564 L
  218.5521 -259.6564 L
  218.3420 -259.6564  218.1618 -259.4762  218.1618 -259.2661 C
  218.1618 -259.0559  218.3420 -258.9058  218.5521 -258.9058 C
  218.5521 -258.9058 L
B
U
u
  226.8090 -258.9058 m
  232.0634 -258.9058 L
  232.0634 -258.9058 L
  232.2736 -258.9058  232.4237 -259.0559  232.4237 -259.2661 C
  232.4237 -259.4762  232.2736 -259.6564  232.0634 -259.6564 C
  232.0634 -259.6564 L
  226.8090 -259.6564 L
  226.8090 -259.6564 L
  226.5988 -259.6564  226.4187 -259.4762  226.4187 -259.2661 C
  226.4187 -259.0559  226.5988 -258.9058  226.8090 -258.9058 C
  226.8090 -258.9058 L
B
U
u
  235.0659 -258.9058 m
  240.3203 -258.9058 L
  240.3203 -258.9058 L
  240.5304 -258.9058  240.6806 -259.0559  240.6806 -259.2661 C
  240.6806 -259.4762  240.5304 -259.6564  240.3203 -259.6564 C
  240.3203 -259.6564 L
  235.0659 -259.6564 L
  235.0659 -259.6564 L
  234.8557 -259.6564  234.6756 -259.4762  234.6756 -259.2661 C
  234.6756 -259.0559  234.8557 -258.9058  235.0659 -258.9058 C
  235.0659 -258.9058 L
B
U
u
  243.3228 -258.9058 m
  248.5771 -258.9058 L
  248.5771 -258.9058 L
  248.7873 -258.9058  248.9374 -259.0559  248.9374 -259.2661 C
  248.9374 -259.4762  248.7873 -259.6564  248.5771 -259.6564 C
  248.5771 -259.6564 L
  243.3228 -259.6564 L
  243.3228 -259.6564 L
  243.1126 -259.6564  242.9324 -259.4762  242.9324 -259.2661 C
  242.9324 -259.0559  243.1126 -258.9058  243.3228 -258.9058 C
  243.3228 -258.9058 L
B
U
u
  251.5796 -258.9058 m
  256.8340 -258.9058 L
  256.8340 -258.9058 L
  257.0442 -258.9058  257.1943 -259.0559  257.1943 -259.2661 C
  257.1943 -259.4762  257.0442 -259.6564  256.8340 -259.6564 C
  256.8340 -259.6564 L
  251.5796 -259.6564 L
  251.5796 -259.6564 L
  251.3695 -259.6564  251.1893 -259.4762  251.1893 -259.2661 C
  251.1893 -259.0559  251.3695 -258.9058  251.5796 -258.9058 C
  251.5796 -258.9058 L
B
U
u
  259.8365 -258.9058 m
  265.0909 -258.9058 L
  265.0909 -258.9058 L
  265.3011 -258.9058  265.4512 -259.0559  265.4512 -259.2661 C
  265.4512 -259.4762  265.3011 -259.6564  265.0909 -259.6564 C
  265.0909 -259.6564 L
  259.8365 -259.6564 L
  259.8365 -259.6564 L
  259.6264 -259.6564  259.4462 -259.4762  259.4462 -259.2661 C
  259.4462 -259.0559  259.6264 -258.9058  259.8365 -258.9058 C
  259.8365 -258.9058 L
B
U
u
  268.0934 -258.9058 m
  273.3478 -258.9058 L
  273.3478 -258.9058 L
  273.5580 -258.9058  273.7081 -259.0559  273.7081 -259.2661 C
  273.7081 -259.4762  273.5580 -259.6564  273.3478 -259.6564 C
  273.3478 -259.6564 L
  268.0934 -259.6564 L
  268.0934 -259.6564 L
  267.8832 -259.6564  267.7031 -259.4762  267.7031 -259.2661 C
  267.7031 -259.0559  267.8832 -258.9058  268.0934 -258.9058 C
  268.0934 -258.9058 L
B
U
u
  276.3503 -258.9058 m
  281.6047 -258.9058 L
  281.6047 -258.9058 L
  281.8148 -258.9058  281.9650 -259.0559  281.9650 -259.2661 C
  281.9650 -259.4762  281.8148 -259.6564  281.6047 -259.6564 C
  281.6047 -259.6564 L
  276.3503 -259.6564 L
  276.3503 -259.6564 L
  276.1401 -259.6564  275.9600 -259.4762  275.9600 -259.2661 C
  275.9600 -259.0559  276.1401 -258.9058  276.3503 -258.9058 C
  276.3503 -258.9058 L
B
U
u
  284.6072 -258.9058 m
  289.8616 -258.9058 L
  289.8616 -258.9058 L
  290.0717 -258.9058  290.2219 -259.0559  290.2219 -259.2661 C
  290.2219 -259.4762  290.0717 -259.6564  289.8616 -259.6564 C
  289.8616 -259.6564 L
  284.6072 -259.6564 L
  284.6072 -259.6564 L
  284.3970 -259.6564  284.2168 -259.4762  284.2168 -259.2661 C
  284.2168 -259.0559  284.3970 -258.9058  284.6072 -258.9058 C
  284.6072 -258.9058 L
B
U
u
  292.8641 -258.9058 m
  298.1184 -258.9058 L
  298.1184 -258.9058 L
  298.3286 -258.9058  298.4787 -259.0559  298.4787 -259.2661 C
  298.4787 -259.4762  298.3286 -259.6564  298.1184 -259.6564 C
  298.1184 -259.6564 L
  292.8641 -259.6564 L
  292.8641 -259.6564 L
  292.6539 -259.6564  292.4737 -259.4762  292.4737 -259.2661 C
  292.4737 -259.0559  292.6539 -258.9058  292.8641 -258.9058 C
  292.8641 -258.9058 L
B
U
u
  301.1209 -258.9058 m
  306.3753 -258.9058 L
  306.3753 -258.9058 L
  306.5855 -258.9058  306.7356 -259.0559  306.7356 -259.2661 C
  306.7356 -259.4762  306.5855 -259.6564  306.3753 -259.6564 C
  306.3753 -259.6564 L
  301.1209 -259.6564 L
  301.1209 -259.6564 L
  300.9108 -259.6564  300.7306 -259.4762  300.7306 -259.2661 C
  300.7306 -259.0559  300.9108 -258.9058  301.1209 -258.9058 C
  301.1209 -258.9058 L
B
U
u
  309.3778 -258.9058 m
  314.6322 -258.9058 L
  314.6322 -258.9058 L
  314.8424 -258.9058  314.9925 -259.0559  314.9925 -259.2661 C
  314.9925 -259.4762  314.8424 -259.6564  314.6322 -259.6564 C
  314.6322 -259.6564 L
  309.3778 -259.6564 L
  309.3778 -259.6564 L
  309.1676 -259.6564  308.9875 -259.4762  308.9875 -259.2661 C
  308.9875 -259.0559  309.1676 -258.9058  309.3778 -258.9058 C
  309.3778 -258.9058 L
B
U
u
  317.6347 -258.9058 m
  322.8891 -258.9058 L
  322.8891 -258.9058 L
  323.0992 -258.9058  323.2494 -259.0559  323.2494 -259.2661 C
  323.2494 -259.4762  323.0992 -259.6564  322.8891 -259.6564 C
  322.8891 -259.6564 L
  317.6347 -259.6564 L
  317.6347 -259.6564 L
  317.4245 -259.6564  317.2444 -259.4762  317.2444 -259.2661 C
  317.2444 -259.0559  317.4245 -258.9058  317.6347 -258.9058 C
  317.6347 -258.9058 L
B
U
u
  325.8916 -258.9058 m
  331.1460 -258.9058 L
  331.1460 -258.9058 L
  331.3561 -258.9058  331.5063 -259.0559  331.5063 -259.2661 C
  331.5063 -259.4762  331.3561 -259.6564  331.1460 -259.6564 C
  331.1460 -259.6564 L
  325.8916 -259.6564 L
  325.8916 -259.6564 L
  325.6814 -259.6564  325.5013 -259.4762  325.5013 -259.2661 C
  325.5013 -259.0559  325.6814 -258.9058  325.8916 -258.9058 C
  325.8916 -258.9058 L
B
U
u
  334.1485 -258.9058 m
  339.4028 -258.9058 L
  339.4028 -258.9058 L
  339.6130 -258.9058  339.7631 -259.0559  339.7631 -259.2661 C
  339.7631 -259.4762  339.6130 -259.6564  339.4028 -259.6564 C
  339.4028 -259.6564 L
  334.1485 -259.6564 L
  334.1485 -259.6564 L
  333.9383 -259.6564  333.7581 -259.4762  333.7581 -259.2661 C
  333.7581 -259.0559  333.9383 -258.9058  334.1485 -258.9058 C
  334.1485 -258.9058 L
B
U
u
  342.4053 -258.9058 m
  347.6597 -258.9058 L
  347.6597 -258.9058 L
  347.8699 -258.9058  348.0200 -259.0559  348.0200 -259.2661 C
  348.0200 -259.4762  347.8699 -259.6564  347.6597 -259.6564 C
  347.6597 -259.6564 L
  342.4053 -259.6564 L
  342.4053 -259.6564 L
  342.1952 -259.6564  342.0150 -259.4762  342.0150 -259.2661 C
  342.0150 -259.0559  342.1952 -258.9058  342.4053 -258.9058 C
  342.4053 -258.9058 L
B
U
u
  350.6622 -258.9058 m
  355.9166 -258.9058 L
  355.9166 -258.9058 L
  356.1268 -258.9058  356.2769 -259.0559  356.2769 -259.2661 C
  356.2769 -259.4762  356.1268 -259.6564  355.9166 -259.6564 C
  355.9166 -259.6564 L
  350.6622 -259.6564 L
  350.6622 -259.6564 L
  350.4520 -259.6564  350.2719 -259.4762  350.2719 -259.2661 C
  350.2719 -259.0559  350.4520 -258.9058  350.6622 -258.9058 C
  350.6622 -258.9058 L
B
U
u
  358.9191 -258.9058 m
  364.1735 -258.9058 L
  364.1735 -258.9058 L
  364.3837 -258.9058  364.5338 -259.0559  364.5338 -259.2661 C
  364.5338 -259.4762  364.3837 -259.6564  364.1735 -259.6564 C
  364.1735 -259.6564 L
  358.9191 -259.6564 L
  358.9191 -259.6564 L
  358.7089 -259.6564  358.5288 -259.4762  358.5288 -259.2661 C
  358.5288 -259.0559  358.7089 -258.9058  358.9191 -258.9058 C
  358.9191 -258.9058 L
B
U
u
  367.1760 -258.9058 m
  372.4304 -258.9058 L
  372.4304 -258.9058 L
  372.6405 -258.9058  372.7907 -259.0559  372.7907 -259.2661 C
  372.7907 -259.4762  372.6405 -259.6564  372.4304 -259.6564 C
  372.4304 -259.6564 L
  367.1760 -259.6564 L
  367.1760 -259.6564 L
  366.9658 -259.6564  366.7857 -259.4762  366.7857 -259.2661 C
  366.7857 -259.0559  366.9658 -258.9058  367.1760 -258.9058 C
  367.1760 -258.9058 L
B
U
u
  375.4329 -258.9058 m
  380.6872 -258.9058 L
  380.6872 -258.9058 L
  380.8974 -258.9058  381.0475 -259.0559  381.0475 -259.2661 C
  381.0475 -259.4762  380.8974 -259.6564  380.6872 -259.6564 C
  380.6872 -259.6564 L
  375.4329 -259.6564 L
  375.4329 -259.6564 L
  375.2227 -259.6564  375.0425 -259.4762  375.0425 -259.2661 C
  375.0425 -259.0559  375.2227 -258.9058  375.4329 -258.9058 C
  375.4329 -258.9058 L
B
U
u
  383.6897 -258.9058 m
  388.9441 -258.9058 L
  388.9441 -258.9058 L
  389.1543 -258.9058  389.3044 -259.0559  389.3044 -259.2661 C
  389.3044 -259.4762  389.1543 -259.6564  388.9441 -259.6564 C
  388.9441 -259.6564 L
  383.6897 -259.6564 L
  383.6897 -259.6564 L
  383.4796 -259.6564  383.2994 -259.4762  383.2994 -259.2661 C
  383.2994 -259.0559  383.4796 -258.9058  383.6897 -258.9058 C
  383.6897 -258.9058 L
B
U
u
  391.9466 -258.9058 m
  397.2010 -258.9058 L
  397.2010 -258.9058 L
  397.4112 -258.9058  397.5613 -259.0559  397.5613 -259.2661 C
  397.5613 -259.4762  397.4112 -259.6564  397.2010 -259.6564 C
  397.2010 -259.6564 L
  391.9466 -259.6564 L
  391.9466 -259.6564 L
  391.7364 -259.6564  391.5563 -259.4762  391.5563 -259.2661 C
  391.5563 -259.0559  391.7364 -258.9058  391.9466 -258.9058 C
  391.9466 -258.9058 L
B
U
u
  400.2035 -258.9058 m
  405.4579 -258.9058 L
  405.4579 -258.9058 L
  405.6681 -258.9058  405.8182 -259.0559  405.8182 -259.2661 C
  405.8182 -259.4762  405.6681 -259.6564  405.4579 -259.6564 C
  405.4579 -259.6564 L
  400.2035 -259.6564 L
  400.2035 -259.6564 L
  399.9933 -259.6564  399.8132 -259.4762  399.8132 -259.2661 C
  399.8132 -259.0559  399.9933 -258.9058  400.2035 -258.9058 C
  400.2035 -258.9058 L
B
U
u
  408.4604 -258.9058 m
  413.7148 -258.9058 L
  413.7148 -258.9058 L
  413.9249 -258.9058  414.0751 -259.0559  414.0751 -259.2661 C
  414.0751 -259.4762  413.9249 -259.6564  413.7148 -259.6564 C
  413.7148 -259.6564 L
  408.4604 -259.6564 L
  408.4604 -259.6564 L
  408.2502 -259.6564  408.0701 -259.4762  408.0701 -259.2661 C
  408.0701 -259.0559  408.2502 -258.9058  408.4604 -258.9058 C
  408.4604 -258.9058 L
B
U
u
  416.7173 -258.9058 m
  421.9716 -258.9058 L
  421.9716 -258.9058 L
  422.1818 -258.9058  422.3319 -259.0559  422.3319 -259.2661 C
  422.3319 -259.4762  422.1818 -259.6564  421.9716 -259.6564 C
  421.9716 -259.6564 L
  416.7173 -259.6564 L
  416.7173 -259.6564 L
  416.5071 -259.6564  416.3269 -259.4762  416.3269 -259.2661 C
  416.3269 -259.0559  416.5071 -258.9058  416.7173 -258.9058 C
  416.7173 -258.9058 L
B
U
u
  424.9741 -258.9058 m
  430.2285 -258.9058 L
  430.2285 -258.9058 L
  430.4387 -258.9058  430.5888 -259.0559  430.5888 -259.2661 C
  430.5888 -259.4762  430.4387 -259.6564  430.2285 -259.6564 C
  430.2285 -259.6564 L
  424.9741 -259.6564 L
  424.9741 -259.6564 L
  424.7640 -259.6564  424.5838 -259.4762  424.5838 -259.2661 C
  424.5838 -259.0559  424.7640 -258.9058  424.9741 -258.9058 C
  424.9741 -258.9058 L
B
U
u
  433.2310 -258.9058 m
  438.4854 -258.9058 L
  438.4854 -258.9058 L
  438.6956 -258.9058  438.8457 -259.0559  438.8457 -259.2661 C
  438.8457 -259.4762  438.6956 -259.6564  438.4854 -259.6564 C
  438.4854 -259.6564 L
  433.2310 -259.6564 L
  433.2310 -259.6564 L
  433.0209 -259.6564  432.8407 -259.4762  432.8407 -259.2661 C
  432.8407 -259.0559  433.0209 -258.9058  433.2310 -258.9058 C
  433.2310 -258.9058 L
B
U
u
  441.4879 -258.9058 m
  446.7423 -258.9058 L
  446.7423 -258.9058 L
  446.9525 -258.9058  447.1026 -259.0559  447.1026 -259.2661 C
  447.1026 -259.4762  446.9525 -259.6564  446.7423 -259.6564 C
  446.7423 -259.6564 L
  441.4879 -259.6564 L
  441.4879 -259.6564 L
  441.2777 -259.6564  441.0976 -259.4762  441.0976 -259.2661 C
  441.0976 -259.0559  441.2777 -258.9058  441.4879 -258.9058 C
  441.4879 -258.9058 L
B
U
u
  449.7448 -258.9058 m
  454.9992 -258.9058 L
  454.9992 -258.9058 L
  455.2093 -258.9058  455.3595 -259.0559  455.3595 -259.2661 C
  455.3595 -259.4762  455.2093 -259.6564  454.9992 -259.6564 C
  454.9992 -259.6564 L
  449.7448 -259.6564 L
  449.7448 -259.6564 L
  449.5346 -259.6564  449.3545 -259.4762  449.3545 -259.2661 C
  449.3545 -259.0559  449.5346 -258.9058  449.7448 -258.9058 C
  449.7448 -258.9058 L
B
U
u
  458.0017 -258.9058 m
  463.2560 -258.9058 L
  463.2560 -258.9058 L
  463.4662 -258.9058  463.6163 -259.0559  463.6163 -259.2661 C
  463.6163 -259.4762  463.4662 -259.6564  463.2560 -259.6564 C
  463.2560 -259.6564 L
  458.0017 -259.6564 L
  458.0017 -259.6564 L
  457.7915 -259.6564  457.6113 -259.4762  457.6113 -259.2661 C
  457.6113 -259.0559  457.7915 -258.9058  458.0017 -258.9058 C
  458.0017 -258.9058 L
B
U
u
  466.2585 -258.9058 m
  471.5129 -258.9058 L
  471.5129 -258.9058 L
  471.7231 -258.9058  471.8732 -259.0559  471.8732 -259.2661 C
  471.8732 -259.4762  471.7231 -259.6564  471.5129 -259.6564 C
  471.5129 -259.6564 L
  466.2585 -259.6564 L
  466.2585 -259.6564 L
  466.0484 -259.6564  465.8682 -259.4762  465.8682 -259.2661 C
  465.8682 -259.0559  466.0484 -258.9058  466.2585 -258.9058 C
  466.2585 -258.9058 L
B
U
u
  474.5154 -258.9058 m
  479.7698 -258.9058 L
  479.7698 -258.9058 L
  479.9800 -258.9058  480.1301 -259.0559  480.1301 -259.2661 C
  480.1301 -259.4762  479.9800 -259.6564  479.7698 -259.6564 C
  479.7698 -259.6564 L
  474.5154 -259.6564 L
  474.5154 -259.6564 L
  474.3053 -259.6564  474.1251 -259.4762  474.1251 -259.2661 C
  474.1251 -259.0559  474.3053 -258.9058  474.5154 -258.9058 C
  474.5154 -258.9058 L
B
U
u
  482.7723 -258.9058 m
  488.0267 -258.9058 L
  488.0267 -258.9058 L
  488.2369 -258.9058  488.3870 -259.0559  488.3870 -259.2661 C
  488.3870 -259.4762  488.2369 -259.6564  488.0267 -259.6564 C
  488.0267 -259.6564 L
  482.7723 -259.6564 L
  482.7723 -259.6564 L
  482.5621 -259.6564  482.3820 -259.4762  482.3820 -259.2661 C
  482.3820 -259.0559  482.5621 -258.9058  482.7723 -258.9058 C
  482.7723 -258.9058 L
B
U
u
  491.0292 -258.9058 m
  496.2836 -258.9058 L
  496.2836 -258.9058 L
  496.4937 -258.9058  496.6439 -259.0559  496.6439 -259.2661 C
  496.6439 -259.4762  496.4937 -259.6564  496.2836 -259.6564 C
  496.2836 -259.6564 L
  491.0292 -259.6564 L
  491.0292 -259.6564 L
  490.8190 -259.6564  490.6389 -259.4762  490.6389 -259.2661 C
  490.6389 -259.0559  490.8190 -258.9058  491.0292 -258.9058 C
  491.0292 -258.9058 L
B
U
u
  499.2861 -258.9058 m
  504.5405 -258.9058 L
  504.5405 -258.9058 L
  504.7506 -258.9058  504.9008 -259.0559  504.9008 -259.2661 C
  504.9008 -259.4762  504.7506 -259.6564  504.5405 -259.6564 C
  504.5405 -259.6564 L
  499.2861 -259.6564 L
  499.2861 -259.6564 L
  499.0759 -259.6564  498.8957 -259.4762  498.8957 -259.2661 C
  498.8957 -259.0559  499.0759 -258.9058  499.2861 -258.9058 C
  499.2861 -258.9058 L
B
U
u
  507.5430 -258.9058 m
  512.7973 -258.9058 L
  512.7973 -258.9058 L
  513.0075 -258.9058  513.1576 -259.0559  513.1576 -259.2661 C
  513.1576 -259.4762  513.0075 -259.6564  512.7973 -259.6564 C
  512.7973 -259.6564 L
  507.5430 -259.6564 L
  507.5430 -259.6564 L
  507.3328 -259.6564  507.1526 -259.4762  507.1526 -259.2661 C
  507.1526 -259.0559  507.3328 -258.9058  507.5430 -258.9058 C
  507.5430 -258.9058 L
B
U
u
  515.7998 -258.9058 m
  521.0542 -258.9058 L
  521.0542 -258.9058 L
  521.2644 -258.9058  521.4145 -259.0559  521.4145 -259.2661 C
  521.4145 -259.4762  521.2644 -259.6564  521.0542 -259.6564 C
  521.0542 -259.6564 L
  515.7998 -259.6564 L
  515.7998 -259.6564 L
  515.5897 -259.6564  515.4095 -259.4762  515.4095 -259.2661 C
  515.4095 -259.0559  515.5897 -258.9058  515.7998 -258.9058 C
  515.7998 -258.9058 L
B
U
u
  524.0567 -258.9058 m
  529.3111 -258.9058 L
  529.3111 -258.9058 L
  529.5213 -258.9058  529.6714 -259.0559  529.6714 -259.2661 C
  529.6714 -259.4762  529.5213 -259.6564  529.3111 -259.6564 C
  529.3111 -259.6564 L
  524.0567 -259.6564 L
  524.0567 -259.6564 L
  523.8465 -259.6564  523.6664 -259.4762  523.6664 -259.2661 C
  523.6664 -259.0559  523.8465 -258.9058  524.0567 -258.9058 C
  524.0567 -258.9058 L
B
U
u
  532.3136 -258.9058 m
  537.5680 -258.9058 L
  537.5680 -258.9058 L
  537.7781 -258.9058  537.9283 -259.0559  537.9283 -259.2661 C
  537.9283 -259.4762  537.7781 -259.6564  537.5680 -259.6564 C
  537.5680 -259.6564 L
  532.3136 -259.6564 L
  532.3136 -259.6564 L
  532.1034 -259.6564  531.9233 -259.4762  531.9233 -259.2661 C
  531.9233 -259.0559  532.1034 -258.9058  532.3136 -258.9058 C
  532.3136 -258.9058 L
B
U
u
  540.5705 -258.9058 m
  545.8249 -258.9058 L
  545.8249 -258.9058 L
  546.0350 -258.9058  546.1852 -259.0559  546.1852 -259.2661 C
  546.1852 -259.4762  546.0350 -259.6564  545.8249 -259.6564 C
  545.8249 -259.6564 L
  540.5705 -259.6564 L
  540.5705 -259.6564 L
  540.3603 -259.6564  540.1802 -259.4762  540.1802 -259.2661 C
  540.1802 -259.0559  540.3603 -258.9058  540.5705 -258.9058 C
  540.5705 -258.9058 L
B
U
u
  548.8274 -258.9058 m
  554.0817 -258.9058 L
  554.0817 -258.9058 L
  554.2919 -258.9058  554.4420 -259.0559  554.4420 -259.2661 C
  554.4420 -259.4762  554.2919 -259.6564  554.0817 -259.6564 C
  554.0817 -259.6564 L
  548.8274 -259.6564 L
  548.8274 -259.6564 L
  548.6172 -259.6564  548.4370 -259.4762  548.4370 -259.2661 C
  548.4370 -259.0559  548.6172 -258.9058  548.8274 -258.9058 C
  548.8274 -258.9058 L
B
U
u
  557.0842 -258.9058 m
  562.3386 -258.9058 L
  562.3386 -258.9058 L
  562.5488 -258.9058  562.6989 -259.0559  562.6989 -259.2661 C
  562.6989 -259.4762  562.5488 -259.6564  562.3386 -259.6564 C
  562.3386 -259.6564 L
  557.0842 -259.6564 L
  557.0842 -259.6564 L
  556.8741 -259.6564  556.6939 -259.4762  556.6939 -259.2661 C
  556.6939 -259.0559  556.8741 -258.9058  557.0842 -258.9058 C
  557.0842 -258.9058 L
B
U
u
  565.3411 -258.9058 m
  570.5955 -258.9058 L
  570.5955 -258.9058 L
  570.8057 -258.9058  570.9558 -259.0559  570.9558 -259.2661 C
  570.9558 -259.4762  570.8057 -259.6564  570.5955 -259.6564 C
  570.5955 -259.6564 L
  565.3411 -259.6564 L
  565.3411 -259.6564 L
  565.1309 -259.6564  564.9508 -259.4762  564.9508 -259.2661 C
  564.9508 -259.0559  565.1309 -258.9058  565.3411 -258.9058 C
  565.3411 -258.9058 L
B
U
u
  573.5980 -258.9058 m
  578.8524 -258.9058 L
  578.8524 -258.9058 L
  579.0626 -258.9058  579.2127 -259.0559  579.2127 -259.2661 C
  579.2127 -259.4762  579.0626 -259.6564  578.8524 -259.6564 C
  578.8524 -259.6564 L
  573.5980 -259.6564 L
  573.5980 -259.6564 L
  573.3878 -259.6564  573.2077 -259.4762  573.2077 -259.2661 C
  573.2077 -259.0559  573.3878 -258.9058  573.5980 -258.9058 C
  573.5980 -258.9058 L
B
U
u
  581.8549 -258.9058 m
  587.1093 -258.9058 L
  587.1093 -258.9058 L
  587.3194 -258.9058  587.4696 -259.0559  587.4696 -259.2661 C
  587.4696 -259.4762  587.3194 -259.6564  587.1093 -259.6564 C
  587.1093 -259.6564 L
  581.8549 -259.6564 L
  581.8549 -259.6564 L
  581.6447 -259.6564  581.4646 -259.4762  581.4646 -259.2661 C
  581.4646 -259.0559  581.6447 -258.9058  581.8549 -258.9058 C
  581.8549 -258.9058 L
B
U
u
  590.1118 -258.9058 m
  595.3661 -258.9058 L
  595.3661 -258.9058 L
  595.5763 -258.9058  595.7264 -259.0559  595.7264 -259.2661 C
  595.7264 -259.4762  595.5763 -259.6564  595.3661 -259.6564 C
  595.3661 -259.6564 L
  590.1118 -259.6564 L
  590.1118 -259.6564 L
  589.9016 -259.6564  589.7214 -259.4762  589.7214 -259.2661 C
  589.7214 -259.0559  589.9016 -258.9058  590.1118 -258.9058 C
  590.1118 -258.9058 L
B
U
u
  598.3686 -258.9058 m
  603.6230 -258.9058 L
  603.6230 -258.9058 L
  603.8332 -258.9058  603.9833 -259.0559  603.9833 -259.2661 C
  603.9833 -259.4762  603.8332 -259.6564  603.6230 -259.6564 C
  603.6230 -259.6564 L
  598.3686 -259.6564 L
  598.3686 -259.6564 L
  598.1585 -259.6564  597.9783 -259.4762  597.9783 -259.2661 C
  597.9783 -259.0559  598.1585 -258.9058  598.3686 -258.9058 C
  598.3686 -258.9058 L
B
U
u
  606.6255 -258.9058 m
  611.8799 -258.9058 L
  611.8799 -258.9058 L
  612.0901 -258.9058  612.2402 -259.0559  612.2402 -259.2661 C
  612.2402 -259.4762  612.0901 -259.6564  611.8799 -259.6564 C
  611.8799 -259.6564 L
  606.6255 -259.6564 L
  606.6255 -259.6564 L
  606.4153 -259.6564  606.2352 -259.4762  606.2352 -259.2661 C
  606.2352 -259.0559  606.4153 -258.9058  606.6255 -258.9058 C
  606.6255 -258.9058 L
B
U
u
  614.8824 -258.9058 m
  620.1368 -258.9058 L
  620.1368 -258.9058 L
  620.3470 -258.9058  620.4971 -259.0559  620.4971 -259.2661 C
  620.4971 -259.4762  620.3470 -259.6564  620.1368 -259.6564 C
  620.1368 -259.6564 L
  614.8824 -259.6564 L
  614.8824 -259.6564 L
  614.6722 -259.6564  614.4921 -259.4762  614.4921 -259.2661 C
  614.4921 -259.0559  614.6722 -258.9058  614.8824 -258.9058 C
  614.8824 -258.9058 L
B
U
u
  623.1393 -258.9058 m
  628.3937 -258.9058 L
  628.3937 -258.9058 L
  628.6038 -258.9058  628.7540 -259.0559  628.7540 -259.2661 C
  628.7540 -259.4762  628.6038 -259.6564  628.3937 -259.6564 C
  628.3937 -259.6564 L
  623.1393 -259.6564 L
  623.1393 -259.6564 L
  622.9291 -259.6564  622.7490 -259.4762  622.7490 -259.2661 C
  622.7490 -259.0559  622.9291 -258.9058  623.1393 -258.9058 C
  623.1393 -258.9058 L
B
U
u
  631.3962 -258.9058 m
  636.6505 -258.9058 L
  636.6505 -258.9058 L
  636.8607 -258.9058  637.0108 -259.0559  637.0108 -259.2661 C
  637.0108 -259.4762  636.8607 -259.6564  636.6505 -259.6564 C
  636.6505 -259.6564 L
  631.3962 -259.6564 L
  631.3962 -259.6564 L
  631.1860 -259.6564  631.0058 -259.4762  631.0058 -259.2661 C
  631.0058 -259.0559  631.1860 -258.9058  631.3962 -258.9058 C
  631.3962 -258.9058 L
B
U
u
  639.6530 -258.9058 m
  644.9074 -258.9058 L
  644.9074 -258.9058 L
  645.1176 -258.9058  645.2677 -259.0559  645.2677 -259.2661 C
  645.2677 -259.4762  645.1176 -259.6564  644.9074 -259.6564 C
  644.9074 -259.6564 L
  639.6530 -259.6564 L
  639.6530 -259.6564 L
  639.4429 -259.6564  639.2627 -259.4762  639.2627 -259.2661 C
  639.2627 -259.0559  639.4429 -258.9058  639.6530 -258.9058 C
  639.6530 -258.9058 L
B
U
u
  647.9099 -258.9058 m
  653.1643 -258.9058 L
  653.1643 -258.9058 L
  653.3745 -258.9058  653.5246 -259.0559  653.5246 -259.2661 C
  653.5246 -259.4762  653.3745 -259.6564  653.1643 -259.6564 C
  653.1643 -259.6564 L
  647.9099 -259.6564 L
  647.9099 -259.6564 L
  647.6997 -259.6564  647.5196 -259.4762  647.5196 -259.2661 C
  647.5196 -259.0559  647.6997 -258.9058  647.9099 -258.9058 C
  647.9099 -258.9058 L
B
U
u
  656.1668 -258.9058 m
  661.4212 -258.9058 L
  661.4212 -258.9058 L
  661.6314 -258.9058  661.7815 -259.0559  661.7815 -259.2661 C
  661.7815 -259.4762  661.6314 -259.6564  661.4212 -259.6564 C
  661.4212 -259.6564 L
  656.1668 -259.6564 L
  656.1668 -259.6564 L
  655.9566 -259.6564  655.7765 -259.4762  655.7765 -259.2661 C
  655.7765 -259.0559  655.9566 -258.9058  656.1668 -258.9058 C
  656.1668 -258.9058 L
B
U
u
  664.4237 -258.9058 m
  669.6781 -258.9058 L
  669.6781 -258.9058 L
  669.8882 -258.9058  670.0384 -259.0559  670.0384 -259.2661 C
  670.0384 -259.4762  669.8882 -259.6564  669.6781 -259.6564 C
  669.6781 -259.6564 L
  664.4237 -259.6564 L
  664.4237 -259.6564 L
  664.2135 -259.6564  664.0334 -259.4762  664.0334 -259.2661 C
  664.0334 -259.0559  664.2135 -258.9058  664.4237 -258.9058 C
  664.4237 -258.9058 L
B
U
u
  672.6806 -258.9058 m
  677.9349 -258.9058 L
  677.9349 -258.9058 L
  678.1451 -258.9058  678.2952 -259.0559  678.2952 -259.2661 C
  678.2952 -259.4762  678.1451 -259.6564  677.9349 -259.6564 C
  677.9349 -259.6564 L
  672.6806 -259.6564 L
  672.6806 -259.6564 L
  672.4704 -259.6564  672.2902 -259.4762  672.2902 -259.2661 C
  672.2902 -259.0559  672.4704 -258.9058  672.6806 -258.9058 C
  672.6806 -258.9058 L
B
U
u
  680.9374 -258.9058 m
  683.6697 -258.9058 L
  683.6697 -258.9058 L
  683.8799 -258.9058  684.0601 -259.0559  684.0601 -259.2661 C
  684.0601 -259.4762  683.8799 -259.6564  683.6697 -259.6564 C
  683.6697 -259.6564 L
  680.9374 -259.6564 L
  680.9374 -259.6564 L
  680.7273 -259.6564  680.5471 -259.4762  680.5471 -259.2661 C
  680.5471 -259.0559  680.7273 -258.9058  680.9374 -258.9058 C
  680.9374 -258.9058 L
B
U
*U
u
1 XR

  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
  383.8254 220.0441 m
  446.3492 220.0441 L
  446.3492 234.6158 L
  383.8254 234.6158 L
  383.8254 220.0441 L
B
U
u
  0.000 0.000 0.000 0.000 k
  383.8254 234.6158 m
  446.3492 234.6158 L
  446.3492 251.2692 L
  383.8254 251.2692 L
  383.8254 234.6158 L
B
U
u
0.7500 w
1 J
  405.3614 239.1955 m
  424.8827 239.1955 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 405.3614 240.1670 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Root\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  208.4114 123.2464 m
  270.9352 123.2464 L
  270.9352 137.8181 L
  208.4114 137.8181 L
  208.4114 123.2464 L
B
U
u
  0.000 0.000 0.000 0.000 k
  208.4114 137.8181 m
  270.9352 137.8181 L
  270.9352 154.4715 L
  208.4114 154.4715 L
  208.4114 137.8181 L
B
U
u
0.7500 w
  225.2928 142.3978 m
  254.1232 142.3978 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 225.2928 143.3692 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  157.4198 24.9220 m
  219.9436 24.9220 L
  219.9436 39.4937 L
  157.4198 39.4937 L
  157.4198 24.9220 L
B
U
u
  0.000 0.000 0.000 0.000 k
  157.4198 39.4937 m
  219.9436 39.4937 L
  219.9436 56.1471 L
  157.4198 56.1471 L
  157.4198 39.4937 L
B
U
u
0.7500 w
  174.2317 44.0734 m
  203.0621 44.0734 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 174.2317 45.0449 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  260.8619 24.1587 m
  323.3857 24.1587 L
  323.3857 38.7305 L
  260.8619 38.7305 L
  260.8619 24.1587 L
B
U
u
  0.000 0.000 0.000 0.000 k
  260.8619 38.7305 m
  323.3857 38.7305 L
  323.3857 55.3838 L
  260.8619 55.3838 L
  260.8619 38.7305 L
B
U
u
0.7500 w
  277.7434 43.3101 m
  306.5738 43.3101 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 277.7434 44.2816 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 0.898 K
1 j
  239.6733 123.2464 m
  194.8646 64.3350 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  198.4771 62.8085 m
  188.6817 56.1471 L
  192.4331 67.3188 L
  198.4771 62.8085 L
F
U
u
0.7500 w
  0.000 0.000 0.000 0.898 K
  239.6733 123.2464 m
  285.8020 63.5024 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  288.2335 66.5555 m
  292.1238 55.3838 L
  282.2590 61.9758 L
  288.2335 66.5555 L
F
U
u
0.7500 w
  0.000 0.000 0.000 0.898 K
  415.0873 220.0441 m
  580.2891 156.2062 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  580.7754 160.0226 m
  589.9455 152.5286 L
  578.0660 153.0837 L
  580.7754 160.0226 L
F
U
u
0.7500 w
  0.000 0.000 0.000 0.898 K
  415.0873 220.0441 m
  249.3298 158.0797 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  251.5528 154.8878 m
  239.6733 154.4715 L
  248.9129 161.9655 L
  251.5528 154.8878 L
F
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  384.0338 122.0668 m
  446.5576 122.0668 L
  446.5576 136.6385 L
  384.0338 136.6385 L
  384.0338 122.0668 L
B
U
u
  0.000 0.000 0.000 0.000 k
  384.0338 136.6385 m
  446.5576 136.6385 L
  446.5576 153.2918 L
  384.0338 153.2918 L
  384.0338 136.6385 L
B
U
u
0.7500 w
  400.8458 141.2181 m
  429.6762 141.2181 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 400.8458 142.1896 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  332.9727 23.7424 m
  395.4965 23.7424 L
  395.4965 38.3141 L
  332.9727 38.3141 L
  332.9727 23.7424 L
B
U
u
  0.000 0.000 0.000 0.000 k
  332.9727 38.3141 m
  395.4965 38.3141 L
  395.4965 54.9675 L
  332.9727 54.9675 L
  332.9727 38.3141 L
B
U
u
0.7500 w
  349.8541 42.8938 m
  378.6845 42.8938 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 349.8541 43.8652 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  436.4149 22.9791 m
  498.9387 22.9791 L
  498.9387 37.5508 L
  436.4149 37.5508 L
  436.4149 22.9791 L
B
U
u
  0.000 0.000 0.000 0.000 k
  436.4149 37.5508 m
  498.9387 37.5508 L
  498.9387 54.2042 L
  436.4149 54.2042 L
  436.4149 37.5508 L
B
U
u
0.7500 w
  453.2963 42.1305 m
  482.1267 42.1305 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 453.2963 43.1020 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 7\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 0.898 K
1 j
  415.2957 122.0668 m
  370.4870 63.1554 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  374.0300 61.6289 m
  364.2346 54.9675 L
  368.0555 66.2085 L
  374.0300 61.6289 L
F
U
u
0.7500 w
  0.000 0.000 0.000 0.898 K
  415.2957 122.0668 m
  461.4244 62.3227 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  463.7864 65.3759 m
  467.6768 54.2042 L
  457.8814 60.7962 L
  463.7864 65.3759 L
F
U
u
  0.000 0.000 0.000 0.000 k
0.7500 w
  558.6836 121.3035 m
  621.2074 121.3035 L
  621.2074 135.8752 L
  558.6836 135.8752 L
  558.6836 121.3035 L
B
U
u
  0.000 0.000 0.000 0.000 k
  558.6836 135.8752 m
  621.2074 135.8752 L
  621.2074 152.5286 L
  558.6836 152.5286 L
  558.6836 135.8752 L
B
U
u
0.7500 w
  575.4956 140.4549 m
  604.3260 140.4549 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 575.4956 141.4263 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  507.6225 22.9097 m
  570.1463 22.9097 L
  570.1463 37.4815 L
  507.6225 37.4815 L
  507.6225 22.9097 L
B
U
u
  0.000 0.000 0.000 0.000 k
  507.6225 37.4815 m
  570.1463 37.4815 L
  570.1463 54.1348 L
  507.6225 54.1348 L
  507.6225 37.4815 L
B
U
u
0.7500 w
  524.5039 42.0611 m
  553.3344 42.0611 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 524.5039 43.0326 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 8\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.7500 w
1 j
  611.0647 22.1465 m
  673.5885 22.1465 L
  673.5885 36.7182 L
  611.0647 36.7182 L
  611.0647 22.1465 L
B
U
u
  0.000 0.000 0.000 0.000 k
  611.0647 36.7182 m
  673.5885 36.7182 L
  673.5885 53.3716 L
  611.0647 53.3716 L
  611.0647 36.7182 L
B
U
u
0.7500 w
  627.9461 41.2979 m
  656.7765 41.2979 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 627.9461 42.2693 0 Tp
TP
/_Helvetica 9.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Child 9\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 0.898 K
1 j
  589.9455 121.3035 m
  545.1368 62.3227 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  548.6798 60.8656 m
  538.8844 54.1348 L
  542.7053 65.3759 L
  548.6798 60.8656 L
F
U
u
0.7500 w
  0.000 0.000 0.000 0.898 K
  589.9455 121.3035 m
  636.0742 61.5595 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  638.4362 64.5432 m
  642.3266 53.3716 L
  632.5312 59.9635 L
  638.4362 64.5432 L
F
U
u
0.7500 w
  0.000 0.000 0.000 0.898 K
  415.0873 220.0441 m
  415.2262 163.6308 L
S
U
u
  0.000 0.000 0.000 0.898 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  418.9777 164.5329 m
  415.2957 153.2918 L
  411.4748 164.5329 L
  418.9777 164.5329 L
F
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
