%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\Diplom\Ausarbeitung\Bilder\RMIClientServer_Sequenzdiagramm.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 566 631
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 566 631
%AI3_TileBox: 0 0 566 631
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.298 k
 [] 0 d
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  11.7600 2.8800 m
  563.7600 2.8800 L
  563.7600 608.1600 L
  11.7600 608.1600 L
  11.7600 2.8800 L
F
U
u
0.7500 w
  0.000 0.000 0.000 0.298 K
1 J
  11.7600 2.8800 m
  563.7600 2.8800 L
  563.7600 608.1600 L
  11.7600 608.1600 L
  11.7600 2.8800 L
S
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  3.3600 11.2800 m
  555.1200 11.2800 L
  555.1200 616.5600 L
  3.3600 616.5600 L
  3.3600 11.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.502 0.000 0.502 0.498 K
  27.3600 580.5600 m
  81.3600 580.5600 L
  81.3600 605.7600 L
  27.3600 605.7600 L
  27.3600 580.5600 L
B
U
u
  0.000 0.000 0.000 1.000 K
  32.6400 588.9600 m
  76.3200 588.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 32.6400 590.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(RMIClient\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.502 0.000 0.502 0.498 K
1 j
  54.4800 21.1200 m
  54.4800 24.9600 L
S
U
u
  54.4800 27.3600 m
  54.4800 31.2000 L
S
U
u
  54.4800 33.6000 m
  54.4800 37.4400 L
S
U
u
  54.4800 39.8400 m
  54.4800 43.6800 L
S
U
u
  54.4800 46.0800 m
  54.4800 49.9200 L
S
U
u
  54.4800 52.3200 m
  54.4800 56.1600 L
S
U
u
  54.4800 58.5600 m
  54.4800 62.4000 L
S
U
u
  54.4800 64.8000 m
  54.4800 68.6400 L
S
U
u
  54.4800 71.0400 m
  54.4800 74.8800 L
S
U
u
  54.4800 77.2800 m
  54.4800 81.1200 L
S
U
u
  54.4800 83.5200 m
  54.4800 87.3600 L
S
U
u
  54.4800 89.7600 m
  54.4800 93.6000 L
S
U
u
  54.4800 96.0000 m
  54.4800 99.8400 L
S
U
u
  54.4800 102.2400 m
  54.4800 106.0800 L
S
U
u
  54.4800 108.4800 m
  54.4800 112.3200 L
S
U
u
  54.4800 114.7200 m
  54.4800 118.5600 L
S
U
u
  54.4800 120.9600 m
  54.4800 124.8000 L
S
U
u
  54.4800 127.2000 m
  54.4800 131.0400 L
S
U
u
  54.4800 133.4400 m
  54.4800 137.2800 L
S
U
u
  54.4800 139.6800 m
  54.4800 143.5200 L
S
U
u
  54.4800 145.9200 m
  54.4800 149.7600 L
S
U
u
  54.4800 152.1600 m
  54.4800 156.0000 L
S
U
u
  54.4800 158.4000 m
  54.4800 162.2400 L
S
U
u
  54.4800 164.6400 m
  54.4800 168.4800 L
S
U
u
  54.4800 170.8800 m
  54.4800 174.7200 L
S
U
u
  54.4800 177.1200 m
  54.4800 180.9600 L
S
U
u
  54.4800 183.3600 m
  54.4800 187.2000 L
S
U
u
  54.4800 189.6000 m
  54.4800 193.4400 L
S
U
u
  54.4800 195.8400 m
  54.4800 199.6800 L
S
U
u
  54.4800 202.0800 m
  54.4800 205.9200 L
S
U
u
  54.4800 208.3200 m
  54.4800 212.1600 L
S
U
u
  54.4800 214.5600 m
  54.4800 218.4000 L
S
U
u
  54.4800 220.8000 m
  54.4800 224.6400 L
S
U
u
  54.4800 227.0400 m
  54.4800 230.8800 L
S
U
u
  54.4800 233.2800 m
  54.4800 237.1200 L
S
U
u
  54.4800 239.5200 m
  54.4800 243.3600 L
S
U
u
  54.4800 245.7600 m
  54.4800 249.6000 L
S
U
u
  54.4800 252.0000 m
  54.4800 255.8400 L
S
U
u
  54.4800 258.2400 m
  54.4800 262.0800 L
S
U
u
  54.4800 264.4800 m
  54.4800 268.3200 L
S
U
u
  54.4800 270.7200 m
  54.4800 274.5600 L
S
U
u
  54.4800 276.9600 m
  54.4800 280.8000 L
S
U
u
  54.4800 283.2000 m
  54.4800 287.0400 L
S
U
u
  54.4800 289.4400 m
  54.4800 293.2800 L
S
U
u
  54.4800 295.6800 m
  54.4800 299.5200 L
S
U
u
  54.4800 301.9200 m
  54.4800 305.7600 L
S
U
u
  54.4800 308.1600 m
  54.4800 312.0000 L
S
U
u
  54.4800 314.4000 m
  54.4800 318.2400 L
S
U
u
  54.4800 320.6400 m
  54.4800 324.4800 L
S
U
u
  54.4800 326.8800 m
  54.4800 330.7200 L
S
U
u
  54.4800 333.1200 m
  54.4800 336.9600 L
S
U
u
  54.4800 339.3600 m
  54.4800 343.2000 L
S
U
u
  54.4800 345.6000 m
  54.4800 349.4400 L
S
U
u
  54.4800 351.8400 m
  54.4800 355.6800 L
S
U
u
  54.4800 358.0800 m
  54.4800 361.9200 L
S
U
u
  54.4800 364.3200 m
  54.4800 368.1600 L
S
U
u
  54.4800 370.5600 m
  54.4800 374.4000 L
S
U
u
  54.4800 376.8000 m
  54.4800 380.6400 L
S
U
u
  54.4800 383.0400 m
  54.4800 386.8800 L
S
U
u
  54.4800 389.2800 m
  54.4800 393.1200 L
S
U
u
  54.4800 395.5200 m
  54.4800 399.3600 L
S
U
u
  54.4800 401.7600 m
  54.4800 405.6000 L
S
U
u
  54.4800 408.0000 m
  54.4800 411.8400 L
S
U
u
  54.4800 414.2400 m
  54.4800 418.0800 L
S
U
u
  54.4800 420.4800 m
  54.4800 424.3200 L
S
U
u
  54.4800 426.7200 m
  54.4800 430.5600 L
S
U
u
  54.4800 432.9600 m
  54.4800 436.8000 L
S
U
u
  54.4800 439.2000 m
  54.4800 443.0400 L
S
U
u
  54.4800 445.4400 m
  54.4800 449.2800 L
S
U
u
  54.4800 451.6800 m
  54.4800 455.5200 L
S
U
u
  54.4800 457.9200 m
  54.4800 461.7600 L
S
U
u
  54.4800 464.1600 m
  54.4800 468.0000 L
S
U
u
  54.4800 470.4000 m
  54.4800 474.2400 L
S
U
u
  54.4800 476.6400 m
  54.4800 480.4800 L
S
U
u
  54.4800 482.8800 m
  54.4800 486.7200 L
S
U
u
  54.4800 489.1200 m
  54.4800 492.9600 L
S
U
u
  54.4800 495.3600 m
  54.4800 499.2000 L
S
U
u
  54.4800 501.6000 m
  54.4800 505.4400 L
S
U
u
  54.4800 507.8400 m
  54.4800 511.6800 L
S
U
u
  54.4800 514.0800 m
  54.4800 517.9200 L
S
U
u
  54.4800 520.3200 m
  54.4800 524.1600 L
S
U
u
  54.4800 526.5600 m
  54.4800 530.4000 L
S
U
u
  54.4800 532.8000 m
  54.4800 536.6400 L
S
U
u
  54.4800 539.0400 m
  54.4800 542.8800 L
S
U
u
  54.4800 545.2800 m
  54.4800 549.1200 L
S
U
u
  54.4800 551.5200 m
  54.4800 555.3600 L
S
U
u
  54.4800 557.7600 m
  54.4800 561.6000 L
S
U
u
  54.4800 564.0000 m
  54.4800 567.8400 L
S
U
u
  54.4800 570.2400 m
  54.4800 574.0800 L
S
U
u
  54.4800 576.4800 m
  54.4800 580.3200 L
S
U
u
  0.000 0.000 0.000 0.000 k
  85.6800 580.5600 m
  155.0400 580.5600 L
  155.0400 605.7600 L
  85.6800 605.7600 L
  85.6800 580.5600 L
B
U
u
  0.000 0.000 0.000 1.000 K
  89.7600 588.9600 m
  151.2000 588.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 89.7600 590.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIAssembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.502 0.000 0.502 0.498 K
1 j
  120.4800 22.5600 m
  120.4800 26.4000 L
S
U
u
  120.4800 28.8000 m
  120.4800 32.6400 L
S
U
u
  120.4800 35.0400 m
  120.4800 38.8800 L
S
U
u
  120.4800 41.2800 m
  120.4800 45.1200 L
S
U
u
  120.4800 47.5200 m
  120.4800 51.3600 L
S
U
u
  120.4800 53.7600 m
  120.4800 57.6000 L
S
U
u
  120.4800 60.0000 m
  120.4800 63.8400 L
S
U
u
  120.4800 66.2400 m
  120.4800 70.0800 L
S
U
u
  120.4800 72.4800 m
  120.4800 76.3200 L
S
U
u
  120.4800 78.7200 m
  120.4800 82.5600 L
S
U
u
  120.4800 84.9600 m
  120.4800 88.8000 L
S
U
u
  120.4800 91.2000 m
  120.4800 95.0400 L
S
U
u
  120.4800 97.4400 m
  120.4800 101.2800 L
S
U
u
  120.4800 103.6800 m
  120.4800 107.5200 L
S
U
u
  120.4800 109.9200 m
  120.4800 113.7600 L
S
U
u
  120.4800 116.1600 m
  120.4800 120.0000 L
S
U
u
  120.4800 122.4000 m
  120.4800 126.2400 L
S
U
u
  120.4800 128.6400 m
  120.4800 132.4800 L
S
U
u
  120.4800 134.8800 m
  120.4800 138.7200 L
S
U
u
  120.4800 141.1200 m
  120.4800 144.9600 L
S
U
u
  120.4800 147.3600 m
  120.4800 151.2000 L
S
U
u
  120.4800 153.6000 m
  120.4800 157.4400 L
S
U
u
  120.4800 159.8400 m
  120.4800 163.6800 L
S
U
u
  120.4800 166.0800 m
  120.4800 169.9200 L
S
U
u
  120.4800 172.3200 m
  120.4800 176.1600 L
S
U
u
  120.4800 178.5600 m
  120.4800 182.4000 L
S
U
u
  120.4800 184.8000 m
  120.4800 188.6400 L
S
U
u
  120.4800 191.0400 m
  120.4800 194.8800 L
S
U
u
  120.4800 197.2800 m
  120.4800 201.1200 L
S
U
u
  120.4800 203.5200 m
  120.4800 207.3600 L
S
U
u
  120.4800 209.7600 m
  120.4800 213.6000 L
S
U
u
  120.4800 216.0000 m
  120.4800 219.8400 L
S
U
u
  120.4800 222.2400 m
  120.4800 226.0800 L
S
U
u
  120.4800 228.4800 m
  120.4800 232.3200 L
S
U
u
  120.4800 234.7200 m
  120.4800 238.5600 L
S
U
u
  120.4800 240.9600 m
  120.4800 244.8000 L
S
U
u
  120.4800 247.2000 m
  120.4800 251.0400 L
S
U
u
  120.4800 253.4400 m
  120.4800 257.2800 L
S
U
u
  120.4800 259.6800 m
  120.4800 263.5200 L
S
U
u
  120.4800 265.9200 m
  120.4800 269.7600 L
S
U
u
  120.4800 272.1600 m
  120.4800 276.0000 L
S
U
u
  120.4800 278.4000 m
  120.4800 282.2400 L
S
U
u
  120.4800 284.6400 m
  120.4800 288.4800 L
S
U
u
  120.4800 290.8800 m
  120.4800 294.7200 L
S
U
u
  120.4800 297.1200 m
  120.4800 300.9600 L
S
U
u
  120.4800 303.3600 m
  120.4800 307.2000 L
S
U
u
  120.4800 309.6000 m
  120.4800 313.4400 L
S
U
u
  120.4800 315.8400 m
  120.4800 319.6800 L
S
U
u
  120.4800 322.0800 m
  120.4800 325.9200 L
S
U
u
  120.4800 328.3200 m
  120.4800 332.1600 L
S
U
u
  120.4800 334.5600 m
  120.4800 338.4000 L
S
U
u
  120.4800 340.8000 m
  120.4800 344.6400 L
S
U
u
  120.4800 347.0400 m
  120.4800 350.8800 L
S
U
u
  120.4800 353.2800 m
  120.4800 357.1200 L
S
U
u
  120.4800 359.5200 m
  120.4800 363.3600 L
S
U
u
  120.4800 365.7600 m
  120.4800 369.6000 L
S
U
u
  120.4800 372.0000 m
  120.4800 375.8400 L
S
U
u
  120.4800 378.2400 m
  120.4800 382.0800 L
S
U
u
  120.4800 384.4800 m
  120.4800 388.3200 L
S
U
u
  120.4800 390.7200 m
  120.4800 394.5600 L
S
U
u
  120.4800 396.9600 m
  120.4800 400.8000 L
S
U
u
  120.4800 403.2000 m
  120.4800 407.0400 L
S
U
u
  120.4800 409.4400 m
  120.4800 413.2800 L
S
U
u
  120.4800 415.6800 m
  120.4800 419.5200 L
S
U
u
  120.4800 421.9200 m
  120.4800 425.7600 L
S
U
u
  120.4800 428.1600 m
  120.4800 432.0000 L
S
U
u
  120.4800 434.4000 m
  120.4800 438.2400 L
S
U
u
  120.4800 440.6400 m
  120.4800 444.4800 L
S
U
u
  120.4800 446.8800 m
  120.4800 450.7200 L
S
U
u
  120.4800 453.1200 m
  120.4800 456.9600 L
S
U
u
  120.4800 459.3600 m
  120.4800 463.2000 L
S
U
u
  120.4800 465.6000 m
  120.4800 469.4400 L
S
U
u
  120.4800 471.8400 m
  120.4800 475.6800 L
S
U
u
  120.4800 478.0800 m
  120.4800 481.9200 L
S
U
u
  120.4800 484.3200 m
  120.4800 488.1600 L
S
U
u
  120.4800 490.5600 m
  120.4800 494.4000 L
S
U
u
  120.4800 496.8000 m
  120.4800 500.6400 L
S
U
u
  120.4800 503.0400 m
  120.4800 506.8800 L
S
U
u
  120.4800 509.2800 m
  120.4800 513.1200 L
S
U
u
  120.4800 515.5200 m
  120.4800 519.3600 L
S
U
u
  120.4800 521.7600 m
  120.4800 525.6000 L
S
U
u
  120.4800 528.0000 m
  120.4800 531.8400 L
S
U
u
  120.4800 534.2400 m
  120.4800 538.0800 L
S
U
u
  120.4800 540.4800 m
  120.4800 544.3200 L
S
U
u
  120.4800 546.7200 m
  120.4800 550.5600 L
S
U
u
  120.4800 552.9600 m
  120.4800 556.8000 L
S
U
u
  120.4800 559.2000 m
  120.4800 563.0400 L
S
U
u
  120.4800 565.4400 m
  120.4800 569.2800 L
S
U
u
  120.4800 571.6800 m
  120.4800 575.5200 L
S
U
u
  120.4800 577.9200 m
  120.4800 580.5600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  156.9600 580.5600 m
  223.6800 580.5600 L
  223.6800 605.7600 L
  156.9600 605.7600 L
  156.9600 580.5600 L
B
U
u
  0.000 0.000 0.000 1.000 K
  161.0400 588.9600 m
  219.6000 588.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 161.0400 590.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(DomainModel\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.502 0.000 0.502 0.498 K
1 j
  189.8400 21.8400 m
  189.8400 25.6800 L
S
U
u
  189.8400 28.0800 m
  189.8400 31.9200 L
S
U
u
  189.8400 34.3200 m
  189.8400 38.1600 L
S
U
u
  189.8400 40.5600 m
  189.8400 44.4000 L
S
U
u
  189.8400 46.8000 m
  189.8400 50.6400 L
S
U
u
  189.8400 53.0400 m
  189.8400 56.8800 L
S
U
u
  189.8400 59.2800 m
  189.8400 63.1200 L
S
U
u
  189.8400 65.5200 m
  189.8400 69.3600 L
S
U
u
  189.8400 71.7600 m
  189.8400 75.6000 L
S
U
u
  189.8400 78.0000 m
  189.8400 81.8400 L
S
U
u
  189.8400 84.2400 m
  189.8400 88.0800 L
S
U
u
  189.8400 90.4800 m
  189.8400 94.3200 L
S
U
u
  189.8400 96.7200 m
  189.8400 100.5600 L
S
U
u
  189.8400 102.9600 m
  189.8400 106.8000 L
S
U
u
  189.8400 109.2000 m
  189.8400 113.0400 L
S
U
u
  189.8400 115.4400 m
  189.8400 119.2800 L
S
U
u
  189.8400 121.6800 m
  189.8400 125.5200 L
S
U
u
  189.8400 127.9200 m
  189.8400 131.7600 L
S
U
u
  189.8400 134.1600 m
  189.8400 138.0000 L
S
U
u
  189.8400 140.4000 m
  189.8400 144.2400 L
S
U
u
  189.8400 146.6400 m
  189.8400 150.4800 L
S
U
u
  189.8400 152.8800 m
  189.8400 156.7200 L
S
U
u
  189.8400 159.1200 m
  189.8400 162.9600 L
S
U
u
  189.8400 165.3600 m
  189.8400 169.2000 L
S
U
u
  189.8400 171.6000 m
  189.8400 175.4400 L
S
U
u
  189.8400 177.8400 m
  189.8400 181.6800 L
S
U
u
  189.8400 184.0800 m
  189.8400 187.9200 L
S
U
u
  189.8400 190.3200 m
  189.8400 194.1600 L
S
U
u
  189.8400 196.5600 m
  189.8400 200.4000 L
S
U
u
  189.8400 202.8000 m
  189.8400 206.6400 L
S
U
u
  189.8400 209.0400 m
  189.8400 212.8800 L
S
U
u
  189.8400 215.2800 m
  189.8400 219.1200 L
S
U
u
  189.8400 221.5200 m
  189.8400 225.3600 L
S
U
u
  189.8400 227.7600 m
  189.8400 231.6000 L
S
U
u
  189.8400 234.0000 m
  189.8400 237.8400 L
S
U
u
  189.8400 240.2400 m
  189.8400 244.0800 L
S
U
u
  189.8400 246.4800 m
  189.8400 250.3200 L
S
U
u
  189.8400 252.7200 m
  189.8400 256.5600 L
S
U
u
  189.8400 258.9600 m
  189.8400 262.8000 L
S
U
u
  189.8400 265.2000 m
  189.8400 269.0400 L
S
U
u
  189.8400 271.4400 m
  189.8400 275.2800 L
S
U
u
  189.8400 277.6800 m
  189.8400 281.5200 L
S
U
u
  189.8400 283.9200 m
  189.8400 287.7600 L
S
U
u
  189.8400 290.1600 m
  189.8400 294.0000 L
S
U
u
  189.8400 296.4000 m
  189.8400 300.2400 L
S
U
u
  189.8400 302.6400 m
  189.8400 306.4800 L
S
U
u
  189.8400 308.8800 m
  189.8400 312.7200 L
S
U
u
  189.8400 315.1200 m
  189.8400 318.9600 L
S
U
u
  189.8400 321.3600 m
  189.8400 325.2000 L
S
U
u
  189.8400 327.6000 m
  189.8400 331.4400 L
S
U
u
  189.8400 333.8400 m
  189.8400 337.6800 L
S
U
u
  189.8400 340.0800 m
  189.8400 343.9200 L
S
U
u
  189.8400 346.3200 m
  189.8400 350.1600 L
S
U
u
  189.8400 352.5600 m
  189.8400 356.4000 L
S
U
u
  189.8400 358.8000 m
  189.8400 362.6400 L
S
U
u
  189.8400 365.0400 m
  189.8400 368.8800 L
S
U
u
  189.8400 371.2800 m
  189.8400 375.1200 L
S
U
u
  189.8400 377.5200 m
  189.8400 381.3600 L
S
U
u
  189.8400 383.7600 m
  189.8400 387.6000 L
S
U
u
  189.8400 390.0000 m
  189.8400 393.8400 L
S
U
u
  189.8400 396.2400 m
  189.8400 400.0800 L
S
U
u
  189.8400 402.4800 m
  189.8400 406.3200 L
S
U
u
  189.8400 408.7200 m
  189.8400 412.5600 L
S
U
u
  189.8400 414.9600 m
  189.8400 418.8000 L
S
U
u
  189.8400 421.2000 m
  189.8400 425.0400 L
S
U
u
  189.8400 427.4400 m
  189.8400 431.2800 L
S
U
u
  189.8400 433.6800 m
  189.8400 437.5200 L
S
U
u
  189.8400 439.9200 m
  189.8400 443.7600 L
S
U
u
  189.8400 446.1600 m
  189.8400 450.0000 L
S
U
u
  189.8400 452.4000 m
  189.8400 456.2400 L
S
U
u
  189.8400 458.6400 m
  189.8400 462.4800 L
S
U
u
  189.8400 464.8800 m
  189.8400 468.7200 L
S
U
u
  189.8400 471.1200 m
  189.8400 474.9600 L
S
U
u
  189.8400 477.3600 m
  189.8400 481.2000 L
S
U
u
  189.8400 483.6000 m
  189.8400 487.4400 L
S
U
u
  189.8400 489.8400 m
  189.8400 493.6800 L
S
U
u
  189.8400 496.0800 m
  189.8400 499.9200 L
S
U
u
  189.8400 502.3200 m
  189.8400 506.1600 L
S
U
u
  189.8400 508.5600 m
  189.8400 512.4000 L
S
U
u
  189.8400 514.8000 m
  189.8400 518.6400 L
S
U
u
  189.8400 521.0400 m
  189.8400 524.8800 L
S
U
u
  189.8400 527.2800 m
  189.8400 531.1200 L
S
U
u
  189.8400 533.5200 m
  189.8400 537.3600 L
S
U
u
  189.8400 539.7600 m
  189.8400 543.6000 L
S
U
u
  189.8400 546.0000 m
  189.8400 549.8400 L
S
U
u
  189.8400 552.2400 m
  189.8400 556.0800 L
S
U
u
  189.8400 558.4800 m
  189.8400 562.3200 L
S
U
u
  189.8400 564.7200 m
  189.8400 568.5600 L
S
U
u
  189.8400 570.9600 m
  189.8400 574.8000 L
S
U
u
  189.8400 577.2000 m
  189.8400 580.5600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  1.000 1.000 0.000 0.000 K
  232.3200 580.5600 m
  286.3200 580.5600 L
  286.3200 605.7600 L
  232.3200 605.7600 L
  232.3200 580.5600 L
B
U
u
  0.000 0.000 0.000 1.000 K
  242.8800 588.9600 m
  275.7600 588.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 242.8800 590.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Naming\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  1.000 1.000 0.000 0.000 K
1 j
  259.2000 363.1200 m
  259.2000 366.9600 L
S
U
u
  259.2000 369.3600 m
  259.2000 373.2000 L
S
U
u
  259.2000 375.6000 m
  259.2000 379.4400 L
S
U
u
  259.2000 381.8400 m
  259.2000 385.6800 L
S
U
u
  259.2000 388.0800 m
  259.2000 391.9200 L
S
U
u
  259.2000 394.3200 m
  259.2000 398.1600 L
S
U
u
  259.2000 400.5600 m
  259.2000 404.4000 L
S
U
u
  259.2000 406.8000 m
  259.2000 410.6400 L
S
U
u
  259.2000 413.0400 m
  259.2000 416.8800 L
S
U
u
  259.2000 419.2800 m
  259.2000 423.1200 L
S
U
u
  259.2000 425.5200 m
  259.2000 429.3600 L
S
U
u
  259.2000 431.7600 m
  259.2000 435.6000 L
S
U
u
  259.2000 438.0000 m
  259.2000 441.8400 L
S
U
u
  259.2000 444.2400 m
  259.2000 448.0800 L
S
U
u
  259.2000 450.4800 m
  259.2000 454.3200 L
S
U
u
  259.2000 456.7200 m
  259.2000 460.5600 L
S
U
u
  259.2000 462.9600 m
  259.2000 466.8000 L
S
U
u
  259.2000 469.2000 m
  259.2000 473.0400 L
S
U
u
  259.2000 475.4400 m
  259.2000 479.2800 L
S
U
u
  259.2000 481.6800 m
  259.2000 485.5200 L
S
U
u
  259.2000 487.9200 m
  259.2000 491.7600 L
S
U
u
  259.2000 494.1600 m
  259.2000 498.0000 L
S
U
u
  259.2000 500.4000 m
  259.2000 504.2400 L
S
U
u
  259.2000 506.6400 m
  259.2000 510.4800 L
S
U
u
  259.2000 512.8800 m
  259.2000 516.7200 L
S
U
u
  259.2000 519.1200 m
  259.2000 522.9600 L
S
U
u
  259.2000 525.3600 m
  259.2000 529.2000 L
S
U
u
  259.2000 531.6000 m
  259.2000 535.4400 L
S
U
u
  259.2000 537.8400 m
  259.2000 541.6800 L
S
U
u
  259.2000 544.0800 m
  259.2000 547.9200 L
S
U
u
  259.2000 550.3200 m
  259.2000 554.1600 L
S
U
u
  259.2000 556.5600 m
  259.2000 560.4000 L
S
U
u
  259.2000 562.8000 m
  259.2000 566.6400 L
S
U
u
  259.2000 569.0400 m
  259.2000 572.8800 L
S
U
u
  259.2000 575.2800 m
  259.2000 579.1200 L
S
U
u
  0.000 0.000 0.000 0.000 k
  0.000 1.000 1.000 0.000 K
  296.8800 580.5600 m
  353.5200 580.5600 L
  353.5200 605.7600 L
  296.8800 605.7600 L
  296.8800 580.5600 L
B
U
u
  0.000 0.000 0.000 1.000 K
  300.9600 588.9600 m
  349.6800 588.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 300.9600 590.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMISevices\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 1.000 1.000 0.000 K
1 j
  325.2000 21.1200 m
  325.2000 24.9600 L
S
U
u
  325.2000 27.3600 m
  325.2000 31.2000 L
S
U
u
  325.2000 33.6000 m
  325.2000 37.4400 L
S
U
u
  325.2000 39.8400 m
  325.2000 43.6800 L
S
U
u
  325.2000 46.0800 m
  325.2000 49.9200 L
S
U
u
  325.2000 52.3200 m
  325.2000 56.1600 L
S
U
u
  325.2000 58.5600 m
  325.2000 62.4000 L
S
U
u
  325.2000 64.8000 m
  325.2000 68.6400 L
S
U
u
  325.2000 71.0400 m
  325.2000 74.8800 L
S
U
u
  325.2000 77.2800 m
  325.2000 81.1200 L
S
U
u
  325.2000 83.5200 m
  325.2000 87.3600 L
S
U
u
  325.2000 89.7600 m
  325.2000 93.6000 L
S
U
u
  325.2000 96.0000 m
  325.2000 99.8400 L
S
U
u
  325.2000 102.2400 m
  325.2000 106.0800 L
S
U
u
  325.2000 108.4800 m
  325.2000 112.3200 L
S
U
u
  325.2000 114.7200 m
  325.2000 118.5600 L
S
U
u
  325.2000 120.9600 m
  325.2000 124.8000 L
S
U
u
  325.2000 127.2000 m
  325.2000 131.0400 L
S
U
u
  325.2000 133.4400 m
  325.2000 137.2800 L
S
U
u
  325.2000 139.6800 m
  325.2000 143.5200 L
S
U
u
  325.2000 145.9200 m
  325.2000 149.7600 L
S
U
u
  325.2000 152.1600 m
  325.2000 156.0000 L
S
U
u
  325.2000 158.4000 m
  325.2000 162.2400 L
S
U
u
  325.2000 164.6400 m
  325.2000 168.4800 L
S
U
u
  325.2000 170.8800 m
  325.2000 174.7200 L
S
U
u
  325.2000 177.1200 m
  325.2000 180.9600 L
S
U
u
  325.2000 183.3600 m
  325.2000 187.2000 L
S
U
u
  325.2000 189.6000 m
  325.2000 193.4400 L
S
U
u
  325.2000 195.8400 m
  325.2000 199.6800 L
S
U
u
  325.2000 202.0800 m
  325.2000 205.9200 L
S
U
u
  325.2000 208.3200 m
  325.2000 212.1600 L
S
U
u
  325.2000 214.5600 m
  325.2000 218.4000 L
S
U
u
  325.2000 220.8000 m
  325.2000 224.6400 L
S
U
u
  325.2000 227.0400 m
  325.2000 230.8800 L
S
U
u
  325.2000 233.2800 m
  325.2000 237.1200 L
S
U
u
  325.2000 239.5200 m
  325.2000 243.3600 L
S
U
u
  325.2000 245.7600 m
  325.2000 249.6000 L
S
U
u
  325.2000 252.0000 m
  325.2000 255.8400 L
S
U
u
  325.2000 258.2400 m
  325.2000 262.0800 L
S
U
u
  325.2000 264.4800 m
  325.2000 268.3200 L
S
U
u
  325.2000 270.7200 m
  325.2000 274.5600 L
S
U
u
  325.2000 276.9600 m
  325.2000 280.8000 L
S
U
u
  325.2000 283.2000 m
  325.2000 287.0400 L
S
U
u
  325.2000 289.4400 m
  325.2000 293.2800 L
S
U
u
  325.2000 295.6800 m
  325.2000 299.5200 L
S
U
u
  325.2000 301.9200 m
  325.2000 305.7600 L
S
U
u
  325.2000 308.1600 m
  325.2000 312.0000 L
S
U
u
  325.2000 314.4000 m
  325.2000 318.2400 L
S
U
u
  325.2000 320.6400 m
  325.2000 324.4800 L
S
U
u
  325.2000 326.8800 m
  325.2000 330.7200 L
S
U
u
  325.2000 333.1200 m
  325.2000 336.9600 L
S
U
u
  325.2000 339.3600 m
  325.2000 343.2000 L
S
U
u
  325.2000 345.6000 m
  325.2000 349.4400 L
S
U
u
  325.2000 351.8400 m
  325.2000 355.6800 L
S
U
u
  325.2000 358.0800 m
  325.2000 361.9200 L
S
U
u
  325.2000 364.3200 m
  325.2000 368.1600 L
S
U
u
  325.2000 370.5600 m
  325.2000 374.4000 L
S
U
u
  325.2000 376.8000 m
  325.2000 380.6400 L
S
U
u
  325.2000 383.0400 m
  325.2000 386.8800 L
S
U
u
  325.2000 389.2800 m
  325.2000 393.1200 L
S
U
u
  325.2000 395.5200 m
  325.2000 399.3600 L
S
U
u
  325.2000 401.7600 m
  325.2000 405.6000 L
S
U
u
  325.2000 408.0000 m
  325.2000 411.8400 L
S
U
u
  325.2000 414.2400 m
  325.2000 418.0800 L
S
U
u
  325.2000 420.4800 m
  325.2000 424.3200 L
S
U
u
  325.2000 426.7200 m
  325.2000 430.5600 L
S
U
u
  325.2000 432.9600 m
  325.2000 436.8000 L
S
U
u
  325.2000 439.2000 m
  325.2000 443.0400 L
S
U
u
  325.2000 445.4400 m
  325.2000 449.2800 L
S
U
u
  325.2000 451.6800 m
  325.2000 455.5200 L
S
U
u
  325.2000 457.9200 m
  325.2000 461.7600 L
S
U
u
  325.2000 464.1600 m
  325.2000 468.0000 L
S
U
u
  325.2000 470.4000 m
  325.2000 474.2400 L
S
U
u
  325.2000 476.6400 m
  325.2000 480.4800 L
S
U
u
  325.2000 482.8800 m
  325.2000 486.7200 L
S
U
u
  325.2000 489.1200 m
  325.2000 492.9600 L
S
U
u
  325.2000 495.3600 m
  325.2000 499.2000 L
S
U
u
  325.2000 501.6000 m
  325.2000 505.4400 L
S
U
u
  325.2000 507.8400 m
  325.2000 511.6800 L
S
U
u
  325.2000 514.0800 m
  325.2000 517.9200 L
S
U
u
  325.2000 520.3200 m
  325.2000 524.1600 L
S
U
u
  325.2000 526.5600 m
  325.2000 530.4000 L
S
U
u
  325.2000 532.8000 m
  325.2000 536.6400 L
S
U
u
  325.2000 539.0400 m
  325.2000 542.8800 L
S
U
u
  325.2000 545.2800 m
  325.2000 549.1200 L
S
U
u
  325.2000 551.5200 m
  325.2000 555.3600 L
S
U
u
  325.2000 557.7600 m
  325.2000 561.6000 L
S
U
u
  325.2000 564.0000 m
  325.2000 567.8400 L
S
U
u
  325.2000 570.2400 m
  325.2000 574.0800 L
S
U
u
  325.2000 576.4800 m
  325.2000 580.3200 L
S
U
u
  0.000 0.000 0.000 0.000 k
  355.9200 580.5600 m
  425.5200 580.5600 L
  425.5200 605.7600 L
  355.9200 605.7600 L
  355.9200 580.5600 L
B
U
u
  0.000 0.000 0.000 1.000 K
  360.0000 588.9600 m
  421.4400 588.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 360.0000 590.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIAssembler\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 1.000 1.000 0.000 K
1 j
  390.7200 24.4800 m
  390.7200 28.3200 L
S
U
u
  390.7200 30.7200 m
  390.7200 34.5600 L
S
U
u
  390.7200 36.9600 m
  390.7200 40.8000 L
S
U
u
  390.7200 43.2000 m
  390.7200 47.0400 L
S
U
u
  390.7200 49.4400 m
  390.7200 53.2800 L
S
U
u
  390.7200 55.6800 m
  390.7200 59.5200 L
S
U
u
  390.7200 61.9200 m
  390.7200 65.7600 L
S
U
u
  390.7200 68.1600 m
  390.7200 72.0000 L
S
U
u
  390.7200 74.4000 m
  390.7200 78.2400 L
S
U
u
  390.7200 80.6400 m
  390.7200 84.4800 L
S
U
u
  390.7200 86.8800 m
  390.7200 90.7200 L
S
U
u
  390.7200 93.1200 m
  390.7200 96.9600 L
S
U
u
  390.7200 99.3600 m
  390.7200 103.2000 L
S
U
u
  390.7200 105.6000 m
  390.7200 109.4400 L
S
U
u
  390.7200 111.8400 m
  390.7200 115.6800 L
S
U
u
  390.7200 118.0800 m
  390.7200 121.9200 L
S
U
u
  390.7200 124.3200 m
  390.7200 128.1600 L
S
U
u
  390.7200 130.5600 m
  390.7200 134.4000 L
S
U
u
  390.7200 136.8000 m
  390.7200 140.6400 L
S
U
u
  390.7200 143.0400 m
  390.7200 146.8800 L
S
U
u
  390.7200 149.2800 m
  390.7200 153.1200 L
S
U
u
  390.7200 155.5200 m
  390.7200 159.3600 L
S
U
u
  390.7200 161.7600 m
  390.7200 165.6000 L
S
U
u
  390.7200 168.0000 m
  390.7200 171.8400 L
S
U
u
  390.7200 174.2400 m
  390.7200 178.0800 L
S
U
u
  390.7200 180.4800 m
  390.7200 184.3200 L
S
U
u
  390.7200 186.7200 m
  390.7200 190.5600 L
S
U
u
  390.7200 192.9600 m
  390.7200 196.8000 L
S
U
u
  390.7200 199.2000 m
  390.7200 203.0400 L
S
U
u
  390.7200 205.4400 m
  390.7200 209.2800 L
S
U
u
  390.7200 211.6800 m
  390.7200 215.5200 L
S
U
u
  390.7200 217.9200 m
  390.7200 221.7600 L
S
U
u
  390.7200 224.1600 m
  390.7200 228.0000 L
S
U
u
  390.7200 230.4000 m
  390.7200 234.2400 L
S
U
u
  390.7200 236.6400 m
  390.7200 240.4800 L
S
U
u
  390.7200 242.8800 m
  390.7200 246.7200 L
S
U
u
  390.7200 249.1200 m
  390.7200 252.9600 L
S
U
u
  390.7200 255.3600 m
  390.7200 259.2000 L
S
U
u
  390.7200 261.6000 m
  390.7200 265.4400 L
S
U
u
  390.7200 267.8400 m
  390.7200 271.6800 L
S
U
u
  390.7200 274.0800 m
  390.7200 277.9200 L
S
U
u
  390.7200 280.3200 m
  390.7200 284.1600 L
S
U
u
  390.7200 286.5600 m
  390.7200 290.4000 L
S
U
u
  390.7200 292.8000 m
  390.7200 296.6400 L
S
U
u
  390.7200 299.0400 m
  390.7200 302.8800 L
S
U
u
  390.7200 305.2800 m
  390.7200 309.1200 L
S
U
u
  390.7200 311.5200 m
  390.7200 315.3600 L
S
U
u
  390.7200 317.7600 m
  390.7200 321.6000 L
S
U
u
  390.7200 324.0000 m
  390.7200 327.8400 L
S
U
u
  390.7200 330.2400 m
  390.7200 334.0800 L
S
U
u
  390.7200 336.4800 m
  390.7200 340.3200 L
S
U
u
  390.7200 342.7200 m
  390.7200 346.5600 L
S
U
u
  390.7200 348.9600 m
  390.7200 352.8000 L
S
U
u
  390.7200 355.2000 m
  390.7200 359.0400 L
S
U
u
  390.7200 361.4400 m
  390.7200 365.2800 L
S
U
u
  390.7200 367.6800 m
  390.7200 371.5200 L
S
U
u
  390.7200 373.9200 m
  390.7200 377.7600 L
S
U
u
  390.7200 380.1600 m
  390.7200 384.0000 L
S
U
u
  390.7200 386.4000 m
  390.7200 390.2400 L
S
U
u
  390.7200 392.6400 m
  390.7200 396.4800 L
S
U
u
  390.7200 398.8800 m
  390.7200 402.7200 L
S
U
u
  390.7200 405.1200 m
  390.7200 408.9600 L
S
U
u
  390.7200 411.3600 m
  390.7200 415.2000 L
S
U
u
  390.7200 417.6000 m
  390.7200 421.4400 L
S
U
u
  390.7200 423.8400 m
  390.7200 427.6800 L
S
U
u
  390.7200 430.0800 m
  390.7200 433.9200 L
S
U
u
  390.7200 436.3200 m
  390.7200 440.1600 L
S
U
u
  390.7200 442.5600 m
  390.7200 446.4000 L
S
U
u
  390.7200 448.8000 m
  390.7200 452.6400 L
S
U
u
  390.7200 455.0400 m
  390.7200 458.8800 L
S
U
u
  390.7200 461.2800 m
  390.7200 465.1200 L
S
U
u
  390.7200 467.5200 m
  390.7200 471.3600 L
S
U
u
  390.7200 473.7600 m
  390.7200 477.6000 L
S
U
u
  390.7200 480.0000 m
  390.7200 483.8400 L
S
U
u
  390.7200 486.2400 m
  390.7200 490.0800 L
S
U
u
  390.7200 492.4800 m
  390.7200 496.3200 L
S
U
u
  390.7200 498.7200 m
  390.7200 502.5600 L
S
U
u
  390.7200 504.9600 m
  390.7200 508.8000 L
S
U
u
  390.7200 511.2000 m
  390.7200 515.0400 L
S
U
u
  390.7200 517.4400 m
  390.7200 521.2800 L
S
U
u
  390.7200 523.6800 m
  390.7200 527.5200 L
S
U
u
  390.7200 529.9200 m
  390.7200 533.7600 L
S
U
u
  390.7200 536.1600 m
  390.7200 540.0000 L
S
U
u
  390.7200 542.4000 m
  390.7200 546.2400 L
S
U
u
  390.7200 548.6400 m
  390.7200 552.4800 L
S
U
u
  390.7200 554.8800 m
  390.7200 558.7200 L
S
U
u
  390.7200 561.1200 m
  390.7200 564.9600 L
S
U
u
  390.7200 567.3600 m
  390.7200 571.2000 L
S
U
u
  390.7200 573.6000 m
  390.7200 577.4400 L
S
U
u
  390.7200 579.8400 m
  390.7200 580.5600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  428.6400 580.5600 m
  495.3600 580.5600 L
  495.3600 605.7600 L
  428.6400 605.7600 L
  428.6400 580.5600 L
B
U
u
  0.000 0.000 0.000 1.000 K
  432.7200 588.9600 m
  491.2800 588.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 432.7200 590.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(DomainModel\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 1.000 1.000 0.000 K
1 j
  462.0000 21.8400 m
  462.0000 25.6800 L
S
U
u
  462.0000 28.0800 m
  462.0000 31.9200 L
S
U
u
  462.0000 34.3200 m
  462.0000 38.1600 L
S
U
u
  462.0000 40.5600 m
  462.0000 44.4000 L
S
U
u
  462.0000 46.8000 m
  462.0000 50.6400 L
S
U
u
  462.0000 53.0400 m
  462.0000 56.8800 L
S
U
u
  462.0000 59.2800 m
  462.0000 63.1200 L
S
U
u
  462.0000 65.5200 m
  462.0000 69.3600 L
S
U
u
  462.0000 71.7600 m
  462.0000 75.6000 L
S
U
u
  462.0000 78.0000 m
  462.0000 81.8400 L
S
U
u
  462.0000 84.2400 m
  462.0000 88.0800 L
S
U
u
  462.0000 90.4800 m
  462.0000 94.3200 L
S
U
u
  462.0000 96.7200 m
  462.0000 100.5600 L
S
U
u
  462.0000 102.9600 m
  462.0000 106.8000 L
S
U
u
  462.0000 109.2000 m
  462.0000 113.0400 L
S
U
u
  462.0000 115.4400 m
  462.0000 119.2800 L
S
U
u
  462.0000 121.6800 m
  462.0000 125.5200 L
S
U
u
  462.0000 127.9200 m
  462.0000 131.7600 L
S
U
u
  462.0000 134.1600 m
  462.0000 138.0000 L
S
U
u
  462.0000 140.4000 m
  462.0000 144.2400 L
S
U
u
  462.0000 146.6400 m
  462.0000 150.4800 L
S
U
u
  462.0000 152.8800 m
  462.0000 156.7200 L
S
U
u
  462.0000 159.1200 m
  462.0000 162.9600 L
S
U
u
  462.0000 165.3600 m
  462.0000 169.2000 L
S
U
u
  462.0000 171.6000 m
  462.0000 175.4400 L
S
U
u
  462.0000 177.8400 m
  462.0000 181.6800 L
S
U
u
  462.0000 184.0800 m
  462.0000 187.9200 L
S
U
u
  462.0000 190.3200 m
  462.0000 194.1600 L
S
U
u
  462.0000 196.5600 m
  462.0000 200.4000 L
S
U
u
  462.0000 202.8000 m
  462.0000 206.6400 L
S
U
u
  462.0000 209.0400 m
  462.0000 212.8800 L
S
U
u
  462.0000 215.2800 m
  462.0000 219.1200 L
S
U
u
  462.0000 221.5200 m
  462.0000 225.3600 L
S
U
u
  462.0000 227.7600 m
  462.0000 231.6000 L
S
U
u
  462.0000 234.0000 m
  462.0000 237.8400 L
S
U
u
  462.0000 240.2400 m
  462.0000 244.0800 L
S
U
u
  462.0000 246.4800 m
  462.0000 250.3200 L
S
U
u
  462.0000 252.7200 m
  462.0000 256.5600 L
S
U
u
  462.0000 258.9600 m
  462.0000 262.8000 L
S
U
u
  462.0000 265.2000 m
  462.0000 269.0400 L
S
U
u
  462.0000 271.4400 m
  462.0000 275.2800 L
S
U
u
  462.0000 277.6800 m
  462.0000 281.5200 L
S
U
u
  462.0000 283.9200 m
  462.0000 287.7600 L
S
U
u
  462.0000 290.1600 m
  462.0000 294.0000 L
S
U
u
  462.0000 296.4000 m
  462.0000 300.2400 L
S
U
u
  462.0000 302.6400 m
  462.0000 306.4800 L
S
U
u
  462.0000 308.8800 m
  462.0000 312.7200 L
S
U
u
  462.0000 315.1200 m
  462.0000 318.9600 L
S
U
u
  462.0000 321.3600 m
  462.0000 325.2000 L
S
U
u
  462.0000 327.6000 m
  462.0000 331.4400 L
S
U
u
  462.0000 333.8400 m
  462.0000 337.6800 L
S
U
u
  462.0000 340.0800 m
  462.0000 343.9200 L
S
U
u
  462.0000 346.3200 m
  462.0000 350.1600 L
S
U
u
  462.0000 352.5600 m
  462.0000 356.4000 L
S
U
u
  462.0000 358.8000 m
  462.0000 362.6400 L
S
U
u
  462.0000 365.0400 m
  462.0000 368.8800 L
S
U
u
  462.0000 371.2800 m
  462.0000 375.1200 L
S
U
u
  462.0000 377.5200 m
  462.0000 381.3600 L
S
U
u
  462.0000 383.7600 m
  462.0000 387.6000 L
S
U
u
  462.0000 390.0000 m
  462.0000 393.8400 L
S
U
u
  462.0000 396.2400 m
  462.0000 400.0800 L
S
U
u
  462.0000 402.4800 m
  462.0000 406.3200 L
S
U
u
  462.0000 408.7200 m
  462.0000 412.5600 L
S
U
u
  462.0000 414.9600 m
  462.0000 418.8000 L
S
U
u
  462.0000 421.2000 m
  462.0000 425.0400 L
S
U
u
  462.0000 427.4400 m
  462.0000 431.2800 L
S
U
u
  462.0000 433.6800 m
  462.0000 437.5200 L
S
U
u
  462.0000 439.9200 m
  462.0000 443.7600 L
S
U
u
  462.0000 446.1600 m
  462.0000 450.0000 L
S
U
u
  462.0000 452.4000 m
  462.0000 456.2400 L
S
U
u
  462.0000 458.6400 m
  462.0000 462.4800 L
S
U
u
  462.0000 464.8800 m
  462.0000 468.7200 L
S
U
u
  462.0000 471.1200 m
  462.0000 474.9600 L
S
U
u
  462.0000 477.3600 m
  462.0000 481.2000 L
S
U
u
  462.0000 483.6000 m
  462.0000 487.4400 L
S
U
u
  462.0000 489.8400 m
  462.0000 493.6800 L
S
U
u
  462.0000 496.0800 m
  462.0000 499.9200 L
S
U
u
  462.0000 502.3200 m
  462.0000 506.1600 L
S
U
u
  462.0000 508.5600 m
  462.0000 512.4000 L
S
U
u
  462.0000 514.8000 m
  462.0000 518.6400 L
S
U
u
  462.0000 521.0400 m
  462.0000 524.8800 L
S
U
u
  462.0000 527.2800 m
  462.0000 531.1200 L
S
U
u
  462.0000 533.5200 m
  462.0000 537.3600 L
S
U
u
  462.0000 539.7600 m
  462.0000 543.6000 L
S
U
u
  462.0000 546.0000 m
  462.0000 549.8400 L
S
U
u
  462.0000 552.2400 m
  462.0000 556.0800 L
S
U
u
  462.0000 558.4800 m
  462.0000 562.3200 L
S
U
u
  462.0000 564.7200 m
  462.0000 568.5600 L
S
U
u
  462.0000 570.9600 m
  462.0000 574.8000 L
S
U
u
  462.0000 577.2000 m
  462.0000 580.5600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  58.8000 34.8000 m
  58.8000 562.5600 L
  49.9200 562.5600 L
  49.9200 34.8000 L
  58.8000 34.8000 L
B
U
u
  11.0400 558.2400 m
  44.1600 558.2400 L
S
U
u
  44.1600 558.2400 m
  50.8800 558.2400 L
S
U
u
  46.3200 561.6000 m
  50.8800 558.2400 L
  46.3200 554.8800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  4.0800 563.5200 m
  57.8400 563.5200 L
  57.8400 576.9600 L
  4.0800 576.9600 L
  4.0800 563.5200 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 5.0400 567.1200 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getAddress\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
1 j
  263.7600 538.5600 m
  263.7600 555.6000 L
  254.8800 555.6000 L
  254.8800 538.5600 L
  263.7600 538.5600 L
B
U
u
  58.5600 553.6800 m
  247.4400 553.6800 L
S
U
u
  247.4400 553.6800 m
  254.4000 553.6800 L
S
U
u
  249.8400 557.0400 m
  254.4000 553.6800 L
  249.8400 550.3200 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  114.7200 555.1200 m
  198.2400 555.1200 L
  198.2400 568.5600 L
  114.7200 568.5600 L
  114.7200 555.1200 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 115.9200 558.4800 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(<<static>> lookup\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  65.5200 542.4000 m
  69.3600 542.4000 L
S
U
u
  71.7600 542.4000 m
  75.6000 542.4000 L
S
U
u
  78.0000 542.4000 m
  81.8400 542.4000 L
S
U
u
  84.2400 542.4000 m
  88.0800 542.4000 L
S
U
u
  90.4800 542.4000 m
  94.3200 542.4000 L
S
U
u
  96.7200 542.4000 m
  100.5600 542.4000 L
S
U
u
  102.9600 542.4000 m
  106.8000 542.4000 L
S
U
u
  109.2000 542.4000 m
  113.0400 542.4000 L
S
U
u
  115.4400 542.4000 m
  119.2800 542.4000 L
S
U
u
  121.6800 542.4000 m
  125.5200 542.4000 L
S
U
u
  127.9200 542.4000 m
  131.7600 542.4000 L
S
U
u
  134.1600 542.4000 m
  138.0000 542.4000 L
S
U
u
  140.4000 542.4000 m
  144.2400 542.4000 L
S
U
u
  146.6400 542.4000 m
  150.4800 542.4000 L
S
U
u
  152.8800 542.4000 m
  156.7200 542.4000 L
S
U
u
  159.1200 542.4000 m
  162.9600 542.4000 L
S
U
u
  165.3600 542.4000 m
  169.2000 542.4000 L
S
U
u
  171.6000 542.4000 m
  175.4400 542.4000 L
S
U
u
  177.8400 542.4000 m
  181.6800 542.4000 L
S
U
u
  184.0800 542.4000 m
  187.9200 542.4000 L
S
U
u
  190.3200 542.4000 m
  194.1600 542.4000 L
S
U
u
  196.5600 542.4000 m
  200.4000 542.4000 L
S
U
u
  202.8000 542.4000 m
  206.6400 542.4000 L
S
U
u
  209.0400 542.4000 m
  212.8800 542.4000 L
S
U
u
  215.2800 542.4000 m
  219.1200 542.4000 L
S
U
u
  221.5200 542.4000 m
  225.3600 542.4000 L
S
U
u
  227.7600 542.4000 m
  231.6000 542.4000 L
S
U
u
  234.0000 542.4000 m
  237.8400 542.4000 L
S
U
u
  240.2400 542.4000 m
  244.0800 542.4000 L
S
U
u
  246.4800 542.4000 m
  250.3200 542.4000 L
S
U
u
  252.7200 542.4000 m
  254.4000 542.4000 L
S
U
u
  65.5200 542.4000 m
  58.5600 542.4000 L
S
U
u
  63.1200 539.0400 m
  58.5600 542.4000 L
  63.1200 545.7600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  329.7600 301.9200 m
  329.7600 516.2400 L
  320.6400 516.2400 L
  320.6400 301.9200 L
  329.7600 301.9200 L
B
U
u
  61.2000 522.4800 m
  315.3600 512.8800 L
S
U
u
  315.3600 512.8800 m
  322.0800 512.6400 L
S
U
u
  317.7600 516.2400 m
  322.0800 512.6400 L
  317.5200 509.2800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  164.8800 518.8800 m
  218.6400 518.8800 L
  218.6400 532.3200 L
  164.8800 532.3200 L
  164.8800 518.8800 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 165.8400 522.2400 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getAddress\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
1 j
  466.5600 477.3600 m
  466.5600 506.4000 L
  457.4400 506.4000 L
  457.4400 477.3600 L
  466.5600 477.3600 L
B
U
u
  394.5600 502.8000 m
  450.7200 502.8000 L
S
U
u
  450.7200 502.8000 m
  457.4400 502.8000 L
S
U
u
  452.8800 506.1600 m
  457.4400 502.8000 L
  452.8800 499.4400 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  403.6800 504.0000 m
  448.5600 504.0000 L
  448.5600 517.6800 L
  403.6800 517.6800 L
  403.6800 504.0000 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 404.6400 507.6000 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getName\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  404.8800 480.0000 m
  408.7200 480.0000 L
S
U
u
  411.1200 480.0000 m
  414.9600 480.0000 L
S
U
u
  417.3600 480.0000 m
  421.2000 480.0000 L
S
U
u
  423.6000 480.0000 m
  427.4400 480.0000 L
S
U
u
  429.8400 480.0000 m
  433.6800 480.0000 L
S
U
u
  436.0800 480.0000 m
  439.9200 480.0000 L
S
U
u
  442.3200 480.0000 m
  446.1600 480.0000 L
S
U
u
  448.5600 480.0000 m
  452.4000 480.0000 L
S
U
u
  454.8000 480.0000 m
  457.6800 480.0000 L
S
U
u
  404.8800 480.0000 m
  398.1600 480.0000 L
S
U
u
  402.4800 476.6400 m
  398.1600 480.0000 L
  402.4800 483.3600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  457.9200 470.1600 m
  457.9200 469.4400 L
  466.8000 469.4400 L
  466.8000 470.1600 L
  457.9200 470.1600 L
B
U
u
  394.5600 431.7600 m
  449.2800 431.7600 L
S
U
u
  449.2800 431.7600 m
  456.0000 431.7600 L
S
U
u
  451.4400 435.1200 m
  456.0000 431.7600 L
  451.4400 428.4000 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  403.2000 437.0400 m
  447.6000 437.0400 L
  447.6000 450.4800 L
  403.2000 450.4800 L
  403.2000 437.0400 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 404.1600 440.6400 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getStreet\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  401.2800 413.2800 m
  405.1200 413.2800 L
S
U
u
  407.5200 413.2800 m
  411.3600 413.2800 L
S
U
u
  413.7600 413.2800 m
  417.6000 413.2800 L
S
U
u
  420.0000 413.2800 m
  423.8400 413.2800 L
S
U
u
  426.2400 413.2800 m
  430.0800 413.2800 L
S
U
u
  432.4800 413.2800 m
  436.3200 413.2800 L
S
U
u
  438.7200 413.2800 m
  442.5600 413.2800 L
S
U
u
  444.9600 413.2800 m
  448.8000 413.2800 L
S
U
u
  451.2000 413.2800 m
  455.0400 413.2800 L
S
U
u
  457.4400 413.2800 m
  458.1600 413.2800 L
S
U
u
  401.2800 413.2800 m
  394.5600 413.2800 L
S
U
u
  399.1200 409.9200 m
  394.5600 413.2800 L
  399.1200 416.6400 L
S
U
u
  0.000 0.000 0.000 0.000 k
  466.5600 344.6400 m
  466.5600 373.6800 L
  457.4400 373.6800 L
  457.4400 344.6400 L
  466.5600 344.6400 L
B
U
u
  394.5600 370.8000 m
  450.0000 370.8000 L
S
U
u
  450.0000 370.8000 m
  456.7200 370.8000 L
S
U
u
  452.1600 374.1600 m
  456.7200 370.8000 L
  452.1600 367.4400 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  403.6800 372.2400 m
  447.8400 372.2400 L
  447.8400 385.6800 L
  403.6800 385.6800 L
  403.6800 372.2400 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 404.6400 375.6000 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getTown\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  401.2800 348.2400 m
  405.1200 348.2400 L
S
U
u
  407.5200 348.2400 m
  411.3600 348.2400 L
S
U
u
  413.7600 348.2400 m
  417.6000 348.2400 L
S
U
u
  420.0000 348.2400 m
  423.8400 348.2400 L
S
U
u
  426.2400 348.2400 m
  430.0800 348.2400 L
S
U
u
  432.4800 348.2400 m
  436.3200 348.2400 L
S
U
u
  438.7200 348.2400 m
  442.5600 348.2400 L
S
U
u
  444.9600 348.2400 m
  448.8000 348.2400 L
S
U
u
  451.2000 348.2400 m
  455.0400 348.2400 L
S
U
u
  457.4400 348.2400 m
  458.1600 348.2400 L
S
U
u
  401.2800 348.2400 m
  394.5600 348.2400 L
S
U
u
  399.1200 344.8800 m
  394.5600 348.2400 L
  399.1200 351.6000 L
S
U
u
  0.000 0.000 0.000 0.000 k
  395.2800 306.9600 m
  395.2800 506.8800 L
  386.1600 506.8800 L
  386.1600 306.9600 L
  395.2800 306.9600 L
B
U
u
  329.5200 505.4400 m
  376.5600 505.4400 L
S
U
u
  376.5600 505.4400 m
  383.2800 505.4400 L
S
U
u
  378.7200 508.8000 m
  383.2800 505.4400 L
  378.7200 502.0800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  329.5200 506.8800 m
  383.2800 506.8800 L
  383.2800 520.3200 L
  329.5200 520.3200 L
  329.5200 506.8800 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 330.4800 510.2400 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getAddress\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  336.2400 312.4800 m
  340.0800 312.4800 L
S
U
u
  342.4800 312.4800 m
  346.3200 312.4800 L
S
U
u
  348.7200 312.4800 m
  352.5600 312.4800 L
S
U
u
  354.9600 312.4800 m
  358.8000 312.4800 L
S
U
u
  361.2000 312.4800 m
  365.0400 312.4800 L
S
U
u
  367.4400 312.4800 m
  371.2800 312.4800 L
S
U
u
  373.6800 312.4800 m
  377.5200 312.4800 L
S
U
u
  379.9200 312.4800 m
  383.2800 312.4800 L
S
U
u
  336.2400 312.4800 m
  329.5200 312.4800 L
S
U
u
  333.8400 309.1200 m
  329.5200 312.4800 L
  333.8400 315.8400 L
S
U
u
  67.4400 297.3600 m
  71.2800 297.6000 L
S
U
u
  73.6800 297.6000 m
  77.5200 297.8400 L
S
U
u
  79.9200 297.8400 m
  83.7600 298.0800 L
S
U
u
  86.1600 298.0800 m
  90.0000 298.3200 L
S
U
u
  92.4000 298.3200 m
  96.2400 298.5600 L
S
U
u
  98.6400 298.8000 m
  102.4800 298.8000 L
S
U
u
  104.8800 299.0400 m
  108.7200 299.0400 L
S
U
u
  111.1200 299.2800 m
  114.9600 299.5200 L
S
U
u
  117.3600 299.5200 m
  121.2000 299.7600 L
S
U
u
  123.6000 299.7600 m
  127.4400 300.0000 L
S
U
u
  129.8400 300.0000 m
  133.6800 300.2400 L
S
U
u
  136.0800 300.2400 m
  139.9200 300.4800 L
S
U
u
  142.3200 300.4800 m
  146.1600 300.7200 L
S
U
u
  148.5600 300.9600 m
  152.4000 300.9600 L
S
U
u
  154.8000 301.2000 m
  158.6400 301.2000 L
S
U
u
  161.0400 301.4400 m
  164.8800 301.4400 L
S
U
u
  167.2800 301.6800 m
  171.1200 301.9200 L
S
U
u
  173.5200 301.9200 m
  177.3600 302.1600 L
S
U
u
  179.7600 302.1600 m
  183.6000 302.4000 L
S
U
u
  186.0000 302.4000 m
  189.8400 302.6400 L
S
U
u
  192.2400 302.6400 m
  196.0800 302.8800 L
S
U
u
  198.4800 302.8800 m
  202.3200 303.1200 L
S
U
u
  204.7200 303.3600 m
  208.5600 303.3600 L
S
U
u
  210.9600 303.6000 m
  214.8000 303.6000 L
S
U
u
  217.2000 303.8400 m
  221.0400 303.8400 L
S
U
u
  223.4400 304.0800 m
  227.2800 304.3200 L
S
U
u
  229.6800 304.3200 m
  233.5200 304.5600 L
S
U
u
  235.9200 304.5600 m
  239.7600 304.8000 L
S
U
u
  242.1600 304.8000 m
  246.0000 305.0400 L
S
U
u
  248.4000 305.0400 m
  252.2400 305.2800 L
S
U
u
  254.6400 305.5200 m
  258.4800 305.5200 L
S
U
u
  260.8800 305.7600 m
  264.7200 305.7600 L
S
U
u
  267.1200 306.0000 m
  270.9600 306.0000 L
S
U
u
  273.3600 306.2400 m
  277.2000 306.4800 L
S
U
u
  279.6000 306.4800 m
  283.4400 306.7200 L
S
U
u
  285.8400 306.7200 m
  289.6800 306.9600 L
S
U
u
  292.0800 306.9600 m
  295.9200 307.2000 L
S
U
u
  298.3200 307.2000 m
  302.1600 307.4400 L
S
U
u
  304.5600 307.4400 m
  308.4000 307.6800 L
S
U
u
  310.8000 307.9200 m
  314.6400 307.9200 L
S
U
u
  317.0400 308.1600 m
  320.8800 308.1600 L
S
U
u
  323.2800 308.4000 m
  324.4800 308.4000 L
S
U
u
  67.4400 297.3600 m
  60.7200 296.8800 L
S
U
u
  65.5200 293.7600 m
  60.7200 296.8800 L
  65.0400 300.4800 L
S
U
u
  0.000 0.000 0.000 0.000 k
  124.8000 43.9200 m
  124.8000 267.3600 L
  115.9200 267.3600 L
  115.9200 43.9200 L
  124.8000 43.9200 L
B
U
u
  60.4800 262.5600 m
  107.7600 262.5600 L
S
U
u
  107.7600 262.5600 m
  114.4800 262.5600 L
S
U
u
  109.9200 265.9200 m
  114.4800 262.5600 L
  109.9200 259.2000 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  61.2000 264.0000 m
  113.7600 264.0000 L
  113.7600 277.4400 L
  61.2000 277.4400 L
  61.2000 264.0000 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 62.1600 267.3600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(setAddress\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
1 j
  194.4000 205.4400 m
  194.4000 224.6400 L
  185.2800 224.6400 L
  185.2800 205.4400 L
  194.4000 205.4400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 1.000 1.000 0.000 K
  497.5200 580.5600 m
  551.5200 580.5600 L
  551.5200 605.7600 L
  497.5200 605.7600 L
  497.5200 580.5600 L
B
U
u
  0.000 0.000 0.000 1.000 K
  504.7200 588.9600 m
  544.0800 588.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 504.7200 590.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIDTO\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 1.000 1.000 0.000 K
1 j
  524.4000 21.8400 m
  524.4000 25.6800 L
S
U
u
  524.4000 28.0800 m
  524.4000 31.9200 L
S
U
u
  524.4000 34.3200 m
  524.4000 38.1600 L
S
U
u
  524.4000 40.5600 m
  524.4000 44.4000 L
S
U
u
  524.4000 46.8000 m
  524.4000 50.6400 L
S
U
u
  524.4000 53.0400 m
  524.4000 56.8800 L
S
U
u
  524.4000 59.2800 m
  524.4000 63.1200 L
S
U
u
  524.4000 65.5200 m
  524.4000 69.3600 L
S
U
u
  524.4000 71.7600 m
  524.4000 75.6000 L
S
U
u
  524.4000 78.0000 m
  524.4000 81.8400 L
S
U
u
  524.4000 84.2400 m
  524.4000 88.0800 L
S
U
u
  524.4000 90.4800 m
  524.4000 94.3200 L
S
U
u
  524.4000 96.7200 m
  524.4000 100.5600 L
S
U
u
  524.4000 102.9600 m
  524.4000 106.8000 L
S
U
u
  524.4000 109.2000 m
  524.4000 113.0400 L
S
U
u
  524.4000 115.4400 m
  524.4000 119.2800 L
S
U
u
  524.4000 121.6800 m
  524.4000 125.5200 L
S
U
u
  524.4000 127.9200 m
  524.4000 131.7600 L
S
U
u
  524.4000 134.1600 m
  524.4000 138.0000 L
S
U
u
  524.4000 140.4000 m
  524.4000 144.2400 L
S
U
u
  524.4000 146.6400 m
  524.4000 150.4800 L
S
U
u
  524.4000 152.8800 m
  524.4000 156.7200 L
S
U
u
  524.4000 159.1200 m
  524.4000 162.9600 L
S
U
u
  524.4000 165.3600 m
  524.4000 169.2000 L
S
U
u
  524.4000 171.6000 m
  524.4000 175.4400 L
S
U
u
  524.4000 177.8400 m
  524.4000 181.6800 L
S
U
u
  524.4000 184.0800 m
  524.4000 187.9200 L
S
U
u
  524.4000 190.3200 m
  524.4000 194.1600 L
S
U
u
  524.4000 196.5600 m
  524.4000 200.4000 L
S
U
u
  524.4000 202.8000 m
  524.4000 206.6400 L
S
U
u
  524.4000 209.0400 m
  524.4000 212.8800 L
S
U
u
  524.4000 215.2800 m
  524.4000 219.1200 L
S
U
u
  524.4000 221.5200 m
  524.4000 225.3600 L
S
U
u
  524.4000 227.7600 m
  524.4000 231.6000 L
S
U
u
  524.4000 234.0000 m
  524.4000 237.8400 L
S
U
u
  524.4000 240.2400 m
  524.4000 244.0800 L
S
U
u
  524.4000 246.4800 m
  524.4000 250.3200 L
S
U
u
  524.4000 252.7200 m
  524.4000 256.5600 L
S
U
u
  524.4000 258.9600 m
  524.4000 262.8000 L
S
U
u
  524.4000 265.2000 m
  524.4000 269.0400 L
S
U
u
  524.4000 271.4400 m
  524.4000 275.2800 L
S
U
u
  524.4000 277.6800 m
  524.4000 281.5200 L
S
U
u
  524.4000 283.9200 m
  524.4000 287.7600 L
S
U
u
  524.4000 290.1600 m
  524.4000 294.0000 L
S
U
u
  524.4000 296.4000 m
  524.4000 300.2400 L
S
U
u
  524.4000 302.6400 m
  524.4000 306.4800 L
S
U
u
  524.4000 308.8800 m
  524.4000 312.7200 L
S
U
u
  524.4000 315.1200 m
  524.4000 318.9600 L
S
U
u
  524.4000 321.3600 m
  524.4000 325.2000 L
S
U
u
  524.4000 327.6000 m
  524.4000 331.4400 L
S
U
u
  524.4000 333.8400 m
  524.4000 337.6800 L
S
U
u
  524.4000 340.0800 m
  524.4000 343.9200 L
S
U
u
  524.4000 346.3200 m
  524.4000 350.1600 L
S
U
u
  524.4000 352.5600 m
  524.4000 356.4000 L
S
U
u
  524.4000 358.8000 m
  524.4000 362.6400 L
S
U
u
  524.4000 365.0400 m
  524.4000 368.8800 L
S
U
u
  524.4000 371.2800 m
  524.4000 375.1200 L
S
U
u
  524.4000 377.5200 m
  524.4000 381.3600 L
S
U
u
  524.4000 383.7600 m
  524.4000 387.6000 L
S
U
u
  524.4000 390.0000 m
  524.4000 393.8400 L
S
U
u
  524.4000 396.2400 m
  524.4000 400.0800 L
S
U
u
  524.4000 402.4800 m
  524.4000 406.3200 L
S
U
u
  524.4000 408.7200 m
  524.4000 412.5600 L
S
U
u
  524.4000 414.9600 m
  524.4000 418.8000 L
S
U
u
  524.4000 421.2000 m
  524.4000 425.0400 L
S
U
u
  524.4000 427.4400 m
  524.4000 431.2800 L
S
U
u
  524.4000 433.6800 m
  524.4000 437.5200 L
S
U
u
  524.4000 439.9200 m
  524.4000 443.7600 L
S
U
u
  524.4000 446.1600 m
  524.4000 450.0000 L
S
U
u
  524.4000 452.4000 m
  524.4000 456.2400 L
S
U
u
  524.4000 458.6400 m
  524.4000 462.4800 L
S
U
u
  524.4000 464.8800 m
  524.4000 468.7200 L
S
U
u
  524.4000 471.1200 m
  524.4000 474.9600 L
S
U
u
  524.4000 477.3600 m
  524.4000 481.2000 L
S
U
u
  524.4000 483.6000 m
  524.4000 487.4400 L
S
U
u
  524.4000 489.8400 m
  524.4000 493.6800 L
S
U
u
  524.4000 496.0800 m
  524.4000 499.9200 L
S
U
u
  524.4000 502.3200 m
  524.4000 506.1600 L
S
U
u
  524.4000 508.5600 m
  524.4000 512.4000 L
S
U
u
  524.4000 514.8000 m
  524.4000 518.6400 L
S
U
u
  524.4000 521.0400 m
  524.4000 524.8800 L
S
U
u
  524.4000 527.2800 m
  524.4000 531.1200 L
S
U
u
  524.4000 533.5200 m
  524.4000 537.3600 L
S
U
u
  524.4000 539.7600 m
  524.4000 543.6000 L
S
U
u
  524.4000 546.0000 m
  524.4000 549.8400 L
S
U
u
  524.4000 552.2400 m
  524.4000 556.0800 L
S
U
u
  524.4000 558.4800 m
  524.4000 562.3200 L
S
U
u
  524.4000 564.7200 m
  524.4000 568.5600 L
S
U
u
  524.4000 570.9600 m
  524.4000 574.8000 L
S
U
u
  524.4000 577.2000 m
  524.4000 580.5600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  528.9600 440.6400 m
  528.9600 456.9600 L
  519.8400 456.9600 L
  519.8400 440.6400 L
  528.9600 440.6400 L
B
U
u
  394.5600 454.5600 m
  510.9600 454.5600 L
S
U
u
  510.9600 454.5600 m
  517.6800 454.5600 L
S
U
u
  513.1200 457.9200 m
  517.6800 454.5600 L
  513.1200 451.2000 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  465.1200 455.7600 m
  512.4000 455.7600 L
  512.4000 469.2000 L
  465.1200 469.2000 L
  465.1200 455.7600 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 466.0800 459.3600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(addValue\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
1 j
  466.5600 407.7600 m
  466.5600 436.8000 L
  457.4400 436.8000 L
  457.4400 407.7600 L
  466.5600 407.7600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  528.9600 373.9200 m
  528.9600 390.2400 L
  519.8400 390.2400 L
  519.8400 373.9200 L
  528.9600 373.9200 L
B
U
u
  394.5600 387.8400 m
  512.1600 387.8400 L
S
U
u
  512.1600 387.8400 m
  518.8800 387.8400 L
S
U
u
  514.3200 391.2000 m
  518.8800 387.8400 L
  514.3200 384.4800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  465.6000 389.0400 m
  512.8800 389.0400 L
  512.8800 402.7200 L
  465.6000 402.7200 L
  465.6000 389.0400 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 466.5600 392.6400 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(addValue\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
1 j
  528.9600 310.3200 m
  528.9600 326.6400 L
  519.8400 326.6400 L
  519.8400 310.3200 L
  528.9600 310.3200 L
B
U
u
  394.5600 323.5200 m
  510.9600 323.5200 L
S
U
u
  510.9600 323.5200 m
  517.6800 323.5200 L
S
U
u
  513.1200 326.8800 m
  517.6800 323.5200 L
  513.1200 320.1600 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  465.1200 324.7200 m
  512.4000 324.7200 L
  512.4000 338.4000 L
  465.1200 338.4000 L
  465.1200 324.7200 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 466.0800 328.3200 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(addValue\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  127.2000 261.1200 m
  248.8800 261.1200 L
S
U
u
  248.8800 261.1200 m
  255.6000 261.1200 L
S
U
u
  251.2800 264.4800 m
  255.6000 261.1200 L
  251.2800 257.7600 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  197.2800 262.5600 m
  242.4000 262.5600 L
  242.4000 276.0000 L
  197.2800 276.0000 L
  197.2800 262.5600 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 198.2400 265.9200 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getValue\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  130.8000 242.8800 m
  134.6400 242.8800 L
S
U
u
  137.0400 242.8800 m
  140.8800 242.8800 L
S
U
u
  143.2800 242.8800 m
  147.1200 242.8800 L
S
U
u
  149.5200 242.8800 m
  153.3600 242.8800 L
S
U
u
  155.7600 242.8800 m
  159.6000 242.8800 L
S
U
u
  162.0000 242.8800 m
  165.8400 242.8800 L
S
U
u
  168.2400 242.8800 m
  172.0800 242.8800 L
S
U
u
  174.4800 242.8800 m
  178.3200 242.8800 L
S
U
u
  180.7200 242.8800 m
  184.5600 242.8800 L
S
U
u
  186.9600 242.8800 m
  190.8000 242.8800 L
S
U
u
  193.2000 243.1200 m
  197.0400 243.1200 L
S
U
u
  199.4400 243.1200 m
  203.2800 243.1200 L
S
U
u
  205.6800 243.1200 m
  209.5200 243.1200 L
S
U
u
  211.9200 243.1200 m
  215.7600 243.1200 L
S
U
u
  218.1600 243.1200 m
  222.0000 243.1200 L
S
U
u
  224.4000 243.1200 m
  228.2400 243.1200 L
S
U
u
  230.6400 243.1200 m
  234.4800 243.1200 L
S
U
u
  236.8800 243.1200 m
  240.7200 243.1200 L
S
U
u
  243.1200 243.1200 m
  246.9600 243.1200 L
S
U
u
  249.3600 243.1200 m
  253.2000 243.1200 L
S
U
u
  130.8000 242.8800 m
  124.0800 242.8800 L
S
U
u
  128.6400 239.5200 m
  124.0800 242.8800 L
  128.6400 246.2400 L
S
U
u
  123.8400 223.6800 m
  179.0400 223.6800 L
S
U
u
  179.0400 223.6800 m
  185.7600 223.6800 L
S
U
u
  181.2000 227.0400 m
  185.7600 223.6800 L
  181.2000 220.3200 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  132.9600 224.8800 m
  176.6400 224.8800 L
  176.6400 238.5600 L
  132.9600 238.5600 L
  132.9600 224.8800 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 133.9200 228.4800 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(setName\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  124.8000 185.5200 m
  248.8800 185.7600 L
S
U
u
  248.8800 185.7600 m
  255.6000 185.7600 L
S
U
u
  251.2800 189.1200 m
  255.6000 185.7600 L
  251.2800 182.4000 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  196.0800 186.9600 m
  241.2000 186.9600 L
  241.2000 200.4000 L
  196.0800 200.4000 L
  196.0800 186.9600 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 197.0400 190.3200 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getValue\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  130.8000 166.8000 m
  134.6400 166.8000 L
S
U
u
  137.0400 166.8000 m
  140.8800 166.8000 L
S
U
u
  143.2800 166.8000 m
  147.1200 166.8000 L
S
U
u
  149.5200 166.8000 m
  153.3600 166.8000 L
S
U
u
  155.7600 166.8000 m
  159.6000 166.8000 L
S
U
u
  162.0000 166.5600 m
  165.8400 166.5600 L
S
U
u
  168.2400 166.5600 m
  172.0800 166.5600 L
S
U
u
  174.4800 166.5600 m
  178.3200 166.5600 L
S
U
u
  180.7200 166.5600 m
  184.5600 166.5600 L
S
U
u
  186.9600 166.5600 m
  190.8000 166.5600 L
S
U
u
  193.2000 166.5600 m
  197.0400 166.5600 L
S
U
u
  199.4400 166.5600 m
  203.2800 166.5600 L
S
U
u
  205.6800 166.5600 m
  209.5200 166.5600 L
S
U
u
  211.9200 166.5600 m
  215.7600 166.5600 L
S
U
u
  218.1600 166.5600 m
  222.0000 166.5600 L
S
U
u
  224.4000 166.5600 m
  228.2400 166.3200 L
S
U
u
  230.6400 166.3200 m
  234.4800 166.3200 L
S
U
u
  236.8800 166.3200 m
  240.7200 166.3200 L
S
U
u
  243.1200 166.3200 m
  246.9600 166.3200 L
S
U
u
  249.3600 166.3200 m
  253.2000 166.3200 L
S
U
u
  130.8000 166.8000 m
  124.0800 166.8000 L
S
U
u
  128.6400 163.4400 m
  124.0800 166.8000 L
  128.6400 170.1600 L
S
U
u
  123.6000 143.2800 m
  179.0400 143.2800 L
S
U
u
  179.0400 143.2800 m
  185.7600 143.2800 L
S
U
u
  181.2000 146.8800 m
  185.7600 143.2800 L
  181.2000 139.9200 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  132.9600 144.7200 m
  176.4000 144.7200 L
  176.4000 158.1600 L
  132.9600 158.1600 L
  132.9600 144.7200 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 133.9200 148.0800 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(setStreet\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  131.7600 87.8400 m
  135.6000 87.8400 L
S
U
u
  138.0000 87.8400 m
  141.8400 87.8400 L
S
U
u
  144.2400 87.8400 m
  148.0800 87.8400 L
S
U
u
  150.4800 87.8400 m
  154.3200 87.8400 L
S
U
u
  156.7200 87.8400 m
  160.5600 87.8400 L
S
U
u
  162.9600 87.8400 m
  166.8000 87.8400 L
S
U
u
  169.2000 87.8400 m
  173.0400 87.8400 L
S
U
u
  175.4400 87.8400 m
  179.2800 87.8400 L
S
U
u
  181.6800 87.8400 m
  185.5200 87.8400 L
S
U
u
  187.9200 87.8400 m
  191.7600 87.8400 L
S
U
u
  194.1600 87.8400 m
  198.0000 87.8400 L
S
U
u
  200.4000 87.8400 m
  204.2400 87.8400 L
S
U
u
  206.6400 87.8400 m
  210.4800 87.8400 L
S
U
u
  212.8800 87.8400 m
  216.7200 87.8400 L
S
U
u
  219.1200 87.8400 m
  222.9600 87.8400 L
S
U
u
  225.3600 87.8400 m
  229.2000 87.8400 L
S
U
u
  231.6000 87.8400 m
  235.4400 87.8400 L
S
U
u
  237.8400 87.8400 m
  241.6800 87.8400 L
S
U
u
  244.0800 87.8400 m
  247.9200 87.8400 L
S
U
u
  250.3200 87.8400 m
  254.1600 87.8400 L
S
U
u
  131.7600 87.8400 m
  124.8000 87.8400 L
S
U
u
  129.3600 84.4800 m
  124.8000 87.8400 L
  129.3600 91.2000 L
S
U
u
  124.3200 67.4400 m
  179.0400 67.4400 L
S
U
u
  179.0400 67.4400 m
  185.7600 67.4400 L
S
U
u
  181.2000 71.0400 m
  185.7600 67.4400 L
  181.2000 64.0800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  133.4400 68.8800 m
  176.6400 68.8800 L
  176.6400 82.3200 L
  133.4400 82.3200 L
  133.4400 68.8800 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 134.6400 72.2400 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(setTown\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
1 j
  24.2400 38.1600 m
  28.0800 38.1600 L
S
U
u
  30.4800 38.1600 m
  34.3200 38.1600 L
S
U
u
  36.7200 38.1600 m
  40.5600 38.1600 L
S
U
u
  42.9600 38.1600 m
  46.8000 38.1600 L
S
U
u
  24.2400 38.1600 m
  17.5200 38.1600 L
S
U
u
  22.0800 34.8000 m
  17.5200 38.1600 L
  22.0800 41.5200 L
S
U
u
  0.000 0.000 0.000 0.000 k
  194.4000 127.9200 m
  194.4000 147.1200 L
  185.2800 147.1200 L
  185.2800 127.9200 L
  194.4000 127.9200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  194.4000 51.3600 m
  194.4000 70.5600 L
  185.2800 70.5600 L
  185.2800 51.3600 L
  194.4000 51.3600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.502 0.000 0.502 0.498 K
  232.3200 310.3200 m
  286.3200 310.3200 L
  286.3200 335.7600 L
  232.3200 335.7600 L
  232.3200 310.3200 L
B
U
u
  0.000 0.000 0.000 1.000 K
  239.5200 318.9600 m
  279.1200 318.9600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 239.5200 320.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(RMIDTO\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.502 0.000 0.502 0.498 K
1 j
  259.2000 21.8400 m
  259.2000 25.6800 L
S
U
u
  259.2000 28.0800 m
  259.2000 31.9200 L
S
U
u
  259.2000 34.3200 m
  259.2000 38.1600 L
S
U
u
  259.2000 40.5600 m
  259.2000 44.4000 L
S
U
u
  259.2000 46.8000 m
  259.2000 50.6400 L
S
U
u
  259.2000 53.0400 m
  259.2000 56.8800 L
S
U
u
  259.2000 59.2800 m
  259.2000 63.1200 L
S
U
u
  259.2000 65.5200 m
  259.2000 69.3600 L
S
U
u
  259.2000 71.7600 m
  259.2000 75.6000 L
S
U
u
  259.2000 78.0000 m
  259.2000 81.8400 L
S
U
u
  259.2000 84.2400 m
  259.2000 88.0800 L
S
U
u
  259.2000 90.4800 m
  259.2000 94.3200 L
S
U
u
  259.2000 96.7200 m
  259.2000 100.5600 L
S
U
u
  259.2000 102.9600 m
  259.2000 106.8000 L
S
U
u
  259.2000 109.2000 m
  259.2000 113.0400 L
S
U
u
  259.2000 115.4400 m
  259.2000 119.2800 L
S
U
u
  259.2000 121.6800 m
  259.2000 125.5200 L
S
U
u
  259.2000 127.9200 m
  259.2000 131.7600 L
S
U
u
  259.2000 134.1600 m
  259.2000 138.0000 L
S
U
u
  259.2000 140.4000 m
  259.2000 144.2400 L
S
U
u
  259.2000 146.6400 m
  259.2000 150.4800 L
S
U
u
  259.2000 152.8800 m
  259.2000 156.7200 L
S
U
u
  259.2000 159.1200 m
  259.2000 162.9600 L
S
U
u
  259.2000 165.3600 m
  259.2000 169.2000 L
S
U
u
  259.2000 171.6000 m
  259.2000 175.4400 L
S
U
u
  259.2000 177.8400 m
  259.2000 181.6800 L
S
U
u
  259.2000 184.0800 m
  259.2000 187.9200 L
S
U
u
  259.2000 190.3200 m
  259.2000 194.1600 L
S
U
u
  259.2000 196.5600 m
  259.2000 200.4000 L
S
U
u
  259.2000 202.8000 m
  259.2000 206.6400 L
S
U
u
  259.2000 209.0400 m
  259.2000 212.8800 L
S
U
u
  259.2000 215.2800 m
  259.2000 219.1200 L
S
U
u
  259.2000 221.5200 m
  259.2000 225.3600 L
S
U
u
  259.2000 227.7600 m
  259.2000 231.6000 L
S
U
u
  259.2000 234.0000 m
  259.2000 237.8400 L
S
U
u
  259.2000 240.2400 m
  259.2000 244.0800 L
S
U
u
  259.2000 246.4800 m
  259.2000 250.3200 L
S
U
u
  259.2000 252.7200 m
  259.2000 256.5600 L
S
U
u
  259.2000 258.9600 m
  259.2000 262.8000 L
S
U
u
  259.2000 265.2000 m
  259.2000 269.0400 L
S
U
u
  259.2000 271.4400 m
  259.2000 275.2800 L
S
U
u
  259.2000 277.6800 m
  259.2000 281.5200 L
S
U
u
  259.2000 283.9200 m
  259.2000 287.7600 L
S
U
u
  259.2000 290.1600 m
  259.2000 294.0000 L
S
U
u
  259.2000 296.4000 m
  259.2000 300.2400 L
S
U
u
  259.2000 302.6400 m
  259.2000 306.4800 L
S
U
u
  259.2000 308.8800 m
  259.2000 310.3200 L
S
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  263.7600 238.0800 m
  263.7600 262.8000 L
  254.8800 262.8000 L
  254.8800 238.0800 L
  263.7600 238.0800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  263.7600 162.7200 m
  263.7600 187.4400 L
  254.8800 187.4400 L
  254.8800 162.7200 L
  263.7600 162.7200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  263.7600 84.4800 m
  263.7600 109.4400 L
  254.8800 109.4400 L
  254.8800 84.4800 L
  263.7600 84.4800 L
B
U
u
  123.8400 105.3600 m
  248.8800 105.3600 L
S
U
u
  248.8800 105.3600 m
  255.6000 105.3600 L
S
U
u
  251.2800 108.9600 m
  255.6000 105.3600 L
  251.2800 102.0000 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  195.6000 106.8000 m
  240.7200 106.8000 L
  240.7200 120.2400 L
  195.6000 120.2400 L
  195.6000 106.8000 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 196.5600 110.1600 0 Tp
TP
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(getValue\(\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
