<HTML>
<HEAD>
<META NAME="description" CONTENT="Willemers Informatik-Ecke: Windows Programmierung: Eingabefeld">
<META NAME="author" CONTENT="Arnold Willemer">
<META NAME="keywords" CONTENT="Windows, Programmierung, Edit, Editfeld, Eingabe, Eingabefeld, Informatik">
<TITLE>Windows-Programmierung: Editfeld
</TITLE>
</HEAD>
<BODY>
<a name="top"><table width=100%><tr><td bgcolor=yellow  align=center>
<H1><font color=black>Windows Programmierung: Das Editfeld</font></H1>
</td></tr></table>
<p><font face="Helvetica" size=3">
<a href="wincontr.htm#top">Einf&uuml;hrende Informationen</a>
 &uuml;ber die Programmierung von Kontrollelementen werden hier vorausgesetzt.
</font><p>

<H2>Stile</H2>

Der Stil des Elementes wird bei der <a href="wincontr.htm#create">Erzeugung</a>
festgelegt. Neben den allgemeinen Fensterstilen besitzt das Editfeld eigene Stile:

<dl>
<dt> ES_AUTOHSCROLL </dt><dd>
  Der Text wird 10 Zeichen weitergeschoben, wenn der Rand des Elements erreicht wird.

<dt> ES_LEFT </dt><dd>
  linksb&uuml;ndig
<dt> ES_CENTER </dt><dd>
  zentriert
<dt> ES_RIGHT </dt><dd>
  rechtsb&uuml;ndig

<dt> ES_LOWERCASE </dt><dd>
  wandelt alle Eingabezeichen in Kleinbuchstaben

<dt> ES_UPPERCASE </dt><dd>
  wandelt alle Eingabezeichen in Gro&szlig;buchstaben


<dt> ES_NOHIDESEL </dt><dd>
  Bei Verlust des Eingabefokus wird normalerweise die Selektion verborgen. 
  Dieser Stil verhindert dies.

<dt> ES_OEMCONVERT </dt><dd>
  Die Eingaben werden von ANSI in den OEM-Zeichensatz konvertiert.

<dt> ES_PASSWORD </dt><dd>
  F&uuml;r jedes eingegebene Zeichen wird ein Stern angezeigt.

<dt> ES_READONLY </dt><dd>
  &Auml;nderungen am Inhalt des Eingabefeldes werden verhindert. 

<dt> ES_MULTILINE </dt><dd>
  Mehrzeiliges Eingabefeld

<dt> ES_AUTOVSCROLL </dt><dd>
  Wenn der Anwender RETURN in der letzten Zeile eines mehrzeiligen Eingabefeldes
  eingibt, wird eine Seite weitergebl&auml;ttert.

<dt> ES_WANTRETURN </dt><dd>
  Ein mehrzeiliges Eingabefeld kann so ein RETURN empfangen, das ansonsten an die
  Dialogbox ginge, um das Default-Element auszul&ouml;sen.
</dl>

<H2>Ansteuerung</H2>

<dl>
<dt> WM_GETTEXT </dt><dd> wParam = max Zeichenzahl, lParam = Adresse des Puffers<p>
  lese den Inhalt des Eingabefeldes
<dt> WM_SETTEXT </dt><dd> wParam = 0, lParam = Adresse des Puffers<p>
  schreibe in den Inhalt des Eingabefeldes

<dt> EM_LIMITTEXT </dt><dd> wParam = max Zeichen, lParam = 0<p>
  begrenzt die Zahl der eingegebenen Zeichen.

<dt> WM_SETFONT </dt><dd> wParam = HFONT, lParam (boolean) Redraw<p>
  Der Zeichensatz des Elements wird umgeschaltet.
  
</dl>


<H2>Ereignisse</H2>

<dl>
<dt> EN_CHANGE </dt><dd> &Auml;nderung am Editfeld nachdem sie angezeigt werden.
<dt> EN_UPDATE </dt><dd> &Auml;nderung am Editfeld bevor sie angezeigt werden.

</dl>

<H2>Beispiel</H2>

Diese Fensterfunktion erzeugt beim Start des Fensters ein Eingabefeld und merkt
sich in der statischen Variablen EdHwnd das Handle. Die 1201 ist die (beliebige)
ID des Editfeldes. Sie muss allerdings im Fenster eindeutig sein.
Wird der Menüpunkt mit der ID M_SHOW (in der Ressource zu erstellen) gedr&uuml;ckt,
erscheint der aktuelle Text des Eingabefeldes in der Messagebox. Der Men&uuml;punkt
IDM_EXIT sorgt nur f&uuml;r ein regul&auml;res Beenden des Programmes.

<p><table border=1 width=100%><tr><td bgcolor=lightblue><pre>
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
static HWND EdHwnd;	// merke Dir das Handle des Edit-Controls
char str[256];

	switch (message) {
	case WM_CREATE:
		EdHwnd = CreateWindow("EDIT", "", 
			ES_AUTOHSCROLL|WS_VISIBLE|WS_CHILD|WS_BORDER,
			10,50,300, 30, hWnd, (HMENU)1201, hInst, 0);
		break;
	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case M_SHOW:
			SendMessage(EdHwnd, WM_GETTEXT, sizeof(str), (ULONG)str);
			MessageBox(hWnd, str, "hallo", MB_OK);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		}
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
   }
   return 0;
}
</pre></td></tr></table><p>

In einer Dialogbox ist der Zugriff auf die Textfelder durch die Funktionen SetDlgItemText
und GetDlgItemText noch etwas einfacher.

<p><table border=1 width=100%><tr><td bgcolor=lightblue><pre>
char str[64];

  SetDlgItemText(hDlg, IDC_EDCOLS, str);
  GetDlgItemText(hDlg, IDC_EDCOLS, str, sizeof(str));
</pre></td></tr></table><p>

Der erste Parameter ist das Dialoghandle, der zweite die Ressource-ID des Kontrollelements.
Im dritten Parameter wird der Speicher angegeben, der den String h&auml;lt. GetDlgItemText
besitzt noch einen vierten Parameter, der die Gr&ouml;sse dieses Speichers angibt.

<hr>
<table width=100%>
<tr><td>
<a href="../index.htm">Homepage</a>
 - <a href="winprg.htm">Windows-API-Programmierung</a>
</td><td align=right>
(C) Copyright 1999, 2000 <a href="mailto:arnold@willemer.de">Arnold Willemer</a>
</td></tr></table>

</BODY>
</HTML>
