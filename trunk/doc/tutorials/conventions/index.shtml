<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>$RCSfile: index.shtml,v $</title>
    <!--
        Copyright (c) 1999-2004. Christian Heller. All rights reserved.

        Permission is granted to copy, distribute and/or modify this document
        under the terms of the GNU Free Documentation License, Version 1.1
        or any later version published by the Free Software Foundation;
        with no Invariant Sections, with no Front-Cover Texts and with no Back-Cover
        Texts. A copy of the license is included in the section entitled
        "GNU Free Documentation License".

        http://www.cybop.net
        - Cybernetics Oriented Programming -
    /-->
    <meta name="date" content="$Revision: 1.1 $ $Date: 2008-10-17 14:27:26 $ $Author: christian $">
    <meta name="author" content="Christian Heller <christian.heller@tuxtax.de>">
    <link rel="stylesheet" type="text/css" href="../../cybop.css"/>
</head>
<body>
    <div id="page">
        <!--#include virtual="../../menu.inc" -->
        <table>
            <tr>
                <td>
                    <h1>Code Conventions</h1>
                    <h2>General Issues</h2>
                    <ol>
                        <li>Avoid using code formatting (beautifier) tools</li>
                        <li>Use spaces and never tab characters</li>
                        <li>Indent code by 4 spaces (editors offer to set the TAB key to 4 spaces)</li>
                        <li>Make use of spaces and white lines to separate code logically</li>
                        <li>Comment all code exhaustively</li>
                    </ol>
                    <h2>CYBOL (XML)</h2>
                    <ol>
                        <li>Write files that are valid according to the CYBOL DTD</li>
                    </ol>
                    <h2>CYBOI (C)</h2>
                    <ol>
                        <li>Document each procedure (functionality, parameters) in javadoc style</li>
                        <li>Use only procedures, no functions -- in other words: no return values besides void</li>
                        <li>Hand over all parameters as void pointer being a reference to their value</li>
                        <li>Make unchangeable parameters constant</li>
                        <li>Only use arrays together with their size and element count;
                            never use null-terminated strings</li>
                        <li>Put the opening brackets to the end of a line, not on an extra line</li>
                        <li>Check pointers for null before accessing them</li>
                        <li>Define all standard strings such as log messages as constant character array</li>
                        <li>Use only if-else conditions, never case statements</li>
                        <li>Use only while loops, never do-while or for loops</li>
                        <li>Use only endless loops and place the loop condition inside the loop</li>
                        <li>Example:
                            <pre>
        /**
        * This is an example procedure.
        * It does nothing.
        *
        * @param p0 the first parameter is an integer
        * @param p1 the second parameter is a character
        * @param p2 the third parameter is a pointer, for example a char pointer (string)
        */
        void example_procedure(void* p0, void* p1, const void* p2) {

            if (p2 != NULL_POINTER) {

                // Cast void pointer parameter to its actual type.
                char** s = (char**) p2;

                // Use the string by dereferencing s.
                // This value was handed over as constant parameter and cannot be changed.
                fprintf(stdout, "The string value is: %s\n", *s);

                if (p1 != NULL_POINTER) {

                    // Cast void pointer parameter to its actual type.
                    char* c = (char*) p1;

                    // Use the character by dereferencing c.
                    *c = 32;

                    if (p0 != NULL_POINTER) {

                        // Cast void pointer parameter to its actual type.
                        int* i = (int*) p0;

                        // Use the integer by dereferencing i.
                        *i = *i + 10;

                        // An example loop.
                        int j = 0;

                        while (1) {

                            if (j >= 10) {

                                break;
                            }

                            j++;
                        }

                    } else {

                        log_message((void*) &ERROR_LOG_LEVEL, (void*) &P0_IS_NULL_MESSAGE, (void*) &P0_IS_NULL_MESSAGE_COUNT);
                    }

                } else {

                    log_message((void*) &ERROR_LOG_LEVEL, (void*) &P1_IS_NULL_MESSAGE, (void*) &P1_IS_NULL_MESSAGE_COUNT);
                }

            } else {

                log_message((void*) &ERROR_LOG_LEVEL, (void*) &P2_IS_NULL_MESSAGE, (void*) &P2_IS_NULL_MESSAGE_COUNT);
            }
        }
                            </pre>
                        </li>
                    </ol>
                </td>
            </tr>
        </table>
        <div id="footer">
            <hr noshade size="1"/>
            Copyright (c) 2002-2008. <a href="mailto:cybop-webmasters@lists.berlios.de">The CYBOP Webmasters</a>. All rights reserved. GNU FDL Licence. Last Update: 2008-10-17
        </div>
    </div>
</body>
</html>
